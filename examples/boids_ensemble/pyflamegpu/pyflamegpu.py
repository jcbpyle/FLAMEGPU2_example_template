# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyflamegpu
else:
    import _pyflamegpu

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyflamegpu.delete_SwigPyIterator

    def value(self):
        return _pyflamegpu.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyflamegpu.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyflamegpu.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyflamegpu.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyflamegpu.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyflamegpu.SwigPyIterator_copy(self)

    def next(self):
        return _pyflamegpu.SwigPyIterator_next(self)

    def __next__(self):
        return _pyflamegpu.SwigPyIterator___next__(self)

    def previous(self):
        return _pyflamegpu.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyflamegpu.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyflamegpu.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyflamegpu.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyflamegpu.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyflamegpu.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyflamegpu.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyflamegpu.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyflamegpu:
_pyflamegpu.SwigPyIterator_swigregister(SwigPyIterator)

class Int8Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.Int8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.Int8Vector___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.Int8Vector___bool__(self)

    def __len__(self):
        return _pyflamegpu.Int8Vector___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.Int8Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.Int8Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.Int8Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.Int8Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.Int8Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.Int8Vector___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.Int8Vector_pop(self)

    def append(self, x):
        return _pyflamegpu.Int8Vector_append(self, x)

    def empty(self):
        return _pyflamegpu.Int8Vector_empty(self)

    def size(self):
        return _pyflamegpu.Int8Vector_size(self)

    def swap(self, v):
        return _pyflamegpu.Int8Vector_swap(self, v)

    def begin(self):
        return _pyflamegpu.Int8Vector_begin(self)

    def end(self):
        return _pyflamegpu.Int8Vector_end(self)

    def rbegin(self):
        return _pyflamegpu.Int8Vector_rbegin(self)

    def rend(self):
        return _pyflamegpu.Int8Vector_rend(self)

    def clear(self):
        return _pyflamegpu.Int8Vector_clear(self)

    def get_allocator(self):
        return _pyflamegpu.Int8Vector_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.Int8Vector_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.Int8Vector_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.Int8Vector_swiginit(self, _pyflamegpu.new_Int8Vector(*args))

    def push_back(self, x):
        return _pyflamegpu.Int8Vector_push_back(self, x)

    def front(self):
        return _pyflamegpu.Int8Vector_front(self)

    def back(self):
        return _pyflamegpu.Int8Vector_back(self)

    def assign(self, n, x):
        return _pyflamegpu.Int8Vector_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.Int8Vector_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.Int8Vector_insert(self, *args)

    def reserve(self, n):
        return _pyflamegpu.Int8Vector_reserve(self, n)

    def capacity(self):
        return _pyflamegpu.Int8Vector_capacity(self)
    __swig_destroy__ = _pyflamegpu.delete_Int8Vector

# Register Int8Vector in _pyflamegpu:
_pyflamegpu.Int8Vector_swigregister(Int8Vector)

class Int16Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.Int16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.Int16Vector___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.Int16Vector___bool__(self)

    def __len__(self):
        return _pyflamegpu.Int16Vector___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.Int16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.Int16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.Int16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.Int16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.Int16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.Int16Vector___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.Int16Vector_pop(self)

    def append(self, x):
        return _pyflamegpu.Int16Vector_append(self, x)

    def empty(self):
        return _pyflamegpu.Int16Vector_empty(self)

    def size(self):
        return _pyflamegpu.Int16Vector_size(self)

    def swap(self, v):
        return _pyflamegpu.Int16Vector_swap(self, v)

    def begin(self):
        return _pyflamegpu.Int16Vector_begin(self)

    def end(self):
        return _pyflamegpu.Int16Vector_end(self)

    def rbegin(self):
        return _pyflamegpu.Int16Vector_rbegin(self)

    def rend(self):
        return _pyflamegpu.Int16Vector_rend(self)

    def clear(self):
        return _pyflamegpu.Int16Vector_clear(self)

    def get_allocator(self):
        return _pyflamegpu.Int16Vector_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.Int16Vector_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.Int16Vector_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.Int16Vector_swiginit(self, _pyflamegpu.new_Int16Vector(*args))

    def push_back(self, x):
        return _pyflamegpu.Int16Vector_push_back(self, x)

    def front(self):
        return _pyflamegpu.Int16Vector_front(self)

    def back(self):
        return _pyflamegpu.Int16Vector_back(self)

    def assign(self, n, x):
        return _pyflamegpu.Int16Vector_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.Int16Vector_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.Int16Vector_insert(self, *args)

    def reserve(self, n):
        return _pyflamegpu.Int16Vector_reserve(self, n)

    def capacity(self):
        return _pyflamegpu.Int16Vector_capacity(self)
    __swig_destroy__ = _pyflamegpu.delete_Int16Vector

# Register Int16Vector in _pyflamegpu:
_pyflamegpu.Int16Vector_swigregister(Int16Vector)

class Int32Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.Int32Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.Int32Vector___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.Int32Vector___bool__(self)

    def __len__(self):
        return _pyflamegpu.Int32Vector___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.Int32Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.Int32Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.Int32Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.Int32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.Int32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.Int32Vector___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.Int32Vector_pop(self)

    def append(self, x):
        return _pyflamegpu.Int32Vector_append(self, x)

    def empty(self):
        return _pyflamegpu.Int32Vector_empty(self)

    def size(self):
        return _pyflamegpu.Int32Vector_size(self)

    def swap(self, v):
        return _pyflamegpu.Int32Vector_swap(self, v)

    def begin(self):
        return _pyflamegpu.Int32Vector_begin(self)

    def end(self):
        return _pyflamegpu.Int32Vector_end(self)

    def rbegin(self):
        return _pyflamegpu.Int32Vector_rbegin(self)

    def rend(self):
        return _pyflamegpu.Int32Vector_rend(self)

    def clear(self):
        return _pyflamegpu.Int32Vector_clear(self)

    def get_allocator(self):
        return _pyflamegpu.Int32Vector_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.Int32Vector_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.Int32Vector_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.Int32Vector_swiginit(self, _pyflamegpu.new_Int32Vector(*args))

    def push_back(self, x):
        return _pyflamegpu.Int32Vector_push_back(self, x)

    def front(self):
        return _pyflamegpu.Int32Vector_front(self)

    def back(self):
        return _pyflamegpu.Int32Vector_back(self)

    def assign(self, n, x):
        return _pyflamegpu.Int32Vector_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.Int32Vector_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.Int32Vector_insert(self, *args)

    def reserve(self, n):
        return _pyflamegpu.Int32Vector_reserve(self, n)

    def capacity(self):
        return _pyflamegpu.Int32Vector_capacity(self)
    __swig_destroy__ = _pyflamegpu.delete_Int32Vector

# Register Int32Vector in _pyflamegpu:
_pyflamegpu.Int32Vector_swigregister(Int32Vector)

class Int64Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.Int64Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.Int64Vector___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.Int64Vector___bool__(self)

    def __len__(self):
        return _pyflamegpu.Int64Vector___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.Int64Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.Int64Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.Int64Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.Int64Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.Int64Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.Int64Vector___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.Int64Vector_pop(self)

    def append(self, x):
        return _pyflamegpu.Int64Vector_append(self, x)

    def empty(self):
        return _pyflamegpu.Int64Vector_empty(self)

    def size(self):
        return _pyflamegpu.Int64Vector_size(self)

    def swap(self, v):
        return _pyflamegpu.Int64Vector_swap(self, v)

    def begin(self):
        return _pyflamegpu.Int64Vector_begin(self)

    def end(self):
        return _pyflamegpu.Int64Vector_end(self)

    def rbegin(self):
        return _pyflamegpu.Int64Vector_rbegin(self)

    def rend(self):
        return _pyflamegpu.Int64Vector_rend(self)

    def clear(self):
        return _pyflamegpu.Int64Vector_clear(self)

    def get_allocator(self):
        return _pyflamegpu.Int64Vector_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.Int64Vector_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.Int64Vector_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.Int64Vector_swiginit(self, _pyflamegpu.new_Int64Vector(*args))

    def push_back(self, x):
        return _pyflamegpu.Int64Vector_push_back(self, x)

    def front(self):
        return _pyflamegpu.Int64Vector_front(self)

    def back(self):
        return _pyflamegpu.Int64Vector_back(self)

    def assign(self, n, x):
        return _pyflamegpu.Int64Vector_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.Int64Vector_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.Int64Vector_insert(self, *args)

    def reserve(self, n):
        return _pyflamegpu.Int64Vector_reserve(self, n)

    def capacity(self):
        return _pyflamegpu.Int64Vector_capacity(self)
    __swig_destroy__ = _pyflamegpu.delete_Int64Vector

# Register Int64Vector in _pyflamegpu:
_pyflamegpu.Int64Vector_swigregister(Int64Vector)

class UInt8Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.UInt8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.UInt8Vector___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.UInt8Vector___bool__(self)

    def __len__(self):
        return _pyflamegpu.UInt8Vector___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.UInt8Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.UInt8Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.UInt8Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.UInt8Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.UInt8Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.UInt8Vector___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.UInt8Vector_pop(self)

    def append(self, x):
        return _pyflamegpu.UInt8Vector_append(self, x)

    def empty(self):
        return _pyflamegpu.UInt8Vector_empty(self)

    def size(self):
        return _pyflamegpu.UInt8Vector_size(self)

    def swap(self, v):
        return _pyflamegpu.UInt8Vector_swap(self, v)

    def begin(self):
        return _pyflamegpu.UInt8Vector_begin(self)

    def end(self):
        return _pyflamegpu.UInt8Vector_end(self)

    def rbegin(self):
        return _pyflamegpu.UInt8Vector_rbegin(self)

    def rend(self):
        return _pyflamegpu.UInt8Vector_rend(self)

    def clear(self):
        return _pyflamegpu.UInt8Vector_clear(self)

    def get_allocator(self):
        return _pyflamegpu.UInt8Vector_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.UInt8Vector_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.UInt8Vector_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.UInt8Vector_swiginit(self, _pyflamegpu.new_UInt8Vector(*args))

    def push_back(self, x):
        return _pyflamegpu.UInt8Vector_push_back(self, x)

    def front(self):
        return _pyflamegpu.UInt8Vector_front(self)

    def back(self):
        return _pyflamegpu.UInt8Vector_back(self)

    def assign(self, n, x):
        return _pyflamegpu.UInt8Vector_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.UInt8Vector_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.UInt8Vector_insert(self, *args)

    def reserve(self, n):
        return _pyflamegpu.UInt8Vector_reserve(self, n)

    def capacity(self):
        return _pyflamegpu.UInt8Vector_capacity(self)
    __swig_destroy__ = _pyflamegpu.delete_UInt8Vector

# Register UInt8Vector in _pyflamegpu:
_pyflamegpu.UInt8Vector_swigregister(UInt8Vector)

class UInt16Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.UInt16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.UInt16Vector___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.UInt16Vector___bool__(self)

    def __len__(self):
        return _pyflamegpu.UInt16Vector___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.UInt16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.UInt16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.UInt16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.UInt16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.UInt16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.UInt16Vector___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.UInt16Vector_pop(self)

    def append(self, x):
        return _pyflamegpu.UInt16Vector_append(self, x)

    def empty(self):
        return _pyflamegpu.UInt16Vector_empty(self)

    def size(self):
        return _pyflamegpu.UInt16Vector_size(self)

    def swap(self, v):
        return _pyflamegpu.UInt16Vector_swap(self, v)

    def begin(self):
        return _pyflamegpu.UInt16Vector_begin(self)

    def end(self):
        return _pyflamegpu.UInt16Vector_end(self)

    def rbegin(self):
        return _pyflamegpu.UInt16Vector_rbegin(self)

    def rend(self):
        return _pyflamegpu.UInt16Vector_rend(self)

    def clear(self):
        return _pyflamegpu.UInt16Vector_clear(self)

    def get_allocator(self):
        return _pyflamegpu.UInt16Vector_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.UInt16Vector_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.UInt16Vector_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.UInt16Vector_swiginit(self, _pyflamegpu.new_UInt16Vector(*args))

    def push_back(self, x):
        return _pyflamegpu.UInt16Vector_push_back(self, x)

    def front(self):
        return _pyflamegpu.UInt16Vector_front(self)

    def back(self):
        return _pyflamegpu.UInt16Vector_back(self)

    def assign(self, n, x):
        return _pyflamegpu.UInt16Vector_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.UInt16Vector_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.UInt16Vector_insert(self, *args)

    def reserve(self, n):
        return _pyflamegpu.UInt16Vector_reserve(self, n)

    def capacity(self):
        return _pyflamegpu.UInt16Vector_capacity(self)
    __swig_destroy__ = _pyflamegpu.delete_UInt16Vector

# Register UInt16Vector in _pyflamegpu:
_pyflamegpu.UInt16Vector_swigregister(UInt16Vector)

class UInt32Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.UInt32Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.UInt32Vector___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.UInt32Vector___bool__(self)

    def __len__(self):
        return _pyflamegpu.UInt32Vector___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.UInt32Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.UInt32Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.UInt32Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.UInt32Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.UInt32Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.UInt32Vector___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.UInt32Vector_pop(self)

    def append(self, x):
        return _pyflamegpu.UInt32Vector_append(self, x)

    def empty(self):
        return _pyflamegpu.UInt32Vector_empty(self)

    def size(self):
        return _pyflamegpu.UInt32Vector_size(self)

    def swap(self, v):
        return _pyflamegpu.UInt32Vector_swap(self, v)

    def begin(self):
        return _pyflamegpu.UInt32Vector_begin(self)

    def end(self):
        return _pyflamegpu.UInt32Vector_end(self)

    def rbegin(self):
        return _pyflamegpu.UInt32Vector_rbegin(self)

    def rend(self):
        return _pyflamegpu.UInt32Vector_rend(self)

    def clear(self):
        return _pyflamegpu.UInt32Vector_clear(self)

    def get_allocator(self):
        return _pyflamegpu.UInt32Vector_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.UInt32Vector_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.UInt32Vector_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.UInt32Vector_swiginit(self, _pyflamegpu.new_UInt32Vector(*args))

    def push_back(self, x):
        return _pyflamegpu.UInt32Vector_push_back(self, x)

    def front(self):
        return _pyflamegpu.UInt32Vector_front(self)

    def back(self):
        return _pyflamegpu.UInt32Vector_back(self)

    def assign(self, n, x):
        return _pyflamegpu.UInt32Vector_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.UInt32Vector_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.UInt32Vector_insert(self, *args)

    def reserve(self, n):
        return _pyflamegpu.UInt32Vector_reserve(self, n)

    def capacity(self):
        return _pyflamegpu.UInt32Vector_capacity(self)
    __swig_destroy__ = _pyflamegpu.delete_UInt32Vector

# Register UInt32Vector in _pyflamegpu:
_pyflamegpu.UInt32Vector_swigregister(UInt32Vector)

class UInt64Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.UInt64Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.UInt64Vector___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.UInt64Vector___bool__(self)

    def __len__(self):
        return _pyflamegpu.UInt64Vector___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.UInt64Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.UInt64Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.UInt64Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.UInt64Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.UInt64Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.UInt64Vector___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.UInt64Vector_pop(self)

    def append(self, x):
        return _pyflamegpu.UInt64Vector_append(self, x)

    def empty(self):
        return _pyflamegpu.UInt64Vector_empty(self)

    def size(self):
        return _pyflamegpu.UInt64Vector_size(self)

    def swap(self, v):
        return _pyflamegpu.UInt64Vector_swap(self, v)

    def begin(self):
        return _pyflamegpu.UInt64Vector_begin(self)

    def end(self):
        return _pyflamegpu.UInt64Vector_end(self)

    def rbegin(self):
        return _pyflamegpu.UInt64Vector_rbegin(self)

    def rend(self):
        return _pyflamegpu.UInt64Vector_rend(self)

    def clear(self):
        return _pyflamegpu.UInt64Vector_clear(self)

    def get_allocator(self):
        return _pyflamegpu.UInt64Vector_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.UInt64Vector_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.UInt64Vector_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.UInt64Vector_swiginit(self, _pyflamegpu.new_UInt64Vector(*args))

    def push_back(self, x):
        return _pyflamegpu.UInt64Vector_push_back(self, x)

    def front(self):
        return _pyflamegpu.UInt64Vector_front(self)

    def back(self):
        return _pyflamegpu.UInt64Vector_back(self)

    def assign(self, n, x):
        return _pyflamegpu.UInt64Vector_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.UInt64Vector_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.UInt64Vector_insert(self, *args)

    def reserve(self, n):
        return _pyflamegpu.UInt64Vector_reserve(self, n)

    def capacity(self):
        return _pyflamegpu.UInt64Vector_capacity(self)
    __swig_destroy__ = _pyflamegpu.delete_UInt64Vector

# Register UInt64Vector in _pyflamegpu:
_pyflamegpu.UInt64Vector_swigregister(UInt64Vector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.FloatVector___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.FloatVector___bool__(self)

    def __len__(self):
        return _pyflamegpu.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.FloatVector___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.FloatVector_pop(self)

    def append(self, x):
        return _pyflamegpu.FloatVector_append(self, x)

    def empty(self):
        return _pyflamegpu.FloatVector_empty(self)

    def size(self):
        return _pyflamegpu.FloatVector_size(self)

    def swap(self, v):
        return _pyflamegpu.FloatVector_swap(self, v)

    def begin(self):
        return _pyflamegpu.FloatVector_begin(self)

    def end(self):
        return _pyflamegpu.FloatVector_end(self)

    def rbegin(self):
        return _pyflamegpu.FloatVector_rbegin(self)

    def rend(self):
        return _pyflamegpu.FloatVector_rend(self)

    def clear(self):
        return _pyflamegpu.FloatVector_clear(self)

    def get_allocator(self):
        return _pyflamegpu.FloatVector_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.FloatVector_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.FloatVector_swiginit(self, _pyflamegpu.new_FloatVector(*args))

    def push_back(self, x):
        return _pyflamegpu.FloatVector_push_back(self, x)

    def front(self):
        return _pyflamegpu.FloatVector_front(self)

    def back(self):
        return _pyflamegpu.FloatVector_back(self)

    def assign(self, n, x):
        return _pyflamegpu.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _pyflamegpu.FloatVector_reserve(self, n)

    def capacity(self):
        return _pyflamegpu.FloatVector_capacity(self)
    __swig_destroy__ = _pyflamegpu.delete_FloatVector

# Register FloatVector in _pyflamegpu:
_pyflamegpu.FloatVector_swigregister(FloatVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.DoubleVector___bool__(self)

    def __len__(self):
        return _pyflamegpu.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.DoubleVector_pop(self)

    def append(self, x):
        return _pyflamegpu.DoubleVector_append(self, x)

    def empty(self):
        return _pyflamegpu.DoubleVector_empty(self)

    def size(self):
        return _pyflamegpu.DoubleVector_size(self)

    def swap(self, v):
        return _pyflamegpu.DoubleVector_swap(self, v)

    def begin(self):
        return _pyflamegpu.DoubleVector_begin(self)

    def end(self):
        return _pyflamegpu.DoubleVector_end(self)

    def rbegin(self):
        return _pyflamegpu.DoubleVector_rbegin(self)

    def rend(self):
        return _pyflamegpu.DoubleVector_rend(self)

    def clear(self):
        return _pyflamegpu.DoubleVector_clear(self)

    def get_allocator(self):
        return _pyflamegpu.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.DoubleVector_swiginit(self, _pyflamegpu.new_DoubleVector(*args))

    def push_back(self, x):
        return _pyflamegpu.DoubleVector_push_back(self, x)

    def front(self):
        return _pyflamegpu.DoubleVector_front(self)

    def back(self):
        return _pyflamegpu.DoubleVector_back(self)

    def assign(self, n, x):
        return _pyflamegpu.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _pyflamegpu.DoubleVector_reserve(self, n)

    def capacity(self):
        return _pyflamegpu.DoubleVector_capacity(self)
    __swig_destroy__ = _pyflamegpu.delete_DoubleVector

# Register DoubleVector in _pyflamegpu:
_pyflamegpu.DoubleVector_swigregister(DoubleVector)


class FLAMEGPUIterator(object):

    def __init__(self, pointerToVector):
        self.pointerToVector = pointerToVector
        self.index = -1

    def __next__(self):
        self.index += 1
        if self.index < len(self.pointerToVector):
            return self.pointerToVector[self.index]
        else:
            raise StopIteration

class UIntArray2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.UIntArray2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.UIntArray2___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.UIntArray2___bool__(self)

    def __len__(self):
        return _pyflamegpu.UIntArray2___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.UIntArray2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.UIntArray2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.UIntArray2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.UIntArray2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.UIntArray2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.UIntArray2___setitem__(self, *args)

    def __init__(self, *args):
        _pyflamegpu.UIntArray2_swiginit(self, _pyflamegpu.new_UIntArray2(*args))

    def empty(self):
        return _pyflamegpu.UIntArray2_empty(self)

    def size(self):
        return _pyflamegpu.UIntArray2_size(self)

    def swap(self, v):
        return _pyflamegpu.UIntArray2_swap(self, v)

    def begin(self):
        return _pyflamegpu.UIntArray2_begin(self)

    def end(self):
        return _pyflamegpu.UIntArray2_end(self)

    def rbegin(self):
        return _pyflamegpu.UIntArray2_rbegin(self)

    def rend(self):
        return _pyflamegpu.UIntArray2_rend(self)

    def front(self):
        return _pyflamegpu.UIntArray2_front(self)

    def back(self):
        return _pyflamegpu.UIntArray2_back(self)

    def fill(self, u):
        return _pyflamegpu.UIntArray2_fill(self, u)
    __swig_destroy__ = _pyflamegpu.delete_UIntArray2

# Register UIntArray2 in _pyflamegpu:
_pyflamegpu.UIntArray2_swigregister(UIntArray2)

class UIntArray3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.UIntArray3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.UIntArray3___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.UIntArray3___bool__(self)

    def __len__(self):
        return _pyflamegpu.UIntArray3___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.UIntArray3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.UIntArray3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.UIntArray3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.UIntArray3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.UIntArray3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.UIntArray3___setitem__(self, *args)

    def __init__(self, *args):
        _pyflamegpu.UIntArray3_swiginit(self, _pyflamegpu.new_UIntArray3(*args))

    def empty(self):
        return _pyflamegpu.UIntArray3_empty(self)

    def size(self):
        return _pyflamegpu.UIntArray3_size(self)

    def swap(self, v):
        return _pyflamegpu.UIntArray3_swap(self, v)

    def begin(self):
        return _pyflamegpu.UIntArray3_begin(self)

    def end(self):
        return _pyflamegpu.UIntArray3_end(self)

    def rbegin(self):
        return _pyflamegpu.UIntArray3_rbegin(self)

    def rend(self):
        return _pyflamegpu.UIntArray3_rend(self)

    def front(self):
        return _pyflamegpu.UIntArray3_front(self)

    def back(self):
        return _pyflamegpu.UIntArray3_back(self)

    def fill(self, u):
        return _pyflamegpu.UIntArray3_fill(self, u)
    __swig_destroy__ = _pyflamegpu.delete_UIntArray3

# Register UIntArray3 in _pyflamegpu:
_pyflamegpu.UIntArray3_swigregister(UIntArray3)

class FGPURuntimeException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg, type):
        _pyflamegpu.FGPURuntimeException_swiginit(self, _pyflamegpu.new_FGPURuntimeException(msg, type))

    def what(self):
        return _pyflamegpu.FGPURuntimeException_what(self)

    def type(self):
        return _pyflamegpu.FGPURuntimeException_type(self)

    def __str__(self):
        return _pyflamegpu.FGPURuntimeException___str__(self)
    __swig_destroy__ = _pyflamegpu.delete_FGPURuntimeException

# Register FGPURuntimeException in _pyflamegpu:
_pyflamegpu.FGPURuntimeException_swigregister(FGPURuntimeException)


def typeName(type):
    return _pyflamegpu.typeName(type)
class IntType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.IntType_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.IntType_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.IntType_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.IntType_fromValue(value)

    def __init__(self):
        _pyflamegpu.IntType_swiginit(self, _pyflamegpu.new_IntType())
    __swig_destroy__ = _pyflamegpu.delete_IntType

# Register IntType in _pyflamegpu:
_pyflamegpu.IntType_swigregister(IntType)

def IntType_size():
    return _pyflamegpu.IntType_size()

def IntType_typeName():
    return _pyflamegpu.IntType_typeName()

def IntType_empty():
    return _pyflamegpu.IntType_empty()

def IntType_fromValue(value):
    return _pyflamegpu.IntType_fromValue(value)

class Int8Type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.Int8Type_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.Int8Type_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.Int8Type_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.Int8Type_fromValue(value)

    def __init__(self):
        _pyflamegpu.Int8Type_swiginit(self, _pyflamegpu.new_Int8Type())
    __swig_destroy__ = _pyflamegpu.delete_Int8Type

# Register Int8Type in _pyflamegpu:
_pyflamegpu.Int8Type_swigregister(Int8Type)

def Int8Type_size():
    return _pyflamegpu.Int8Type_size()

def Int8Type_typeName():
    return _pyflamegpu.Int8Type_typeName()

def Int8Type_empty():
    return _pyflamegpu.Int8Type_empty()

def Int8Type_fromValue(value):
    return _pyflamegpu.Int8Type_fromValue(value)

class Int16Type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.Int16Type_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.Int16Type_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.Int16Type_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.Int16Type_fromValue(value)

    def __init__(self):
        _pyflamegpu.Int16Type_swiginit(self, _pyflamegpu.new_Int16Type())
    __swig_destroy__ = _pyflamegpu.delete_Int16Type

# Register Int16Type in _pyflamegpu:
_pyflamegpu.Int16Type_swigregister(Int16Type)

def Int16Type_size():
    return _pyflamegpu.Int16Type_size()

def Int16Type_typeName():
    return _pyflamegpu.Int16Type_typeName()

def Int16Type_empty():
    return _pyflamegpu.Int16Type_empty()

def Int16Type_fromValue(value):
    return _pyflamegpu.Int16Type_fromValue(value)

class Int32Type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.Int32Type_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.Int32Type_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.Int32Type_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.Int32Type_fromValue(value)

    def __init__(self):
        _pyflamegpu.Int32Type_swiginit(self, _pyflamegpu.new_Int32Type())
    __swig_destroy__ = _pyflamegpu.delete_Int32Type

# Register Int32Type in _pyflamegpu:
_pyflamegpu.Int32Type_swigregister(Int32Type)

def Int32Type_size():
    return _pyflamegpu.Int32Type_size()

def Int32Type_typeName():
    return _pyflamegpu.Int32Type_typeName()

def Int32Type_empty():
    return _pyflamegpu.Int32Type_empty()

def Int32Type_fromValue(value):
    return _pyflamegpu.Int32Type_fromValue(value)

class Int64Type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.Int64Type_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.Int64Type_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.Int64Type_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.Int64Type_fromValue(value)

    def __init__(self):
        _pyflamegpu.Int64Type_swiginit(self, _pyflamegpu.new_Int64Type())
    __swig_destroy__ = _pyflamegpu.delete_Int64Type

# Register Int64Type in _pyflamegpu:
_pyflamegpu.Int64Type_swigregister(Int64Type)

def Int64Type_size():
    return _pyflamegpu.Int64Type_size()

def Int64Type_typeName():
    return _pyflamegpu.Int64Type_typeName()

def Int64Type_empty():
    return _pyflamegpu.Int64Type_empty()

def Int64Type_fromValue(value):
    return _pyflamegpu.Int64Type_fromValue(value)

class UIntType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.UIntType_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.UIntType_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.UIntType_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.UIntType_fromValue(value)

    def __init__(self):
        _pyflamegpu.UIntType_swiginit(self, _pyflamegpu.new_UIntType())
    __swig_destroy__ = _pyflamegpu.delete_UIntType

# Register UIntType in _pyflamegpu:
_pyflamegpu.UIntType_swigregister(UIntType)

def UIntType_size():
    return _pyflamegpu.UIntType_size()

def UIntType_typeName():
    return _pyflamegpu.UIntType_typeName()

def UIntType_empty():
    return _pyflamegpu.UIntType_empty()

def UIntType_fromValue(value):
    return _pyflamegpu.UIntType_fromValue(value)

class UInt8Type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.UInt8Type_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.UInt8Type_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.UInt8Type_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.UInt8Type_fromValue(value)

    def __init__(self):
        _pyflamegpu.UInt8Type_swiginit(self, _pyflamegpu.new_UInt8Type())
    __swig_destroy__ = _pyflamegpu.delete_UInt8Type

# Register UInt8Type in _pyflamegpu:
_pyflamegpu.UInt8Type_swigregister(UInt8Type)

def UInt8Type_size():
    return _pyflamegpu.UInt8Type_size()

def UInt8Type_typeName():
    return _pyflamegpu.UInt8Type_typeName()

def UInt8Type_empty():
    return _pyflamegpu.UInt8Type_empty()

def UInt8Type_fromValue(value):
    return _pyflamegpu.UInt8Type_fromValue(value)

class UInt16Type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.UInt16Type_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.UInt16Type_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.UInt16Type_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.UInt16Type_fromValue(value)

    def __init__(self):
        _pyflamegpu.UInt16Type_swiginit(self, _pyflamegpu.new_UInt16Type())
    __swig_destroy__ = _pyflamegpu.delete_UInt16Type

# Register UInt16Type in _pyflamegpu:
_pyflamegpu.UInt16Type_swigregister(UInt16Type)

def UInt16Type_size():
    return _pyflamegpu.UInt16Type_size()

def UInt16Type_typeName():
    return _pyflamegpu.UInt16Type_typeName()

def UInt16Type_empty():
    return _pyflamegpu.UInt16Type_empty()

def UInt16Type_fromValue(value):
    return _pyflamegpu.UInt16Type_fromValue(value)

class UInt32Type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.UInt32Type_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.UInt32Type_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.UInt32Type_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.UInt32Type_fromValue(value)

    def __init__(self):
        _pyflamegpu.UInt32Type_swiginit(self, _pyflamegpu.new_UInt32Type())
    __swig_destroy__ = _pyflamegpu.delete_UInt32Type

# Register UInt32Type in _pyflamegpu:
_pyflamegpu.UInt32Type_swigregister(UInt32Type)

def UInt32Type_size():
    return _pyflamegpu.UInt32Type_size()

def UInt32Type_typeName():
    return _pyflamegpu.UInt32Type_typeName()

def UInt32Type_empty():
    return _pyflamegpu.UInt32Type_empty()

def UInt32Type_fromValue(value):
    return _pyflamegpu.UInt32Type_fromValue(value)

class UInt64Type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.UInt64Type_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.UInt64Type_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.UInt64Type_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.UInt64Type_fromValue(value)

    def __init__(self):
        _pyflamegpu.UInt64Type_swiginit(self, _pyflamegpu.new_UInt64Type())
    __swig_destroy__ = _pyflamegpu.delete_UInt64Type

# Register UInt64Type in _pyflamegpu:
_pyflamegpu.UInt64Type_swigregister(UInt64Type)

def UInt64Type_size():
    return _pyflamegpu.UInt64Type_size()

def UInt64Type_typeName():
    return _pyflamegpu.UInt64Type_typeName()

def UInt64Type_empty():
    return _pyflamegpu.UInt64Type_empty()

def UInt64Type_fromValue(value):
    return _pyflamegpu.UInt64Type_fromValue(value)

class FloatType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.FloatType_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.FloatType_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.FloatType_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.FloatType_fromValue(value)

    def __init__(self):
        _pyflamegpu.FloatType_swiginit(self, _pyflamegpu.new_FloatType())
    __swig_destroy__ = _pyflamegpu.delete_FloatType

# Register FloatType in _pyflamegpu:
_pyflamegpu.FloatType_swigregister(FloatType)

def FloatType_size():
    return _pyflamegpu.FloatType_size()

def FloatType_typeName():
    return _pyflamegpu.FloatType_typeName()

def FloatType_empty():
    return _pyflamegpu.FloatType_empty()

def FloatType_fromValue(value):
    return _pyflamegpu.FloatType_fromValue(value)

class DoubleType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        return _pyflamegpu.DoubleType_size()

    @staticmethod
    def typeName():
        return _pyflamegpu.DoubleType_typeName()

    @staticmethod
    def empty():
        return _pyflamegpu.DoubleType_empty()

    @staticmethod
    def fromValue(value):
        return _pyflamegpu.DoubleType_fromValue(value)

    def __init__(self):
        _pyflamegpu.DoubleType_swiginit(self, _pyflamegpu.new_DoubleType())
    __swig_destroy__ = _pyflamegpu.delete_DoubleType

# Register DoubleType in _pyflamegpu:
_pyflamegpu.DoubleType_swigregister(DoubleType)

def DoubleType_size():
    return _pyflamegpu.DoubleType_size()

def DoubleType_typeName():
    return _pyflamegpu.DoubleType_typeName()

def DoubleType_empty():
    return _pyflamegpu.DoubleType_empty()

def DoubleType_fromValue(value):
    return _pyflamegpu.DoubleType_fromValue(value)

class HostFunctionCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def run(self, arg0):
        return _pyflamegpu.HostFunctionCallback_run(self, arg0)
    __swig_destroy__ = _pyflamegpu.delete_HostFunctionCallback

    def __init__(self):
        if self.__class__ == HostFunctionCallback:
            _self = None
        else:
            _self = self
        _pyflamegpu.HostFunctionCallback_swiginit(self, _pyflamegpu.new_HostFunctionCallback(_self, ))
    def __disown__(self):
        self.this.disown()
        _pyflamegpu.disown_HostFunctionCallback(self)
        return weakref.proxy(self)

# Register HostFunctionCallback in _pyflamegpu:
_pyflamegpu.HostFunctionCallback_swigregister(HostFunctionCallback)

class HostFunctionConditionCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def run(self, arg0):
        return _pyflamegpu.HostFunctionConditionCallback_run(self, arg0)
    __swig_destroy__ = _pyflamegpu.delete_HostFunctionConditionCallback

    def __init__(self):
        if self.__class__ == HostFunctionConditionCallback:
            _self = None
        else:
            _self = self
        _pyflamegpu.HostFunctionConditionCallback_swiginit(self, _pyflamegpu.new_HostFunctionConditionCallback(_self, ))
    def __disown__(self):
        self.this.disown()
        _pyflamegpu.disown_HostFunctionConditionCallback(self)
        return weakref.proxy(self)

# Register HostFunctionConditionCallback in _pyflamegpu:
_pyflamegpu.HostFunctionConditionCallback_swigregister(HostFunctionConditionCallback)

CONTINUE = _pyflamegpu.CONTINUE
EXIT = _pyflamegpu.EXIT
class ModelDescription(object):
    r"""
    This class represents the hierarchy of components for a FLAMEGPU model
    This is the initial class that should be created by a modeller
    See also: ModelData The internal data store for this class
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model_name):
        r"""
        Constructor
        :type model_name: string
        :param model_name: Name of the model, this must be unique between models currently held by instances of CUDASimulation
        """
        _pyflamegpu.ModelDescription_swiginit(self, _pyflamegpu.new_ModelDescription(model_name))

    def __eq__(self, rhs):
        r"""
        Equality operator, checks whether ModelDescription hierarchies are functionally the same
        :rtype: boolean
        :return: True when models are the same
        Notes: Instead compare pointers if you wish to check that they are the same instance
        """
        return _pyflamegpu.ModelDescription___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""
        Equality operator, checks whether ModelDescription hierarchies are functionally different
        :rtype: boolean
        :return: True when models are not the same
        Notes: Instead compare pointers if you wish to check that they are not the same instance
        """
        return _pyflamegpu.ModelDescription___ne__(self, rhs)

    def newAgent(self, agent_name):
        r"""
        Creates a new agent with the specified name
        :type agent_name: string
        :param agent_name: Name which can be used to refer to the agent within the model description hierarchy
        :rtype: :py:class:`AgentDescription`
        :return: A mutable reference to the specified AgentDescription
        :raises: InvalidAgentName If an agent with the same name already exists within the model description hierarchy
        """
        return _pyflamegpu.ModelDescription_newAgent(self, agent_name)

    def Agent(self, agent_name):
        r"""
        Returns a mutable reference to the named agent, which can be used to configure the agent
        :type agent_name: string
        :param agent_name: Name which can be used to the refer to the desired agent within the model description hierarchy
        :rtype: :py:class:`AgentDescription`
        :return: A mutable reference to the specified AgentDescription
        :raises: InvalidAgentName If an agent with the name does not exist within the model description hierarchy
        See also: ModelDescription::getAgent(const std::string &) for the immutable version
        """
        return _pyflamegpu.ModelDescription_Agent(self, agent_name)

    def newMessage(self, message_name):
        return _pyflamegpu.ModelDescription_newMessage(self, message_name)

    def Message(self, message_name):
        return _pyflamegpu.ModelDescription_Message(self, message_name)

    def Environment(self):
        r"""
        Returns a mutable reference to the environment description for the model description hierarchy
        This can be used to configure environment properties
        See also: ModelDescription::getEnvironment() for the immutable version
        """
        return _pyflamegpu.ModelDescription_Environment(self)

    def newSubModel(self, submodel_name, submodel_description):
        r"""
        Add a submodel to the Model Description hierarchy
        The return value can be used to map agent variables
        :type submodel_name: string
        :param submodel_name: The name used to refer to the submodel (e.g. when adding it to the layer)
        :type submodel_description: :py:class:`ModelDescription`
        :param submodel_description: The actual definition of the submodel
        """
        return _pyflamegpu.ModelDescription_newSubModel(self, submodel_name, submodel_description)

    def SubModel(self, submodel_name):
        r"""
        Returns a mutable reference to the named submodel
        :type submodel_name: string
        :param submodel_name: Name which can be used to the refer to the desired submodel within the model description hierarchy
        :rtype: :py:class:`SubModelDescription`
        :return: A mutable reference to the specified SubModelDescription
        :raises: InvalidSubModelName If a submodel with the name does not exist within the model description hierarchy
        See also: ModelDescription::getSubModel(const std::string &) for the immutable version
        """
        return _pyflamegpu.ModelDescription_SubModel(self, submodel_name)

    def newLayer(self, *args):
        r"""
        Creates a new layer with the specified name
        :type name: string, optional
        :param name: Name which can be used to refer to the message within the model description hierarchy
        :rtype: :py:class:`LayerDescription`
        :return: A mutable reference to the new LayerDescription
        :raises: InvalidFuncLayerIndx If a layer with the same name already exists within the model description hierarchy
        Notes: Layer names are not required, passing empty string will not set a name
        """
        return _pyflamegpu.ModelDescription_newLayer(self, *args)

    def Layer(self, *args):
        r"""
        *Overload 1:*

        Returns a mutable reference to the named layer, which can be used to configure the layer
        :type name: string
        :param name: Name used to refer to the desired layer within the model description hierarchy
        :rtype: :py:class:`LayerDescription`
        :return: A mutable reference to the specified LayerDescription
        :raises: InvalidFuncLayerIndx If a layer with the name does not exist within the model description hierarchy
        See also: ModelDescription::Layer(const ModelData::size_type &)
        See also: ModelDescription::getLayer(const std::string &) for the immutable version

        |

        *Overload 2:*

        Returns a mutable reference to the named layer, which can be used to configure the layer
        :type layer_index: int
        :param layer_index: Index of the desired layer within the model description hierarchy
        :rtype: :py:class:`LayerDescription`
        :return: A mutable reference to the specified LayerDescription
        :raises: InvalidFuncLayerIndx If a layer with the name does not exist within the model description hierarchy
        See also: ModelDescription::Layer(const std::string &)
        See also: ModelDescription::getLayer(const ModelData::size_type &) for the immutable version
        """
        return _pyflamegpu.ModelDescription_Layer(self, *args)

    def addInitFunctionCallback(self, func_callback):
        r"""
        Adds an init function callback to the simulation. The callback objects is similar to adding via addInitFunction
        however the runnable function is encapsulated within an object which permits cross language support in swig.
        Init functions execute once before the simulation begins
        :type func_callback: :py:class:`HostFunctionCallback`
        :param func_callback: Pointer to the desired init function callback
        :raises: InvalidHostFunc If the init function has already been added to this model description
        Notes: There is no guarantee on the order in which multiple init functions will be executed
        """
        return _pyflamegpu.ModelDescription_addInitFunctionCallback(self, func_callback)

    def addStepFunctionCallback(self, func_callback):
        r"""
        Adds an step function callback to the simulation. The callback objects is similar to adding via addStepFunction
        however the runnable function is encapsulated within an object which permits cross language support in swig.
        Exit functions execute once after the simulation ends
        :type func_callback: :py:class:`HostFunctionCallback`
        :param func_callback: Pointer to the desired exit function callback
        :raises: InvalidHostFunc If the step function has already been added to this model description
        Notes: There is no guarantee on the order in which multiple step functions will be executed, host-layer functions can be used if order is required.
        """
        return _pyflamegpu.ModelDescription_addStepFunctionCallback(self, func_callback)

    def addExitFunctionCallback(self, func_callback):
        r"""
        Adds an exit function callback to the simulation. The callback objects is similar to adding via addExitFunction
        however the runnable function is encapsulated within an object which permits cross language support in swig.
        Exit functions execute once after all simulation steps have completed or an exit conditions has returned EXIT
        :type func_callback: :py:class:`HostFunctionCallback`
        :param func_callback: Pointer to the desired exit function callback
        :raises: InvalidHostFunc If the exit function has already been added to this model description
        Notes: There is no guarantee on the order in which multiple exit functions will be executed
        """
        return _pyflamegpu.ModelDescription_addExitFunctionCallback(self, func_callback)

    def addExitConditionCallback(self, func_callback):
        r"""
        Adds an exit condition callback to the simulation
        Exit conditions execute once per step, after all layers and step functions have been executed
        If the condition returns false, the simulation exits early
        :type func_callback: :py:class:`HostFunctionConditionCallback`
        :param func_callback: Pointer to the desired exit condition callback
        :raises: InvalidHostFunc If the exit condition has already been added to this model description
        Notes: Exit conditions are the last functions to operate each step and can still make changes to the model
        The step counter is updated after exit conditions have completed
        There is no guarantee on the order in which multiple exit conditions will be executed
        """
        return _pyflamegpu.ModelDescription_addExitConditionCallback(self, func_callback)

    def getName(self):
        r"""
        :rtype: string
        :return: The model's name
        """
        return _pyflamegpu.ModelDescription_getName(self)

    def getAgent(self, agent_name):
        r"""
        Returns an immutable reference to the specified agent, which can be used to view the agent's configuration
        :type agent_name: string
        :param agent_name: Name which can be used to the refer to the desired agent within the model description hierarchy
        :rtype: :py:class:`AgentDescription`
        :return: An immutable reference to the specified AgentDescription
        :raises: InvalidAgentName If an agent with the name does not exist within the model description hierarchy
        See also: ModelDescription::Agent(const std::string &) for the mutable version
        """
        return _pyflamegpu.ModelDescription_getAgent(self, agent_name)

    def getMessage(self, message_name):
        return _pyflamegpu.ModelDescription_getMessage(self, message_name)

    def getSubModel(self, submodel_name):
        r"""
        Returns an immutable reference to the specified submodel, which can be used to view the submodel's configuration
        :type submodel_name: string
        :param submodel_name: Name which can be used to the refer to the desired submodel within the model description hierarchy
        :rtype: :py:class:`SubModelDescription`
        :return: An immutable reference to the specified SubModelDescription
        :raises: InvalidSubModelName If a submodel with the name does not exist within the model description hierarchy
        See also: ModelDescription::SubModel(const std::string &) for the mutable version
        """
        return _pyflamegpu.ModelDescription_getSubModel(self, submodel_name)

    def getEnvironment(self):
        r"""
        Returns a mutable reference to the environment description for the model description hierarchy
        This can be used to configure environment properties
        See also: ModelDescription::Environment() for the mutable version
        """
        return _pyflamegpu.ModelDescription_getEnvironment(self)

    def getLayer(self, *args):
        r"""
        *Overload 1:*

        Returns a mutable reference to the named layer, which can be used to configure the layer
        :type name: string
        :param name: Name used to refer to the desired layer within the model description hierarchy
        :rtype: :py:class:`LayerDescription`
        :return: An immutable reference to the specified LayerDescription
        :raises: InvalidFuncLayerIndx If a layer with the name does not exist within the model description hierarchy
        See also: ModelDescription::getLayer(const ModelData::size_type &)
        See also: ModelDescription::Layer(const std::string &) for the mutable version

        |

        *Overload 2:*

        Returns a mutable reference to the named layer, which can be used to configure the layer
        :type layer_index: int
        :param layer_index: Index of the desired layer within the model description hierarchy
        :rtype: :py:class:`LayerDescription`
        :return: An immutable reference to the specified LayerDescription
        :raises: InvalidFuncLayerIndx If a layer with the name does not exist within the model description hierarchy
        See also: ModelDescription::getLayer(const std::string &)
        See also: ModelDescription::Layer(const ModelData::size_type &) for the mutable version
        """
        return _pyflamegpu.ModelDescription_getLayer(self, *args)

    def hasAgent(self, agent_name):
        r"""
        :type agent_name: string
        :param agent_name: Name of the agent to check
        :rtype: boolean
        :return: True when an agent with the specified name exists within the model's hierarchy
        """
        return _pyflamegpu.ModelDescription_hasAgent(self, agent_name)

    def hasMessage(self, message_name):
        return _pyflamegpu.ModelDescription_hasMessage(self, message_name)

    def hasLayer(self, *args):
        r"""
        *Overload 1:*

        :type name: string
        :param name: Name of the layer to check
        :rtype: boolean
        :return: True when a layer with the specified name exists within the model's hierarchy

        |

        *Overload 2:*

        :type layer_index: int
        :param layer_index: Index of the agent to check
        :rtype: boolean
        :return: True when a layer with the specified index exists within the model's hierarchy
        """
        return _pyflamegpu.ModelDescription_hasLayer(self, *args)

    def hasSubModel(self, submodel_name):
        r"""
        :type submodel_name: string
        :param submodel_name: Name of the submodel to check
        :rtype: boolean
        :return: True when a submodel with the specified name exists within the model's hierarchy
        """
        return _pyflamegpu.ModelDescription_hasSubModel(self, submodel_name)

    def getAgentsCount(self):
        r"""
        :rtype: int
        :return: The number of agents within the model's hierarchy
        """
        return _pyflamegpu.ModelDescription_getAgentsCount(self)

    def getMessagesCount(self):
        r"""
        :rtype: int
        :return: The number of messages within the model's hierarchy
        """
        return _pyflamegpu.ModelDescription_getMessagesCount(self)

    def getLayersCount(self):
        r"""
        :rtype: int
        :return: The number of layers within the model's hierarchy
        """
        return _pyflamegpu.ModelDescription_getLayersCount(self)

    def newMessageBruteForce(self, message_name):
        r"""
        Creates a new message with the specified name
        :type message_name: string
        :param message_name: Name which can be used to refer to the message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: A mutable reference to the new MessageDescription
        :raises: InvalidMessageName If a message with the same name already exists within the model description hierarchy
        """
        return _pyflamegpu.ModelDescription_newMessageBruteForce(self, message_name)

    def newMessageSpatial2D(self, message_name):
        r"""
        Creates a new message with the specified name
        :type message_name: string
        :param message_name: Name which can be used to refer to the message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: A mutable reference to the new MessageDescription
        :raises: InvalidMessageName If a message with the same name already exists within the model description hierarchy
        """
        return _pyflamegpu.ModelDescription_newMessageSpatial2D(self, message_name)

    def newMessageSpatial3D(self, message_name):
        r"""
        Creates a new message with the specified name
        :type message_name: string
        :param message_name: Name which can be used to refer to the message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: A mutable reference to the new MessageDescription
        :raises: InvalidMessageName If a message with the same name already exists within the model description hierarchy
        """
        return _pyflamegpu.ModelDescription_newMessageSpatial3D(self, message_name)

    def newMessageArray(self, message_name):
        r"""
        Creates a new message with the specified name
        :type message_name: string
        :param message_name: Name which can be used to refer to the message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: A mutable reference to the new MessageDescription
        :raises: InvalidMessageName If a message with the same name already exists within the model description hierarchy
        """
        return _pyflamegpu.ModelDescription_newMessageArray(self, message_name)

    def newMessageArray2D(self, message_name):
        r"""
        Creates a new message with the specified name
        :type message_name: string
        :param message_name: Name which can be used to refer to the message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: A mutable reference to the new MessageDescription
        :raises: InvalidMessageName If a message with the same name already exists within the model description hierarchy
        """
        return _pyflamegpu.ModelDescription_newMessageArray2D(self, message_name)

    def newMessageArray3D(self, message_name):
        r"""
        Creates a new message with the specified name
        :type message_name: string
        :param message_name: Name which can be used to refer to the message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: A mutable reference to the new MessageDescription
        :raises: InvalidMessageName If a message with the same name already exists within the model description hierarchy
        """
        return _pyflamegpu.ModelDescription_newMessageArray3D(self, message_name)

    def newMessageBucket(self, message_name):
        r"""
        Creates a new message with the specified name
        :type message_name: string
        :param message_name: Name which can be used to refer to the message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: A mutable reference to the new MessageDescription
        :raises: InvalidMessageName If a message with the same name already exists within the model description hierarchy
        """
        return _pyflamegpu.ModelDescription_newMessageBucket(self, message_name)

    def getMessageBruteForce(self, message_name):
        r"""
        Returns a mutable reference to the named message, which can be used to configure the message
        :type message_name: string
        :param message_name: Name used to refer to the desired message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: An immutable reference to the specified MessageDescription
        :raises: InvalidMessageName If a message with the name does not exist within the model description hierarchy
        See also: ModelDescription::Message(const std::string &) for the mutable version
        """
        return _pyflamegpu.ModelDescription_getMessageBruteForce(self, message_name)

    def getMessageSpatial2D(self, message_name):
        r"""
        Returns a mutable reference to the named message, which can be used to configure the message
        :type message_name: string
        :param message_name: Name used to refer to the desired message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: An immutable reference to the specified MessageDescription
        :raises: InvalidMessageName If a message with the name does not exist within the model description hierarchy
        See also: ModelDescription::Message(const std::string &) for the mutable version
        """
        return _pyflamegpu.ModelDescription_getMessageSpatial2D(self, message_name)

    def getMessageSpatial3D(self, message_name):
        r"""
        Returns a mutable reference to the named message, which can be used to configure the message
        :type message_name: string
        :param message_name: Name used to refer to the desired message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: An immutable reference to the specified MessageDescription
        :raises: InvalidMessageName If a message with the name does not exist within the model description hierarchy
        See also: ModelDescription::Message(const std::string &) for the mutable version
        """
        return _pyflamegpu.ModelDescription_getMessageSpatial3D(self, message_name)

    def getMessageArray(self, message_name):
        r"""
        Returns a mutable reference to the named message, which can be used to configure the message
        :type message_name: string
        :param message_name: Name used to refer to the desired message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: An immutable reference to the specified MessageDescription
        :raises: InvalidMessageName If a message with the name does not exist within the model description hierarchy
        See also: ModelDescription::Message(const std::string &) for the mutable version
        """
        return _pyflamegpu.ModelDescription_getMessageArray(self, message_name)

    def getMessageArray2D(self, message_name):
        r"""
        Returns a mutable reference to the named message, which can be used to configure the message
        :type message_name: string
        :param message_name: Name used to refer to the desired message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: An immutable reference to the specified MessageDescription
        :raises: InvalidMessageName If a message with the name does not exist within the model description hierarchy
        See also: ModelDescription::Message(const std::string &) for the mutable version
        """
        return _pyflamegpu.ModelDescription_getMessageArray2D(self, message_name)

    def getMessageArray3D(self, message_name):
        r"""
        Returns a mutable reference to the named message, which can be used to configure the message
        :type message_name: string
        :param message_name: Name used to refer to the desired message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: An immutable reference to the specified MessageDescription
        :raises: InvalidMessageName If a message with the name does not exist within the model description hierarchy
        See also: ModelDescription::Message(const std::string &) for the mutable version
        """
        return _pyflamegpu.ModelDescription_getMessageArray3D(self, message_name)

    def getMessageBucket(self, message_name):
        r"""
        Returns a mutable reference to the named message, which can be used to configure the message
        :type message_name: string
        :param message_name: Name used to refer to the desired message within the model description hierarchy
        :rtype: :py:class:`Description`
        :return: An immutable reference to the specified MessageDescription
        :raises: InvalidMessageName If a message with the name does not exist within the model description hierarchy
        See also: ModelDescription::Message(const std::string &) for the mutable version
        """
        return _pyflamegpu.ModelDescription_getMessageBucket(self, message_name)
    __swig_destroy__ = _pyflamegpu.delete_ModelDescription

# Register ModelDescription in _pyflamegpu:
_pyflamegpu.ModelDescription_swigregister(ModelDescription)

class AgentDescription(object):
    r"""
    Within the model hierarchy, this class represents the definition of an agent for a FLAMEGPU model
    This class is used to configure external elements of agents, such as variables and functions
    See also: AgentData The internal data store for this class
    See also: ModelDescription::newAgent(const std::string&) For creating instances of this class
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __eq__(self, rhs):
        r"""
        Equality operator, checks whether AgentDescription hierarchies are functionally the same
        :rtype: boolean
        :return: True when agents are the same
        Notes: Instead compare pointers if you wish to check that they are the same instance
        """
        return _pyflamegpu.AgentDescription___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""
        Equality operator, checks whether AgentDescription hierarchies are functionally different
        :rtype: boolean
        :return: True when agents are not the same
        Notes: Instead compare pointers if you wish to check that they are not the same instance
        """
        return _pyflamegpu.AgentDescription___ne__(self, rhs)

    def newState(self, state_name):
        r"""
        Adds a new state to the possible states this agent can enter
        State's only exist as strings and have no additional configuration
        :type state_name: string
        :param state_name: Name of the state
        :raises: InvalidStateName If the agent already has a state with the same name
        """
        return _pyflamegpu.AgentDescription_newState(self, state_name)

    def setInitialState(self, initial_state):
        r"""
        Sets the initial state which new agents begin in
        :type initial_state: string
        :param initial_state: Name of the desired state
        :raises: InvalidStateName If the named state is not found within the agent
        """
        return _pyflamegpu.AgentDescription_setInitialState(self, initial_state)

    def newRTCFunction(self, function_name, func_src):
        r"""
        Adds a new runtime (device) function to the agent
        :type function_name: string
        :param function_name: Name of the functions
        :type func_src: string
        :param func_src: representation of an agent function
            Should be declared using FLAMEGPU_AGENT_FUNCTION notation
        :rtype: :py:class:`AgentFunctionDescription`
        :return: A mutable reference to the new AgentFunctionDescription
        :raises: InvalidAgentFunc If a variable already exists within the agent with the same name
        Notes: The same agent function can be passed to the same agent twice
        """
        return _pyflamegpu.AgentDescription_newRTCFunction(self, function_name, func_src)

    def Function(self, function_name):
        r"""
        Returns a mutable reference to the named agent function, which can be used to configure the function
        :type function_name: string
        :param function_name: Name used to refer to the desired agent function
        :rtype: :py:class:`AgentFunctionDescription`
        :return: A mutable reference to the specified AgentFunctionDescription
        :raises: InvalidAgentFunc If a functions with the name does not exist within the agent
        See also: AgentDescription::getFunction(const std::string &) for the immutable version
        """
        return _pyflamegpu.AgentDescription_Function(self, function_name)

    def getName(self):
        r"""
        :rtype: string
        :return: The agent's name
        """
        return _pyflamegpu.AgentDescription_getName(self)

    def getStatesCount(self):
        r"""
        :rtype: int
        :return: The number of possible states agents of this type can enter
        """
        return _pyflamegpu.AgentDescription_getStatesCount(self)

    def getInitialState(self):
        r"""
        :rtype: string
        :return: The state which newly created agents of this type begin in
        """
        return _pyflamegpu.AgentDescription_getInitialState(self)

    def getVariableType(self, variable_name):
        r"""
        :type variable_name: string
        :param variable_name: Name used to refer to the desired variable
        :rtype: std::type_index
        :return: The type of the named variable
        :raises: InvalidAgentVar If a variable with the name does not exist within the agent
        """
        return _pyflamegpu.AgentDescription_getVariableType(self, variable_name)

    def getVariableSize(self, variable_name):
        r"""
        :type variable_name: string
        :param variable_name: Name used to refer to the desired variable
        :rtype: int
        :return: The size of the named variable's type
        :raises: InvalidAgentVar If a variable with the name does not exist within the agent
        """
        return _pyflamegpu.AgentDescription_getVariableSize(self, variable_name)

    def getVariableLength(self, variable_name):
        r"""
        :type variable_name: string
        :param variable_name: Name used to refer to the desired variable
        :rtype: int
        :return: The number of elements in the name variable (1 if it isn't an array)
        :raises: InvalidAgentVar If a variable with the name does not exist within the agent
        """
        return _pyflamegpu.AgentDescription_getVariableLength(self, variable_name)

    def getVariablesCount(self):
        r"""The total number of variables within the agent"""
        return _pyflamegpu.AgentDescription_getVariablesCount(self)

    def getFunction(self, function_name):
        r"""
        Returns an immutable reference to the named agent function
        :type function_name: string
        :param function_name: Name used to refer to the desired agent function
        :rtype: :py:class:`AgentFunctionDescription`
        :return: An immutable reference to the specified AgentFunctionDescription
        :raises: InvalidAgentFunc If a function with the name does not exist within the agent
        See also: AgentDescription::Function(const std::string &) for the mutable version
        """
        return _pyflamegpu.AgentDescription_getFunction(self, function_name)

    def getFunctionsCount(self):
        r"""The total number of functions within the agent"""
        return _pyflamegpu.AgentDescription_getFunctionsCount(self)

    def getAgentOutputsCount(self):
        r"""
        The total number of agent functions, within the model hierarchy, which create new agents of this type
        See also: AgentDescription::isOutputOnDevice()
        """
        return _pyflamegpu.AgentDescription_getAgentOutputsCount(self)

    def hasState(self, state_name):
        r"""
        :type state_name: string
        :param state_name: Name of the state to check
        :rtype: boolean
        :return: True when a state with the specified name exists within the agent
        """
        return _pyflamegpu.AgentDescription_hasState(self, state_name)

    def hasVariable(self, variable_name):
        r"""
        :type variable_name: string
        :param variable_name: Name of the variable to check
        :rtype: boolean
        :return: True when a variable with the specified name exists within the agent
        """
        return _pyflamegpu.AgentDescription_hasVariable(self, variable_name)

    def hasFunction(self, function_name):
        r"""
        :type function_name: string
        :param function_name: Name of the function to check
        :rtype: boolean
        :return: True when a function with the specified name exists within the agent
        """
        return _pyflamegpu.AgentDescription_hasFunction(self, function_name)

    def isOutputOnDevice(self):
        return _pyflamegpu.AgentDescription_isOutputOnDevice(self)

    def getStates(self):
        return _pyflamegpu.AgentDescription_getStates(self)

    def newVariableFloat(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableFloat(self, variable_name, default_value)

    def newVariableDouble(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableDouble(self, variable_name, default_value)

    def newVariableInt16(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableInt16(self, variable_name, default_value)

    def newVariableInt32(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableInt32(self, variable_name, default_value)

    def newVariableInt64(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableInt64(self, variable_name, default_value)

    def newVariableUInt16(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableUInt16(self, variable_name, default_value)

    def newVariableUInt32(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableUInt32(self, variable_name, default_value)

    def newVariableUInt64(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableUInt64(self, variable_name, default_value)

    def newVariableInt(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableInt(self, variable_name, default_value)

    def newVariableUInt(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableUInt(self, variable_name, default_value)

    def newVariableInt8(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableInt8(self, variable_name, default_value)

    def newVariableUInt8(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableUInt8(self, variable_name, default_value)

    def newVariableChar(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableChar(self, variable_name, default_value)

    def newVariableUChar(self, variable_name, default_value=0):
        return _pyflamegpu.AgentDescription_newVariableUChar(self, variable_name, default_value)

    def newVariableArrayFloat(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayFloat(self, *args)

    def newVariableArrayDouble(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayDouble(self, *args)

    def newVariableArrayInt16(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayInt16(self, *args)

    def newVariableArrayInt32(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayInt32(self, *args)

    def newVariableArrayInt64(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayInt64(self, *args)

    def newVariableArrayUInt16(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayUInt16(self, *args)

    def newVariableArrayUInt32(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayUInt32(self, *args)

    def newVariableArrayUInt64(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayUInt64(self, *args)

    def newVariableArrayInt(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayInt(self, *args)

    def newVariableArrayUInt(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayUInt(self, *args)

    def newVariableArrayInt8(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayInt8(self, *args)

    def newVariableArrayUInt8(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayUInt8(self, *args)

    def newVariableArrayChar(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayChar(self, *args)

    def newVariableArrayUChar(self, *args):
        return _pyflamegpu.AgentDescription_newVariableArrayUChar(self, *args)
    __swig_destroy__ = _pyflamegpu.delete_AgentDescription

# Register AgentDescription in _pyflamegpu:
_pyflamegpu.AgentDescription_swigregister(AgentDescription)

class AgentFunctionDescription(object):
    r"""
    Within the model hierarchy, this class represents an agent function for a FLAMEGPU model
    This class is used to configure external elements of agent functions, such as inputs and outputs
    See also: AgentDescription::newFunction(const std::string&, AgentFunction) For creating instances of this class
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __eq__(self, rhs):
        r"""
        Equality operator, checks whether AgentFunctionDescription hierarchies are functionally the same
        :rtype: boolean
        :return: True when agent functions are the same
        Notes: Instead compare pointers if you wish to check that they are the same instance
        """
        return _pyflamegpu.AgentFunctionDescription___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""
        Equality operator, checks whether AgentFunctionDescription hierarchies are functionally different
        :rtype: boolean
        :return: True when agent functions are not the same
        Notes: Instead compare pointers if you wish to check that they are not the same instance
        """
        return _pyflamegpu.AgentFunctionDescription___ne__(self, rhs)

    def setInitialState(self, initial_state):
        r"""
        Sets the initial state which agents must be in to execute this function
        :type initial_state: string
        :param initial_state: Name of the desired state
        :raises: InvalidStateName If the named state is not found within the agent
        See also: AgentFunctionDescription::setEndState(const std::string &)
        """
        return _pyflamegpu.AgentFunctionDescription_setInitialState(self, initial_state)

    def setEndState(self, end_state):
        r"""
        Sets the end state which agents enter after executing this function
        :type end_state: string
        :param end_state: Name of the desired state
        :raises: InvalidStateName If the named state is not found within the agent
        See also: AgentFunctionDescription::setInitialState(const std::string &)
        """
        return _pyflamegpu.AgentFunctionDescription_setEndState(self, end_state)

    def setMessageInput(self, *args):
        r"""
        *Overload 1:*

        Sets the message type that can be read during this agent function
        This is optional, and only one type of message can be read per agent function
        :type message_name: string
        :param message_name: Name of the message type to be input
        :raises: InvalidMessageName If a message with the same name is not found within the model's hierarchy
        :raises: InvalidMessageName If the same message is already bound to the message output of this agent function
        See also: AgentFunctionDescription::setMessageInput(MessageDescription &)

        |

        *Overload 2:*

        Sets the message type that can be read during this agent function
        This is optional, and only one type of message can be read per agent function
        :type message: :py:class:`Description`
        :param message: Type of message to be input
        :raises: DifferentModel If the message is not from this model hierarchy
        :raises: InvalidMessageName If a message with the same name is not found within the model's hierarchy
        :raises: InvalidMessageName If the same message is already bound to the message output of this agent function
        See also: AgentFunctionDescription::setMessageInput(const std::string &)
        """
        return _pyflamegpu.AgentFunctionDescription_setMessageInput(self, *args)

    def setMessageOutput(self, *args):
        r"""
        *Overload 1:*

        Sets the message type that can be output during this agent function
        This is optional, and only one type of message can be output per agent function
        :type message_name: string
        :param message_name: Name of the message type to be output
        :raises: InvalidMessageName If a message with the same name is not found within the model's hierarchy
        :raises: InvalidMessageName If the same message is already bound to the message input of this agent function
        See also: AgentFunctionDescription::setMessageOutput(MessageDescription &)
        See also: AgentFunctionDescription::setMessageOutputOptional(const bool &) To configure whether all agents must output messages

        |

        *Overload 2:*

        Sets the message type that can be output during this agent function
        This is optional, and only one type of message can be output per agent function
        :type message: :py:class:`Description`
        :param message: Type of message to be output
        :raises: DifferentModel If the message is not from this model hierarchy
        :raises: InvalidMessageName If a message with the same name is not found within the model's hierarchy
        :raises: InvalidMessageName If the same message is already bound to the message input of this agent function
        See also: AgentFunctionDescription::setMessageInput(const std::string &)
        See also: AgentFunctionDescription::setMessageOutputOptional(const bool &) To configure whether all agents must output messages
        """
        return _pyflamegpu.AgentFunctionDescription_setMessageOutput(self, *args)

    def setMessageOutputOptional(self, output_is_optional):
        r"""
        Configures whether message output from this agent function is optional
        (e.g. whether all agents must output a message each time the function is called)
        If the function has no message output, this can be ignored
        :type output_is_optional: boolean
        :param output_is_optional: True if not all agents executing this function will output messages
        Notes: Defaults to false
        """
        return _pyflamegpu.AgentFunctionDescription_setMessageOutputOptional(self, output_is_optional)

    def setAgentOutput(self, *args):
        r"""
        *Overload 1:*

        Sets the agent type that can be output during this agent function
        This is optional, and only one type of agent can be output per agent function
        :type agent_name: string
        :param agent_name: Name of the agent type to be output
        :type state: string, optional
        :param state: The stage agents should be created in
        :raises: InvalidAgentName If an agent with the same name is not found within the model's hierarchy
        :raises: InvalidStateName If the named agent does not contain the named state
        See also: AgentFunctionDescription::setAgentOutput(AgentDescription &)

        |

        *Overload 2:*

        Sets the agent type that can be output during this agent function
        This is optional, and only one type of agent can be output per agent function
        :type agent: :py:class:`AgentDescription`
        :param agent: Type of agent to be output
        :type state: string, optional
        :param state: The stage agents should be created in
        :raises: DifferentModel If the agent is not from this model hierarchy
        :raises: InvalidAgentName If an agent with the same name is not found within the model's hierarchy
        :raises: InvalidStateName If the named agent does not contain the named state
        See also: AgentFunctionDescription::setAgentOutput(AgentDescription &)

        |

        *Overload 3:*

        Sets the agent type that can be output during this agent function
        This is optional, and only one type of agent can be output per agent function
        :type agent: :py:class:`AgentDescription`
        :param agent: Type of agent to be output
        :param state: The stage agents should be created in
        :raises: DifferentModel If the agent is not from this model hierarchy
        :raises: InvalidAgentName If an agent with the same name is not found within the model's hierarchy
        :raises: InvalidStateName If the named agent does not contain the named state
        See also: AgentFunctionDescription::setAgentOutput(AgentDescription &)
        """
        return _pyflamegpu.AgentFunctionDescription_setAgentOutput(self, *args)

    def setAllowAgentDeath(self, has_death):
        r"""
        Configures whether agents can die during execution of this function
        (e.g. by returning FLAME_GPU_AGENT_STATUS::DEAD from the agent function)
        :type has_death: boolean
        :param has_death: True if some agents executing this agent function may die
        See also: AgentFunctionDescription::AllowAgentDeath()
        See also: AgentFunctionDescription::getAllowAgentDeath()
        Notes: Defaults to false
        """
        return _pyflamegpu.AgentFunctionDescription_setAllowAgentDeath(self, has_death)

    def setRTCFunctionCondition(self, func_cond_src):
        r"""
        Sets the RTC function condition for the agent function
        This is string containing a definition of an FLAMEGPU_AGENT_FUNCTION_CONDITION which returns a boolean value (true or false)
        Only agents which return true perform the attached FLAMEGPU_AGENT_FUNCTION
        and transition from the initial to end state.
        The string will be compiled at runtime.
        """
        return _pyflamegpu.AgentFunctionDescription_setRTCFunctionCondition(self, func_cond_src)

    def MessageInput(self):
        r"""
        :rtype: :py:class:`Description`
        :return: A mutable reference to the message input of this agent function
        See also: AgentFunctionDescription::getMessageInput() for the immutable version
        :raises: OutOfBoundsException If the message input has not been set
        """
        return _pyflamegpu.AgentFunctionDescription_MessageInput(self)

    def MessageOutput(self):
        r"""
        :rtype: :py:class:`Description`
        :return: An mutable reference to the message output of this agent function
        See also: AgentFunctionDescription::getMessageOutput() for the immutable version
        :raises: OutOfBoundsException If the message output has not been set
        """
        return _pyflamegpu.AgentFunctionDescription_MessageOutput(self)

    def MessageOutputOptional(self):
        r"""
        :rtype: boolean
        :return: A mutable reference to the message output optional configuration flag
        See also: AgentFunctionDescription::getAgentOutputOptional()
        See also: AgentFunctionDescription::setAgentOutputOptional(const bool &)
        """
        return _pyflamegpu.AgentFunctionDescription_MessageOutputOptional(self)

    def AllowAgentDeath(self):
        r"""
        :rtype: boolean
        :return: A mutable reference to the allow agent death configuration flag
        See also: AgentFunctionDescription::getAllowAgentDeath()
        See also: AgentFunctionDescription::setAllowAgentDeath(const bool &)
        """
        return _pyflamegpu.AgentFunctionDescription_AllowAgentDeath(self)

    def getName(self):
        r"""
        :rtype: string
        :return: The function's name
        """
        return _pyflamegpu.AgentFunctionDescription_getName(self)

    def getInitialState(self):
        r"""
        :rtype: string
        :return: The state which agents must be in to execute this agent function
        """
        return _pyflamegpu.AgentFunctionDescription_getInitialState(self)

    def getEndState(self):
        r"""
        :rtype: string
        :return: The state which agents executing this function enter
        """
        return _pyflamegpu.AgentFunctionDescription_getEndState(self)

    def getMessageInput(self):
        r"""
        :rtype: :py:class:`Description`
        :return: An immutable reference to the message input of this agent function
        See also: AgentFunctionDescription::MessageInput() for the mutable version
        :raises: OutOfBoundsException If the message input has not been set
        """
        return _pyflamegpu.AgentFunctionDescription_getMessageInput(self)

    def getMessageOutput(self):
        r"""
        :rtype: :py:class:`Description`
        :return: An immutable reference to the message output of this agent function
        See also: AgentFunctionDescription::MessageOutput() for the mutable version
        :raises: OutOfBoundsException If the message output has not been set
        """
        return _pyflamegpu.AgentFunctionDescription_getMessageOutput(self)

    def getMessageOutputOptional(self):
        r"""
        :rtype: boolean
        :return: True if message output from this agent function is optional
        """
        return _pyflamegpu.AgentFunctionDescription_getMessageOutputOptional(self)

    def getAgentOutput(self):
        r"""
        :rtype: :py:class:`AgentDescription`
        :return: An immutable reference to the agent output of this agent function
        :raises: OutOfBoundsException If the agent output has not been set
        """
        return _pyflamegpu.AgentFunctionDescription_getAgentOutput(self)

    def getAgentOutputState(self):
        r"""
        :rtype: string
        :return: The state output agents will be output in
        :raises: OutOfBoundsException If the agent output has not been set
        """
        return _pyflamegpu.AgentFunctionDescription_getAgentOutputState(self)

    def getAllowAgentDeath(self):
        r"""
        :rtype: boolean
        :return: True if this agent function can kill agents
        """
        return _pyflamegpu.AgentFunctionDescription_getAllowAgentDeath(self)

    def hasMessageInput(self):
        r"""
        :rtype: boolean
        :return: True if setMessageInput() has been called successfully
        See also: AgentFunctionDescription::setMessageInput(const std::string &)
        See also: AgentFunctionDescription::setMessageInput(MessageDescription &)
        """
        return _pyflamegpu.AgentFunctionDescription_hasMessageInput(self)

    def hasMessageOutput(self):
        r"""
        :rtype: boolean
        :return: True if setMessageOutput() has been called successfully
        See also: AgentFunctionDescription::setMessageOutput(const std::string &)
        See also: AgentFunctionDescription::setMessageOutput(MessageDescription &)
        """
        return _pyflamegpu.AgentFunctionDescription_hasMessageOutput(self)

    def hasAgentOutput(self):
        r"""
        :rtype: boolean
        :return: True if setAgentOutput() has been called successfully
        See also: AgentFunctionDescription::setAgentOutput(const std::string &)
        See also: AgentFunctionDescription::setAgentOutput(AgentDescription &)
        """
        return _pyflamegpu.AgentFunctionDescription_hasAgentOutput(self)

    def hasFunctionCondition(self):
        r"""
        :rtype: boolean
        :return: True if setFunctionCondition() has been called successfully
        See also: AgentFunctionDescription::setFunctionCondition(AgentFunctionCondition)
        """
        return _pyflamegpu.AgentFunctionDescription_hasFunctionCondition(self)

    def isRTC(self):
        r"""
        :rtype: boolean
        :return: True if the function is a runtime time specified function
        """
        return _pyflamegpu.AgentFunctionDescription_isRTC(self)
    __swig_destroy__ = _pyflamegpu.delete_AgentFunctionDescription

# Register AgentFunctionDescription in _pyflamegpu:
_pyflamegpu.AgentFunctionDescription_swigregister(AgentFunctionDescription)

class EnvironmentDescription(object):
    r"""
    Description class for environment properties

    Allows environment properties to be prepared and attached to a ModelDescription.
    Properties can be any arithmetic or enum type.
    Properties marked as const within the EnvironmentDescription cannot be changed during the simulation
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""Default destruction"""
        _pyflamegpu.EnvironmentDescription_swiginit(self, _pyflamegpu.new_EnvironmentDescription())

    def __eq__(self, rhs):
        return _pyflamegpu.EnvironmentDescription___eq__(self, rhs)

    def __ne__(self, rhs):
        return _pyflamegpu.EnvironmentDescription___ne__(self, rhs)

    def getConst(self, name):
        r"""
        Returns whether an environment property is marked as const
        :type name: string
        :param name: name used for accessing the property
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_getConst(self, name)

    def getPropertiesMap(self):
        return _pyflamegpu.EnvironmentDescription_getPropertiesMap(self)

    def newPropertyFloat(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: float
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyFloat(self, name, value, isConst)

    def newPropertyDouble(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: float
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyDouble(self, name, value, isConst)

    def newPropertyInt16(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyInt16(self, name, value, isConst)

    def newPropertyInt32(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyInt32(self, name, value, isConst)

    def newPropertyInt64(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyInt64(self, name, value, isConst)

    def newPropertyUInt16(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyUInt16(self, name, value, isConst)

    def newPropertyUInt32(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyUInt32(self, name, value, isConst)

    def newPropertyUInt64(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyUInt64(self, name, value, isConst)

    def newPropertyInt(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyInt(self, name, value, isConst)

    def newPropertyUInt(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyUInt(self, name, value, isConst)

    def newPropertyInt8(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: signed char
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyInt8(self, name, value, isConst)

    def newPropertyUInt8(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: unsigned char
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyUInt8(self, name, value, isConst)

    def newPropertyChar(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: char
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyChar(self, name, value, isConst)

    def newPropertyUChar(self, name, value, isConst=False):
        r"""
        Adds a new environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: unsigned char
        :param value: stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyUChar(self, name, value, isConst)

    def newPropertyArrayFloat(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< float,std::allocator< float > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayFloat(self, name, length, value, isConst)

    def newPropertyArrayDouble(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< double,std::allocator< double > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayDouble(self, name, length, value, isConst)

    def newPropertyArrayInt16(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< short,std::allocator< short > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayInt16(self, name, length, value, isConst)

    def newPropertyArrayInt32(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< int,std::allocator< int > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayInt32(self, name, length, value, isConst)

    def newPropertyArrayInt64(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< long long,std::allocator< long long > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayInt64(self, name, length, value, isConst)

    def newPropertyArrayUInt16(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned short,std::allocator< unsigned short > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayUInt16(self, name, length, value, isConst)

    def newPropertyArrayUInt32(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned int,std::allocator< unsigned int > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayUInt32(self, name, length, value, isConst)

    def newPropertyArrayUInt64(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned long long,std::allocator< unsigned long long > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayUInt64(self, name, length, value, isConst)

    def newPropertyArrayInt(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< int,std::allocator< int > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayInt(self, name, length, value, isConst)

    def newPropertyArrayUInt(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned int,std::allocator< unsigned int > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayUInt(self, name, length, value, isConst)

    def newPropertyArrayInt8(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< signed char,std::allocator< signed char > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayInt8(self, name, length, value, isConst)

    def newPropertyArrayUInt8(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned char,std::allocator< unsigned char > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayUInt8(self, name, length, value, isConst)

    def newPropertyArrayChar(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< char,std::allocator< char > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayChar(self, name, length, value, isConst)

    def newPropertyArrayUChar(self, name, length, value, isConst=False):
        r"""
        Adds a new environment property array
        :type name: string
        :param name: Name used for accessing the property
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned char,std::allocator< unsigned char > >
        :param value: Stored value of the property
        :type isConst: boolean, optional
        :param isConst: If set to true, it is not possible to change the value during the simulation
        :param T: Type of the environmental property array to be created
        :raises: DuplicateEnvProperty If a property of the same name already exists
        """
        return _pyflamegpu.EnvironmentDescription_newPropertyArrayUChar(self, name, length, value, isConst)

    def getPropertyFloat(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyFloat(self, *args)

    def getPropertyDouble(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyDouble(self, *args)

    def getPropertyInt16(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyInt16(self, *args)

    def getPropertyInt32(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyInt32(self, *args)

    def getPropertyInt64(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyInt64(self, *args)

    def getPropertyUInt16(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyUInt16(self, *args)

    def getPropertyUInt32(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyUInt32(self, *args)

    def getPropertyUInt64(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyUInt64(self, *args)

    def getPropertyInt(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyInt(self, *args)

    def getPropertyUInt(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyUInt(self, *args)

    def getPropertyInt8(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyInt8(self, *args)

    def getPropertyUInt8(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyUInt8(self, *args)

    def getPropertyChar(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyChar(self, *args)

    def getPropertyUChar(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyUChar(self, *args)

    def getPropertyArrayFloat(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayFloat(self, name)

    def getPropertyArrayDouble(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayDouble(self, name)

    def getPropertyArrayInt16(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayInt16(self, name)

    def getPropertyArrayInt32(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayInt32(self, name)

    def getPropertyArrayInt64(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayInt64(self, name)

    def getPropertyArrayUInt16(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayUInt16(self, name)

    def getPropertyArrayUInt32(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayUInt32(self, name)

    def getPropertyArrayUInt64(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayUInt64(self, name)

    def getPropertyArrayInt(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayInt(self, name)

    def getPropertyArrayUInt(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayUInt(self, name)

    def getPropertyArrayInt8(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayInt8(self, name)

    def getPropertyArrayUInt8(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayUInt8(self, name)

    def getPropertyArrayChar(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayChar(self, name)

    def getPropertyArrayUChar(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        """
        return _pyflamegpu.EnvironmentDescription_getPropertyArrayUChar(self, name)

    def setPropertyFloat(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: float
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: float
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: float
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: float
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyFloat(self, *args)

    def setPropertyDouble(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: float
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: float
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: float
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: float
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyDouble(self, *args)

    def setPropertyInt16(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyInt16(self, *args)

    def setPropertyInt32(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyInt32(self, *args)

    def setPropertyInt64(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyInt64(self, *args)

    def setPropertyUInt16(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyUInt16(self, *args)

    def setPropertyUInt32(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyUInt32(self, *args)

    def setPropertyUInt64(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyUInt64(self, *args)

    def setPropertyInt(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyInt(self, *args)

    def setPropertyUInt(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: int
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: int
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyUInt(self, *args)

    def setPropertyInt8(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: signed char
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: signed char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: signed char
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: signed char
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyInt8(self, *args)

    def setPropertyUInt8(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: unsigned char
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: unsigned char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: unsigned char
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: unsigned char
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyUInt8(self, *args)

    def setPropertyChar(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: char
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: char
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: char
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyChar(self, *args)

    def setPropertyUChar(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: unsigned char
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: unsigned char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to set
        :type value: unsigned char
        :param value: value to set the property
        :param T: Type of the value to be returned
        :rtype: unsigned char
        :return: Returns the previous value of the environment property array element which has been set
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: set(const std::string &, const T &value)
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyUChar(self, *args)

    def setPropertyArrayFloat(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< float,std::allocator< float > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< float,std::allocator< float > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayFloat(self, name, value)

    def setPropertyArrayDouble(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< double,std::allocator< double > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< double,std::allocator< double > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayDouble(self, name, value)

    def setPropertyArrayInt16(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< short,std::allocator< short > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< short,std::allocator< short > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayInt16(self, name, value)

    def setPropertyArrayInt32(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< int,std::allocator< int > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< int,std::allocator< int > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayInt32(self, name, value)

    def setPropertyArrayInt64(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< long long,std::allocator< long long > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< long long,std::allocator< long long > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayInt64(self, name, value)

    def setPropertyArrayUInt16(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< unsigned short,std::allocator< unsigned short > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< unsigned short,std::allocator< unsigned short > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayUInt16(self, name, value)

    def setPropertyArrayUInt32(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< unsigned int,std::allocator< unsigned int > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< unsigned int,std::allocator< unsigned int > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayUInt32(self, name, value)

    def setPropertyArrayUInt64(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< unsigned long long,std::allocator< unsigned long long > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< unsigned long long,std::allocator< unsigned long long > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayUInt64(self, name, value)

    def setPropertyArrayInt(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< int,std::allocator< int > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< int,std::allocator< int > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayInt(self, name, value)

    def setPropertyArrayUInt(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< unsigned int,std::allocator< unsigned int > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< unsigned int,std::allocator< unsigned int > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayUInt(self, name, value)

    def setPropertyArrayInt8(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< signed char,std::allocator< signed char > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< signed char,std::allocator< signed char > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayInt8(self, name, value)

    def setPropertyArrayUInt8(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< unsigned char,std::allocator< unsigned char > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< unsigned char,std::allocator< unsigned char > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayUInt8(self, name, value)

    def setPropertyArrayChar(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< char,std::allocator< char > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< char,std::allocator< char > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayChar(self, name, value)

    def setPropertyArrayUChar(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :type value: std::vector< unsigned char,std::allocator< unsigned char > >
        :param value: value to set the property (vector must be of the correct length)
        :param T: Type of the value to be returned
        :rtype: std::vector< unsigned char,std::allocator< unsigned char > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        """
        return _pyflamegpu.EnvironmentDescription_setPropertyArrayUChar(self, name, value)
    __swig_destroy__ = _pyflamegpu.delete_EnvironmentDescription

# Register EnvironmentDescription in _pyflamegpu:
_pyflamegpu.EnvironmentDescription_swigregister(EnvironmentDescription)

class LayerDescription(object):
    r"""
    Within the model hierarchy, this class represents an execution layer for a FLAMEGPU model
    This class is used to configure which agent and host functions execute at a stage of the model's execution
    See also: ModelDescription::newLayer(const std::string&) For creating instances of this class
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __eq__(self, rhs):
        r"""
        Equality operator, checks whether LayerDescription hierarchies are functionally the same
        :rtype: boolean
        :return: True when layers are the same
        Notes: Instead compare pointers if you wish to check that they are the same instance
        """
        return _pyflamegpu.LayerDescription___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""
        Equality operator, checks whether LayerDescription hierarchies are functionally different
        :rtype: boolean
        :return: True when layers are not the same
        Notes: Instead compare pointers if you wish to check that they are not the same instance
        """
        return _pyflamegpu.LayerDescription___ne__(self, rhs)

    def addAgentFunction(self, *args):
        r"""
        *Overload 1:*

        Adds an agent function to this layer
        The agent function will be called during this stage of model execution
        :type afd: :py:class:`AgentFunctionDescription`
        :param afd: Agent function description to execute during this layer
        :raises: InvalidAgentFunc If the agent function does not exist within the model hierarchy
        :raises: InvalidAgentFunc If the agent function has already been added to the layer
        :raises: InvalidLayerMember If the layer already contains a SubModel
        :raises: InvalidLayerMember If the agent function outputs to a message list output to by an existing agent function of the layer
        :raises: InvalidLayerMember If the agent function outputs an agent in the same agent state as an existing agent function's input state (or vice versa)

        |

        *Overload 2:*

        Adds an agent function to this layer
        The agent function will be called during this stage of model execution
        :type agentName: string
        :param agentName: Name of the agent which owns the function to execute during this layer
        :type functionName: string
        :param functionName: Name of the agent function description to execute during this layer
        :raises: InvalidAgentFunc If the agent function does not exist within the model hierarchy
        :raises: InvalidAgentFunc If the agent function has already been added to the layer
        :raises: InvalidLayerMember If the layer already contains a SubModel
        :raises: InvalidLayerMember If the agent function outputs to a message list output to by an existing agent function of the layer
        :raises: InvalidLayerMember If the agent function outputs an agent in the same agent state as an existing agent function's input state (or vice versa)

        |

        *Overload 3:*

        Adds an agent function to this layer
        The agent function will be called during this stage of model execution
        :type agentName: string
        :param agentName: Name of the agent which owns the function to execute during this layer
        :type functionName: string
        :param functionName: Name of the agent function description to execute during this layer
        :raises: InvalidAgentFunc If the agent function does not exist within the model hierarchy
        :raises: InvalidAgentFunc If the agent function has already been added to the layer
        :raises: InvalidLayerMember If the layer already contains a SubModel
        :raises: InvalidLayerMember If the agent function outputs to a message list output to by an existing agent function of the layer
        :raises: InvalidLayerMember If the agent function outputs an agent in the same agent state as an existing agent function's input state (or vice versa)
        Notes: This version exists because the template overload was preventing implicit cast to std::string
        """
        return _pyflamegpu.LayerDescription_addAgentFunction(self, *args)

    def addSubModel(self, *args):
        r"""
        *Overload 1:*

        Adds a submodel to a layer
        If layer contains a submodel, it may contain nothing else
        :type name: string
        :param name: Name of the submodel (passed to ModelDescription::newSubModel() was called)
        :raises: InvalidLayerMember If the layer already contains any agent functions or host functions
        :raises: InvalidSubModel If the layer already contains a submodel
        See also: addSubModel(const SubModelDescription &)

        |

        *Overload 2:*

        Adds a submodel to a layer
        If layer contains a submodel, it may contain nothing else
        :type submodel: :py:class:`SubModelDescription`
        :param submodel: SubModel description of the layer to be bound
        :raises: InvalidLayerMember If the layer already contains any agent functions or host functions
        :raises: InvalidSubModel If the layer already contains a submodel
        See also: addSubModel(const std::string &)
        """
        return _pyflamegpu.LayerDescription_addSubModel(self, *args)

    def addHostFunctionCallback(self, func_callback):
        r"""
        Adds a host function to this layer, similar to addHostFunction
        however the runnable function is encapsulated within an object which permits cross language support in swig.
        The host function will be called during this stage of model execution
        :type func_callback: :py:class:`HostFunctionCallback`
        :param func_callback: a Host function callback object
        :raises: InvalidHostFunc If the function has already been added to the layer
        """
        return _pyflamegpu.LayerDescription_addHostFunctionCallback(self, func_callback)

    def getName(self):
        r"""
        :rtype: string
        :return: The layer's name
        """
        return _pyflamegpu.LayerDescription_getName(self)

    def getIndex(self):
        r"""
        :rtype: int
        :return: The index of the layer within the model's execution
        """
        return _pyflamegpu.LayerDescription_getIndex(self)

    def getAgentFunctionsCount(self):
        r"""
        :rtype: int
        :return: The total number of agent functions within the layer
        """
        return _pyflamegpu.LayerDescription_getAgentFunctionsCount(self)

    def getHostFunctionsCount(self):
        r"""
        :rtype: int
        :return: The total number of host functions within the layer
        """
        return _pyflamegpu.LayerDescription_getHostFunctionsCount(self)

    def getHostFunctionCallbackCount(self):
        r"""
        :rtype: int
        :return: The total number of host function callbacks within the layer
        """
        return _pyflamegpu.LayerDescription_getHostFunctionCallbackCount(self)

    def getAgentFunction(self, index):
        r"""
        :type index: int
        :param index: Index of the function to return
        :rtype: :py:class:`AgentFunctionDescription`
        :return: An immutable reference to the agent function at the provided index
        :raises: OutOfBoundsException When index exceeds number of agent functions in the layer
        See also: LayerDescription::getAgentFunctionsCount()
        Notes: Functions are stored in a set, so order may change as new functions are added
        """
        return _pyflamegpu.LayerDescription_getAgentFunction(self, index)

    def getHostFunction(self, index):
        r"""
        :type index: int
        :param index: Index of the function to return
        :rtype: FLAMEGPU_HOST_FUNCTION_POINTER
        :return: A function pointer to the host function at the provided index
        :raises: OutOfBoundsException When index exceeds number of host functions in the layer
        See also: LayerDescription::getHostFunctionsCount()
        Notes: Functions are stored in a set, so order may change as new functions are added
        """
        return _pyflamegpu.LayerDescription_getHostFunction(self, index)

    def getHostFunctionCallback(self, index):
        r"""
        :type index: int
        :param index: Index of the function to return
        :rtype: :py:class:`HostFunctionCallback`
        :return: A function callback to the host function at the provided index
        :raises: OutOfBoundsException When index exceeds number of host functions in the layer
        See also: LayerDescription::getHostFunctionCallbackCount()
        Notes: Functions are stored in a set, so order may change as new functions are added
        """
        return _pyflamegpu.LayerDescription_getHostFunctionCallback(self, index)
    __swig_destroy__ = _pyflamegpu.delete_LayerDescription

# Register LayerDescription in _pyflamegpu:
_pyflamegpu.LayerDescription_swigregister(LayerDescription)

class SubModelDescription(object):
    r"""This class provides an interface to a mapping between the parent and sub-model"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def bindAgent(self, sub_agent_name, master_agent_name, auto_map_vars=False, auto_map_states=True):
        r"""
        Defines which agent from the parent/master model will be mapped to which agent in the submodel
        Only 1 master agent can be bound to each sub agent, however the same master agent can be bound to many sub agents
        Binding an agent to a subagent, ensures the population of subagents is always the same size.
        Furthermore, agent variables can be mapped so that they are shared between the two agents.
        Returns SubAgentDescription which can be used to manually map variables
        If auto_map_vars is enabled, variables with matching name, type and length will be automatically mapped
        :type sub_agent_name: string
        :param sub_agent_name: Name of the agent in the submodel (must be unique, 1 bind per subagent)
        :type master_agent_name: string
        :param master_agent_name: Name of the agent in the parent/host/master model
        :type auto_map_vars: boolean, optional
        :param auto_map_vars: Whether to automatically map matching variables of the two agents
        :type auto_map_states: boolean, optional
        :param auto_map_states: Whether to automatically map matching states of the two agents
        :raises: InvalidSubAgentName If the sub agent name does not map to a valid agent
        :raises: InvalidAgentName If the  master agent has already been bound
        :raises: InvalidSubAgentName If the sub agent name does not map to a valid agent
        :raises: InvalidAgentName If the master agent has already been bound
        """
        return _pyflamegpu.SubModelDescription_bindAgent(self, sub_agent_name, master_agent_name, auto_map_vars, auto_map_states)

    def SubAgent(self, sub_agent_name):
        r"""
        Returns a mutable reference to the named SubAgent description if it has already been bound to a master agent
        :type sub_agent_name: string
        :param sub_agent_name: Name of the sub agent, who's description to return
        :rtype: :py:class:`SubAgentDescription`
        :return: A mutable reference to the named SubAgent description
        :raises: InvalidSubAgentName If the sub_agent_name does not exist within the sub_model and/or has not been bound yet
        See also: SubModelDescription::getSubAgent(const std::string &) for the immutable version
        """
        return _pyflamegpu.SubModelDescription_SubAgent(self, sub_agent_name)

    def getSubAgent(self, sub_agent_name):
        r"""
        Returns an immutable reference to the named SubAgent description if it has already been bound to a master agent
        :type sub_agent_name: string
        :param sub_agent_name: Name of the sub agent, who's description to return
        :rtype: :py:class:`SubAgentDescription`
        :return: An immutable reference to the named SubAgent description
        :raises: InvalidSubAgentName If the sub_agent_name does not exist within the sub_model and/or has not been bound yet
        See also: SubModelDescription::SubAgent(const std::string &) for the mutable version
        """
        return _pyflamegpu.SubModelDescription_getSubAgent(self, sub_agent_name)

    def SubEnvironment(self, auto_map_props=False):
        return _pyflamegpu.SubModelDescription_SubEnvironment(self, auto_map_props)

    def getSubEnvironment(self, auto_map_props=False):
        return _pyflamegpu.SubModelDescription_getSubEnvironment(self, auto_map_props)

    def setMaxSteps(self, max_steps):
        r"""
        Set the maximum number of steps per execution of the submodel
        If 0 (default), unlimited however an exit condition is required
        """
        return _pyflamegpu.SubModelDescription_setMaxSteps(self, max_steps)

    def getMaxSteps(self):
        r"""
        Return the current value of max steps, defaults to 0
        This is the maximum number of steps per call of the submodel
        0 is unlimited, however requires the model to have an exit condition
        """
        return _pyflamegpu.SubModelDescription_getMaxSteps(self)
    __swig_destroy__ = _pyflamegpu.delete_SubModelDescription

# Register SubModelDescription in _pyflamegpu:
_pyflamegpu.SubModelDescription_swigregister(SubModelDescription)

class SubAgentDescription(object):
    r"""This class provides an interface to a mapping between a parent and submodel agent"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def mapState(self, sub_state_name, master_state_name):
        r"""
        Links the named states between the master and sub agent
        :type sub_state_name: string
        :param sub_state_name: Name of the state in the sub models agent
        :type master_state_name: string
        :param master_state_name: Name of the state in the master models agent
        :raises: InvalidParent If the sub agent or master agent weak_ptrs have expired (this should never happen)
        :raises: InvalidAgentState If the named state does not exist within the bound sub or master agent
        """
        return _pyflamegpu.SubAgentDescription_mapState(self, sub_state_name, master_state_name)

    def mapVariable(self, sub_variable_name, master_variable_name):
        r"""
        Links the named variables between the master and sub agent
        These variables must have the same type and number of elements (1 unless they're an array variable)
        :type sub_variable_name: string
        :param sub_variable_name: Name of the variable in the sub models agent
        :type master_variable_name: string
        :param master_variable_name: Name of the variable in the master models agent
        :raises: InvalidParent If the sub agent or master agent weak_ptrs have expired (this should never happen)
        :raises: InvalidAgentVar If the named variable does not exist within the bound sub or master agent
        :raises: InvalidAgentVar If there is a mismatch between the variables types or number of elements
        """
        return _pyflamegpu.SubAgentDescription_mapVariable(self, sub_variable_name, master_variable_name)

    def getStateMapping(self, sub_state_name):
        r"""
        Returns the master agent state which has been mapped to the name subagent state
        :type sub_state_name: string
        :param sub_state_name: Name of the state in the sub agent to check
        :rtype: string
        :return: The name of the state within the master agent which is mapped
        :raises: InvalidAgentState If the sub agent state does not exist or has not been mapped yet
        """
        return _pyflamegpu.SubAgentDescription_getStateMapping(self, sub_state_name)

    def getVariableMapping(self, sub_variable_name):
        r"""
        Returns the master agent variable which has been mapped to the name subagent variable
        :type sub_variable_name: string
        :param sub_variable_name: Name of the variable in the sub agent to check
        :rtype: string
        :return: The name of the variable within the master agent which is mapped
        :raises: InvalidAgentVar If the sub agent variable does not exist or has not been mapped yet
        """
        return _pyflamegpu.SubAgentDescription_getVariableMapping(self, sub_variable_name)
    __swig_destroy__ = _pyflamegpu.delete_SubAgentDescription

# Register SubAgentDescription in _pyflamegpu:
_pyflamegpu.SubAgentDescription_swigregister(SubAgentDescription)

class SubEnvironmentDescription(object):
    r"""This class provides an interface to a mapping between a parent and submodel's environment properties"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def autoMapProperties(self):
        r"""
        Automatically map all compatible properties
        In order to be compatible, properties must share the same name, type, length (number of elements)
        Const master properties cannot be mapped to non-const sub properties, however the inverse is permitted
        """
        return _pyflamegpu.SubEnvironmentDescription_autoMapProperties(self)

    def mapProperty(self, sub_property_name, master_property_name):
        r"""
        Links the named properties between the master and sub environment
        In order to be compatible, properties must share the same name, type, length (number of elements)
        Const master properties cannot be mapped to non-const sub properties, however the inverse is permitted
        :type sub_property_name: string
        :param sub_property_name: Name of the property in the sub models agent
        :type master_property_name: string
        :param master_property_name: Name of the property in the master models agent
        :raises: InvalidParent If the sub agent or master agent weak_ptrs have expired (this should never happen)
        :raises: InvalidEnvProperty If the named property does not exist within the bound sub or master environment
        :raises: InvalidEnvProperty If the named properties do not share the same type and length
        """
        return _pyflamegpu.SubEnvironmentDescription_mapProperty(self, sub_property_name, master_property_name)

    def getPropertyMapping(self, sub_property_name):
        r"""
        Returns the master agent property which has been mapped to the name subagent state
        :type sub_property_name: string
        :param sub_property_name: Name of the state in the sub agent to check
        :rtype: string
        :return: The name of the state within the master agent which is mapped
        :raises: InvalidEnvProperty If the sub environment property does not exist or has not been mapped yet
        """
        return _pyflamegpu.SubEnvironmentDescription_getPropertyMapping(self, sub_property_name)
    __swig_destroy__ = _pyflamegpu.delete_SubEnvironmentDescription

# Register SubEnvironmentDescription in _pyflamegpu:
_pyflamegpu.SubEnvironmentDescription_swigregister(SubEnvironmentDescription)

class AgentVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Constructs the container with count copies of the agent described by agent_desc
        initialised with the default values specified by agent_desc.
        :type agent_desc: :py:class:`AgentDescription`
        :param agent_desc: agent_desc Agent description specifying the agent variables to be represented
        :type count: int, optional
        :param count: The size of the container

        |

        *Overload 2:*

        Copy constructor.
        Constructs the container with the copy of the contents of other
        :type other: :py:class:`AgentVector`
        :param other: another container to be used as source to initialize the elements of the container with

        |

        *Overload 3:*

        Move constructor
        Constructs the container with the contents of other using move semantics.
        other is left in an empty but functional state.
        :type other: :py:class:`AgentVector`
        :param other: another container to be used as source to initialize the elements of the container with
        """
        _pyflamegpu.AgentVector_swiginit(self, _pyflamegpu.new_AgentVector(*args))

    def at(self, *args):
        return _pyflamegpu.AgentVector_at(self, *args)

    def front(self, *args):
        return _pyflamegpu.AgentVector_front(self, *args)

    def back(self, *args):
        return _pyflamegpu.AgentVector_back(self, *args)

    def empty(self):
        r"""
        Checks if the container has no elements, i.e. whether begin() == end()
        :rtype: boolean
        :return: `true` if the container is empty, `false` otherwise
        """
        return _pyflamegpu.AgentVector_empty(self)

    def size(self):
        r"""
        Returns the number of elements in the container, i.e. std::distance(begin(), end())
        :rtype: int
        :return: The number of elements in the container.
        """
        return _pyflamegpu.AgentVector_size(self)

    @staticmethod
    def max_size():
        r"""
        Returns the maximum number of elements the container is able to hold due to system or library implementation limitations,
        i.e. std::distance(begin(), end()) for the largest container.
        :rtype: int
        :return: Maximum number of elements.
        Notes: This value typically reflects the theoretical limit on the size of the container, at most `std::numeric_limits<difference_type>::max()`.
        At runtime, the size of the container may be limited to a value smaller than max_size() by the amount of RAM available.
        """
        return _pyflamegpu.AgentVector_max_size()

    def reserve(self, new_cap):
        r"""
        Increase the capacity of the vector to a value that's greater or equal to new_cap. If new_cap is greater than the current capacity(),
        new storage is allocated, otherwise the method does nothing.

        reserve() does not change the size of the vector.

        If new_cap is greater than capacity(), all iterators, including the past-the-end iterator, and all AgentViews are invalidated.
        Otherwise, no iterators or references are invalidated.
        :type new_cap: int
        :param new_cap: new capacity of the vector
        :raises: std::length_error if new_cap > max_size().
        """
        return _pyflamegpu.AgentVector_reserve(self, new_cap)

    def capacity(self):
        r"""
        Returns the number of elements that the container has currently allocated space for.

        :rtype: int
        :return: Capacity of the currently allocated storage.
        """
        return _pyflamegpu.AgentVector_capacity(self)

    def shrink_to_fit(self):
        r"""
        Requests the removal of unused capacity.

        If reallocation occurs, all iterators, including the past the end iterator, and all references to the elements are invalidated.
        If no reallocation takes place, no iterators or references are invalidated.
        """
        return _pyflamegpu.AgentVector_shrink_to_fit(self)

    def clear(self):
        r"""
        Erases all elements from the container. After this call, size() returns zero.

        Invalidates any references, pointers, or iterators referring to contained elements. Any past-the-end iterators are also invalidated.

        Leaves the capacity() of the vector unchanged
        """
        return _pyflamegpu.AgentVector_clear(self)

    def insert(self, *args):
        return _pyflamegpu.AgentVector_insert(self, *args)

    def erase(self, *args):
        return _pyflamegpu.AgentVector_erase(self, *args)

    def push_back(self, *args):
        r"""
        *Overload 1:*

        Appends the given element value to the end of the container.
        The new element is initialized as a copy of value

        If the new size() is greater than capacity() then all iterators and references (including the past-the-end iterator) are invalidated.
        Otherwise only the past-the-end iterator is invalidated.

        :type value: :py:class:`AgentInstance`
        :param value:	the value of the element to append

        :raises: InvalidAgent If the agent type of the AgentInstance doesn't match the agent type of the AgentVector

        |

        *Overload 2:*

        Appends a default initialised element to the end of the container
        """
        return _pyflamegpu.AgentVector_push_back(self, *args)

    def pop_back(self):
        r"""
        Removes the last element of the container.
        Calling pop_back on an empty container results in undefined behavior.
        Iterators and references to the last element, as well as the end() iterator, are invalidated.
        """
        return _pyflamegpu.AgentVector_pop_back(self)

    def resize(self, count):
        r"""
        Resizes the container to contain count elements.

        If the current size is greater than count, the container is reduced to its first count elements.

        If the current size is less than count, additional default agents are appended
        :type count: int
        :param count: size of the container
        """
        return _pyflamegpu.AgentVector_resize(self, count)

    def swap(self, other):
        r"""
        Exchanges the contents of the container with those of other. Does not invoke any move, copy, or swap operations on individual elements.
        All iterators and references remain valid. The past-the-end iterator is invalidated.
        """
        return _pyflamegpu.AgentVector_swap(self, other)

    def __eq__(self, other):
        r"""
        Checks if the contents of lhs and rhs are equal,
        that is, they have the same number of elements and each element in lhs compares equal with the element in rhs at the same position.
        """
        return _pyflamegpu.AgentVector___eq__(self, other)

    def __ne__(self, other):
        return _pyflamegpu.AgentVector___ne__(self, other)

    def getAgentName(self):
        r"""Returns the agent name from the internal agent description"""
        return _pyflamegpu.AgentVector_getAgentName(self)

    def matchesAgentType(self, *args):
        return _pyflamegpu.AgentVector_matchesAgentType(self, *args)

    def getInitialState(self):
        r"""Returns the initial state of the internal agent description"""
        return _pyflamegpu.AgentVector_getInitialState(self)

    def __iter__(self):
        return FLAMEGPUIterator(self)
    def __len__(self):
        return self.size()


    def __getitem__(self, index):
        return _pyflamegpu.AgentVector___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyflamegpu.AgentVector___setitem__(self, index, value)
    __swig_destroy__ = _pyflamegpu.delete_AgentVector

# Register AgentVector in _pyflamegpu:
_pyflamegpu.AgentVector_swigregister(AgentVector)

def AgentVector_max_size():
    r"""
    Returns the maximum number of elements the container is able to hold due to system or library implementation limitations,
    i.e. std::distance(begin(), end()) for the largest container.
    :rtype: int
    :return: Maximum number of elements.
    Notes: This value typically reflects the theoretical limit on the size of the container, at most `std::numeric_limits<difference_type>::max()`.
    At runtime, the size of the container may be limited to a value smaller than max_size() by the amount of RAM available.
    """
    return _pyflamegpu.AgentVector_max_size()

class AgentVector_CAgent(object):
    r"""const view into AgentVector"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyflamegpu.delete_AgentVector_CAgent

    def getVariableFloat(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableFloat(self, *args)

    def getVariableDouble(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableDouble(self, *args)

    def getVariableInt16(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableInt16(self, *args)

    def getVariableInt32(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableInt32(self, *args)

    def getVariableInt64(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableInt64(self, *args)

    def getVariableUInt16(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableUInt16(self, *args)

    def getVariableUInt32(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableUInt32(self, *args)

    def getVariableUInt64(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableUInt64(self, *args)

    def getVariableInt(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableInt(self, *args)

    def getVariableUInt(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableUInt(self, *args)

    def getVariableInt8(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableInt8(self, *args)

    def getVariableUInt8(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableUInt8(self, *args)

    def getVariableChar(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableChar(self, *args)

    def getVariableUChar(self, *args):
        return _pyflamegpu.AgentVector_CAgent_getVariableUChar(self, *args)

    def getVariableArrayFloat(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayFloat(self, variable_name)

    def getVariableArrayDouble(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayDouble(self, variable_name)

    def getVariableArrayInt16(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayInt16(self, variable_name)

    def getVariableArrayInt32(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayInt32(self, variable_name)

    def getVariableArrayInt64(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayInt64(self, variable_name)

    def getVariableArrayUInt16(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayUInt16(self, variable_name)

    def getVariableArrayUInt32(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayUInt32(self, variable_name)

    def getVariableArrayUInt64(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayUInt64(self, variable_name)

    def getVariableArrayInt(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayInt(self, variable_name)

    def getVariableArrayUInt(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayUInt(self, variable_name)

    def getVariableArrayInt8(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayInt8(self, variable_name)

    def getVariableArrayUInt8(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayUInt8(self, variable_name)

    def getVariableArrayChar(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayChar(self, variable_name)

    def getVariableArrayUChar(self, variable_name):
        return _pyflamegpu.AgentVector_CAgent_getVariableArrayUChar(self, variable_name)

# Register AgentVector_CAgent in _pyflamegpu:
_pyflamegpu.AgentVector_CAgent_swigregister(AgentVector_CAgent)

class AgentVector_Agent(AgentVector_CAgent):
    r"""non-const view into AgentVector"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setData(self, other):
        return _pyflamegpu.AgentVector_Agent_setData(self, other)

    def setVariableFloat(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableFloat(self, *args)

    def setVariableDouble(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableDouble(self, *args)

    def setVariableInt16(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableInt16(self, *args)

    def setVariableInt32(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableInt32(self, *args)

    def setVariableInt64(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableInt64(self, *args)

    def setVariableUInt16(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableUInt16(self, *args)

    def setVariableUInt32(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableUInt32(self, *args)

    def setVariableUInt64(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableUInt64(self, *args)

    def setVariableInt(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableInt(self, *args)

    def setVariableUInt(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableUInt(self, *args)

    def setVariableInt8(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableInt8(self, *args)

    def setVariableUInt8(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableUInt8(self, *args)

    def setVariableChar(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableChar(self, *args)

    def setVariableUChar(self, *args):
        return _pyflamegpu.AgentVector_Agent_setVariableUChar(self, *args)

    def setVariableArrayFloat(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayFloat(self, variable_name, value)

    def setVariableArrayDouble(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayDouble(self, variable_name, value)

    def setVariableArrayInt16(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayInt16(self, variable_name, value)

    def setVariableArrayInt32(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayInt32(self, variable_name, value)

    def setVariableArrayInt64(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayInt64(self, variable_name, value)

    def setVariableArrayUInt16(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayUInt16(self, variable_name, value)

    def setVariableArrayUInt32(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayUInt32(self, variable_name, value)

    def setVariableArrayUInt64(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayUInt64(self, variable_name, value)

    def setVariableArrayInt(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayInt(self, variable_name, value)

    def setVariableArrayUInt(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayUInt(self, variable_name, value)

    def setVariableArrayInt8(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayInt8(self, variable_name, value)

    def setVariableArrayUInt8(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayUInt8(self, variable_name, value)

    def setVariableArrayChar(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayChar(self, variable_name, value)

    def setVariableArrayUChar(self, variable_name, value):
        return _pyflamegpu.AgentVector_Agent_setVariableArrayUChar(self, variable_name, value)
    __swig_destroy__ = _pyflamegpu.delete_AgentVector_Agent

# Register AgentVector_Agent in _pyflamegpu:
_pyflamegpu.AgentVector_Agent_swigregister(AgentVector_Agent)

class AgentInstance(object):
    r"""
    This class represents standalone copy of a single agent
    It stores all the data internally, unlike an AgentVector::Agent
    Notes: Not 100% on the name, might change
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Initialises the agent variables with their default values

        |

        *Overload 2:*

        Copy constructors

        |

        *Overload 3:*

        Move constructor
        """
        _pyflamegpu.AgentInstance_swiginit(self, _pyflamegpu.new_AgentInstance(*args))

    def setVariableFloat(self, *args):
        return _pyflamegpu.AgentInstance_setVariableFloat(self, *args)

    def setVariableDouble(self, *args):
        return _pyflamegpu.AgentInstance_setVariableDouble(self, *args)

    def setVariableInt16(self, *args):
        return _pyflamegpu.AgentInstance_setVariableInt16(self, *args)

    def setVariableInt32(self, *args):
        return _pyflamegpu.AgentInstance_setVariableInt32(self, *args)

    def setVariableInt64(self, *args):
        return _pyflamegpu.AgentInstance_setVariableInt64(self, *args)

    def setVariableUInt16(self, *args):
        return _pyflamegpu.AgentInstance_setVariableUInt16(self, *args)

    def setVariableUInt32(self, *args):
        return _pyflamegpu.AgentInstance_setVariableUInt32(self, *args)

    def setVariableUInt64(self, *args):
        return _pyflamegpu.AgentInstance_setVariableUInt64(self, *args)

    def setVariableInt(self, *args):
        return _pyflamegpu.AgentInstance_setVariableInt(self, *args)

    def setVariableUInt(self, *args):
        return _pyflamegpu.AgentInstance_setVariableUInt(self, *args)

    def setVariableInt8(self, *args):
        return _pyflamegpu.AgentInstance_setVariableInt8(self, *args)

    def setVariableUInt8(self, *args):
        return _pyflamegpu.AgentInstance_setVariableUInt8(self, *args)

    def setVariableChar(self, *args):
        return _pyflamegpu.AgentInstance_setVariableChar(self, *args)

    def setVariableUChar(self, *args):
        return _pyflamegpu.AgentInstance_setVariableUChar(self, *args)

    def setVariableArrayFloat(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayFloat(self, variable_name, value)

    def setVariableArrayDouble(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayDouble(self, variable_name, value)

    def setVariableArrayInt16(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayInt16(self, variable_name, value)

    def setVariableArrayInt32(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayInt32(self, variable_name, value)

    def setVariableArrayInt64(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayInt64(self, variable_name, value)

    def setVariableArrayUInt16(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayUInt16(self, variable_name, value)

    def setVariableArrayUInt32(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayUInt32(self, variable_name, value)

    def setVariableArrayUInt64(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayUInt64(self, variable_name, value)

    def setVariableArrayInt(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayInt(self, variable_name, value)

    def setVariableArrayUInt(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayUInt(self, variable_name, value)

    def setVariableArrayInt8(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayInt8(self, variable_name, value)

    def setVariableArrayUInt8(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayUInt8(self, variable_name, value)

    def setVariableArrayChar(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayChar(self, variable_name, value)

    def setVariableArrayUChar(self, variable_name, value):
        return _pyflamegpu.AgentInstance_setVariableArrayUChar(self, variable_name, value)

    def getVariableFloat(self, *args):
        return _pyflamegpu.AgentInstance_getVariableFloat(self, *args)

    def getVariableDouble(self, *args):
        return _pyflamegpu.AgentInstance_getVariableDouble(self, *args)

    def getVariableInt16(self, *args):
        return _pyflamegpu.AgentInstance_getVariableInt16(self, *args)

    def getVariableInt32(self, *args):
        return _pyflamegpu.AgentInstance_getVariableInt32(self, *args)

    def getVariableInt64(self, *args):
        return _pyflamegpu.AgentInstance_getVariableInt64(self, *args)

    def getVariableUInt16(self, *args):
        return _pyflamegpu.AgentInstance_getVariableUInt16(self, *args)

    def getVariableUInt32(self, *args):
        return _pyflamegpu.AgentInstance_getVariableUInt32(self, *args)

    def getVariableUInt64(self, *args):
        return _pyflamegpu.AgentInstance_getVariableUInt64(self, *args)

    def getVariableInt(self, *args):
        return _pyflamegpu.AgentInstance_getVariableInt(self, *args)

    def getVariableUInt(self, *args):
        return _pyflamegpu.AgentInstance_getVariableUInt(self, *args)

    def getVariableInt8(self, *args):
        return _pyflamegpu.AgentInstance_getVariableInt8(self, *args)

    def getVariableUInt8(self, *args):
        return _pyflamegpu.AgentInstance_getVariableUInt8(self, *args)

    def getVariableChar(self, *args):
        return _pyflamegpu.AgentInstance_getVariableChar(self, *args)

    def getVariableUChar(self, *args):
        return _pyflamegpu.AgentInstance_getVariableUChar(self, *args)

    def getVariableArrayFloat(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayFloat(self, variable_name)

    def getVariableArrayDouble(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayDouble(self, variable_name)

    def getVariableArrayInt16(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayInt16(self, variable_name)

    def getVariableArrayInt32(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayInt32(self, variable_name)

    def getVariableArrayInt64(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayInt64(self, variable_name)

    def getVariableArrayUInt16(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayUInt16(self, variable_name)

    def getVariableArrayUInt32(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayUInt32(self, variable_name)

    def getVariableArrayUInt64(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayUInt64(self, variable_name)

    def getVariableArrayInt(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayInt(self, variable_name)

    def getVariableArrayUInt(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayUInt(self, variable_name)

    def getVariableArrayInt8(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayInt8(self, variable_name)

    def getVariableArrayUInt8(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayUInt8(self, variable_name)

    def getVariableArrayChar(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayChar(self, variable_name)

    def getVariableArrayUChar(self, variable_name):
        return _pyflamegpu.AgentInstance_getVariableArrayUChar(self, variable_name)
    __swig_destroy__ = _pyflamegpu.delete_AgentInstance

# Register AgentInstance in _pyflamegpu:
_pyflamegpu.AgentInstance_swigregister(AgentInstance)

class Simulation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyflamegpu.delete_Simulation

    def initialise(self, argc):
        return _pyflamegpu.Simulation_initialise(self, argc)

    def initFunctions(self):
        return _pyflamegpu.Simulation_initFunctions(self)

    def step(self):
        return _pyflamegpu.Simulation_step(self)

    def exitFunctions(self):
        return _pyflamegpu.Simulation_exitFunctions(self)

    def simulate(self):
        return _pyflamegpu.Simulation_simulate(self)

    def reset(self):
        r"""
        Returns the simulation to a clean state
        This clears all agents and message lists, resets environment properties and reseeds random generation.
        Also calls resetStepCounter();
        Notes: If triggered on a submodel, agent states and environment properties mapped to a parent agent, and random generation are not affected.
        If random was manually seeded, it will return to it's original state. If random was seeded from time, it will return to a new random state.
        """
        return _pyflamegpu.Simulation_reset(self)

    def getStepCounter(self):
        return _pyflamegpu.Simulation_getStepCounter(self)

    def resetStepCounter(self):
        return _pyflamegpu.Simulation_resetStepCounter(self)

    def getModelDescription(self):
        return _pyflamegpu.Simulation_getModelDescription(self)

    def exportData(self, path, prettyPrint=True):
        r"""
        Export model state to file
        Export includes config structures, environment and agent data
        :type path: string
        :param path: The file to output (must end '.json' or '.xml')
        :type prettyPrint: boolean, optional
        :param prettyPrint: Whether to include indentation and line breaks to aide human reading
        Notes: XML export does not currently includes config structures, only the same data present in FLAMEGPU1
        """
        return _pyflamegpu.Simulation_exportData(self, path, prettyPrint)

    def exportLog(self, path, steps, exit, prettyPrint=True):
        r"""
        Export the data logged by the last call to simulate() (and/or step) to the given path
        :type path: string
        :param path: The file to output (must end '.json' or '.xml')
        :type steps: boolean
        :param steps: Whether the step log should be included in the log file
        :type exit: boolean
        :param exit: Whether the exit log should be included in the log file
        :type prettyPrint: boolean, optional
        :param prettyPrint: Whether the log file should be minified or not
        Notes: The config (possibly just random seed) is always output
        """
        return _pyflamegpu.Simulation_exportLog(self, path, steps, exit, prettyPrint)

    def setPopulationData(self, *args):
        return _pyflamegpu.Simulation_setPopulationData(self, *args)

    def getPopulationData(self, *args):
        return _pyflamegpu.Simulation_getPopulationData(self, *args)

    def getRunLog(self):
        return _pyflamegpu.Simulation_getRunLog(self)

    def getAgent(self, name):
        return _pyflamegpu.Simulation_getAgent(self, name)

    def SimulationConfig(self):
        return _pyflamegpu.Simulation_SimulationConfig(self)

    def getSimulationConfig(self):
        return _pyflamegpu.Simulation_getSimulationConfig(self)

    def applyConfig(self):
        return _pyflamegpu.Simulation_applyConfig(self)

# Register Simulation in _pyflamegpu:
_pyflamegpu.Simulation_swigregister(Simulation)

class Simulation_Config(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.Simulation_Config_swiginit(self, _pyflamegpu.new_Simulation_Config())
    input_file = property(_pyflamegpu.Simulation_Config_input_file_get, _pyflamegpu.Simulation_Config_input_file_set)
    step_log_file = property(_pyflamegpu.Simulation_Config_step_log_file_get, _pyflamegpu.Simulation_Config_step_log_file_set)
    exit_log_file = property(_pyflamegpu.Simulation_Config_exit_log_file_get, _pyflamegpu.Simulation_Config_exit_log_file_set)
    common_log_file = property(_pyflamegpu.Simulation_Config_common_log_file_get, _pyflamegpu.Simulation_Config_common_log_file_set)
    truncate_log_files = property(_pyflamegpu.Simulation_Config_truncate_log_files_get, _pyflamegpu.Simulation_Config_truncate_log_files_set)
    random_seed = property(_pyflamegpu.Simulation_Config_random_seed_get, _pyflamegpu.Simulation_Config_random_seed_set)
    steps = property(_pyflamegpu.Simulation_Config_steps_get, _pyflamegpu.Simulation_Config_steps_set)
    verbose = property(_pyflamegpu.Simulation_Config_verbose_get, _pyflamegpu.Simulation_Config_verbose_set)
    timing = property(_pyflamegpu.Simulation_Config_timing_get, _pyflamegpu.Simulation_Config_timing_set)
    console_mode = property(_pyflamegpu.Simulation_Config_console_mode_get, _pyflamegpu.Simulation_Config_console_mode_set)
    __swig_destroy__ = _pyflamegpu.delete_Simulation_Config

# Register Simulation_Config in _pyflamegpu:
_pyflamegpu.Simulation_Config_swigregister(Simulation_Config)

class CUDASimulation(Simulation):
    r"""
    CUDA runner for Simulation interface
    Executes a FGPU2 model using GPU
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, argc=0):
        r"""
        Initialise cuda runner
        Allocates memory for agents/messages, copies environment properties to device etc
        If provided, you can pass runtime arguments to this constructor, to automatically call inititialise()
        This is not required, you can call inititialise() manually later, or not at all.
        :type model: :py:class:`ModelDescription`
        :param model: The model description to initialise the runner to execute
        :type argc: int, optional
        :param argc: Runtime argument count
        :type argv: string, optional
        :param argv: Runtime argument list ptr
        """
        _pyflamegpu.CUDASimulation_swiginit(self, _pyflamegpu.new_CUDASimulation(model, argc))
    __swig_destroy__ = _pyflamegpu.delete_CUDASimulation

    def initFunctions(self):
        r"""Run the initFunctions of Simulation"""
        return _pyflamegpu.CUDASimulation_initFunctions(self)

    def step(self):
        r"""
        Steps the simulation once
        :rtype: boolean
        :return: False if an exit condition was triggered
        """
        return _pyflamegpu.CUDASimulation_step(self)

    def exitFunctions(self):
        r"""
        Run the exitFunctions of the Simulation..
        :rtype: void
        :return: False if an exit condition was triggered
        """
        return _pyflamegpu.CUDASimulation_exitFunctions(self)

    def simulate(self):
        r"""
        Execute the simulation until config.steps have been executed, or an exit condition trips
        Includes init and exit functions calls.
        """
        return _pyflamegpu.CUDASimulation_simulate(self)

    def setPopulationData(self, *args):
        r"""
        Replaces internal population data for the specified agent
        :type population: :py:class:`AgentVector`
        :param population: The agent type and data to replace agents with
        :type state_name: string, optional
        :param state_name: The agent state to add the agents to
        :raises: InvalidCudaAgent If the agent type is not recognised
        """
        return _pyflamegpu.CUDASimulation_setPopulationData(self, *args)

    def getPopulationData(self, *args):
        r"""
        Returns the internal population data for the specified agent
        :type population: :py:class:`AgentVector`
        :param population: The agent type and data to fetch
        :type state_name: string, optional
        :param state_name: The agent state to get the agents from
        :raises: InvalidCudaAgent If the agent type is not recognised
        """
        return _pyflamegpu.CUDASimulation_getPopulationData(self, *args)

    def getCUDAAgent(self, agent_name):
        r"""
        Returns the manager for the specified agent
        TODO: remove? this is mostly internal methods that modeller doesn't need access to
        """
        return _pyflamegpu.CUDASimulation_getCUDAAgent(self, agent_name)

    def getAgent(self, name):
        return _pyflamegpu.CUDASimulation_getAgent(self, name)

    def getCUDAMessage(self, message_name):
        r"""
        Returns the manager for the specified agent
        TODO: remove? this is mostly internal methods that modeller doesn't need access to
        """
        return _pyflamegpu.CUDASimulation_getCUDAMessage(self, message_name)

    def CUDAConfig(self):
        r"""
        :rtype: :py:class:`Config`
        :return: A mutable reference to the cuda model specific configuration struct
        See also: Simulation::applyConfig() Should be called afterwards to apply changes
        """
        return _pyflamegpu.CUDASimulation_CUDAConfig(self)

    def getStepCounter(self):
        r"""Returns the number of times step() has been called since the simulation was last reset/init"""
        return _pyflamegpu.CUDASimulation_getStepCounter(self)

    def resetStepCounter(self):
        r"""Manually resets the step counter"""
        return _pyflamegpu.CUDASimulation_resetStepCounter(self)

    def getCUDAConfig(self):
        r"""
        :rtype: :py:class:`Config`
        :return: An immutable reference to the cuda model specific configuration struct
        """
        return _pyflamegpu.CUDASimulation_getCUDAConfig(self)

    def setStepLog(self, stepConfig):
        r"""
        Configure which step data should be logged
        :type stepConfig: :py:class:`StepLoggingConfig`
        :param stepConfig: The step logging config for the CUDASimulation
        Notes: This must be for the same model description hierarchy as the CUDASimulation
        """
        return _pyflamegpu.CUDASimulation_setStepLog(self, stepConfig)

    def setExitLog(self, exitConfig):
        r"""
        Configure which exit data should be logged
        :type exitConfig: :py:class:`LoggingConfig`
        :param exitConfig: The logging config for the CUDASimulation
        Notes: This must be for the same model description hierarchy as the CUDASimulation
        """
        return _pyflamegpu.CUDASimulation_setExitLog(self, exitConfig)

    def getRunLog(self):
        r"""Returns a reference to the current exit log"""
        return _pyflamegpu.CUDASimulation_getRunLog(self)

    def getVisualisation(self):
        r"""Creates (on first call) and returns the visualisation configuration options for this model instance"""
        return _pyflamegpu.CUDASimulation_getVisualisation(self)

    def RTCSafeCudaMemcpyToSymbol(self, symbol, rtc_symbol_name, src, count, offset=0):
        r"""
        Performs a cudaMemCopyToSymbol in the runtime library and also updates the symbols of any RTC functions (which exist separately within their own cuda module)
        Will thrown an error if any of the calls fail.
        :type symbol: void
        :param symbol: A device symbol
        :type rtc_symbol_name: string
        :param rtc_symbol_name: The name of the symbol
        :type src: void
        :param src: Source memory address
        :type count: int
        :param count: Size in bytes to copy
        :type offset: int, optional
        :param offset: Offset from start of symbol in bytes
        """
        return _pyflamegpu.CUDASimulation_RTCSafeCudaMemcpyToSymbol(self, symbol, rtc_symbol_name, src, count, offset)

    def RTCSafeCudaMemcpyToSymbolAddress(self, ptr, rtc_symbol_name, src, count, offset=0):
        r"""
        Performs a cudaMemCopy to a pointer in the runtime library and also updates the symbols of any RTC functions (which exist separately within their own cuda module)
        Will thrown an error if any of the calls fail.
        :type ptr: void
        :param ptr: a pointer to a symbol in device memory
        :type rtc_symbol_name: string
        :param rtc_symbol_name: The name of the symbol
        :type src: void
        :param src: Source memory address
        :type count: int
        :param count: Size in bytes to copy
        :type offset: int, optional
        :param offset: Offset from start of symbol in bytes
        """
        return _pyflamegpu.CUDASimulation_RTCSafeCudaMemcpyToSymbolAddress(self, ptr, rtc_symbol_name, src, count, offset)

    def getElapsedTimeRTCInitialisation(self):
        r"""
        Get the duration of the last time RTC was iniitliased
        With a resolution of around 0.5 microseconds (cudaEventElapsedtime)
        :rtype: float
        :return: elapsed time of last simulation call in milliseconds.
        """
        return _pyflamegpu.CUDASimulation_getElapsedTimeRTCInitialisation(self)

    def getElapsedTimeSimulation(self):
        r"""
        Get the duration of the last call to simulate() in milliseconds.
        With a resolution of around 0.5 microseconds (cudaEventElapsedtime)
        :rtype: float
        :return: elapsed time of last simulation call in milliseconds.
        """
        return _pyflamegpu.CUDASimulation_getElapsedTimeSimulation(self)

    def getElapsedTimeInitFunctions(self):
        r"""
        Get the duration of the last call to initFunctions() in milliseconds.
        With a resolution of around 0.5 microseconds (cudaEventElapsedtime)
        :rtype: float
        :return: elapsed time of last simulation call in milliseconds.
        """
        return _pyflamegpu.CUDASimulation_getElapsedTimeInitFunctions(self)

    def getElapsedTimeExitFunctions(self):
        r"""
        Get the duration of the last call to stepFunctions() in milliseconds.
        With a resolution of around 0.5 microseconds (cudaEventElapsedtime)
        :rtype: float
        :return: elapsed time of last simulation call in milliseconds.
        """
        return _pyflamegpu.CUDASimulation_getElapsedTimeExitFunctions(self)

    def getElapsedTimeSteps(self):
        r"""
        Get the duration of each step() since the last call to `reset`
        Timing resolution of around 0.5 microseconds (CudaEventElapsedTime)
        :rtype: std::vector< float,std::allocator< float > >
        :return: vector of step times
        """
        return _pyflamegpu.CUDASimulation_getElapsedTimeSteps(self)

    def getElapsedTimeStep(self, step):
        r"""
        Get the duration of an individual step in milliseconds.
        Timing resolution of around 0.5 microseconds.
        :type step: int
        :param step: Index of step, must be less than the number of steps executed.
        :rtype: float
        :return: elapsed time of required step in milliseconds
        """
        return _pyflamegpu.CUDASimulation_getElapsedTimeStep(self, step)

    def getInstanceID(self):
        r"""
        Returns the unique instance id of this CUDASimulation instance
        Notes: This value is used internally for environment property storage
        """
        return _pyflamegpu.CUDASimulation_getInstanceID(self)
    AUTO_CUDA_DEVICE_RESET = property(_pyflamegpu.CUDASimulation_AUTO_CUDA_DEVICE_RESET_get, _pyflamegpu.CUDASimulation_AUTO_CUDA_DEVICE_RESET_set, doc=r"""If changed to false, will not auto cudaDeviceReset when final CUDASimulation instance is destructed""")

# Register CUDASimulation in _pyflamegpu:
_pyflamegpu.CUDASimulation_swigregister(CUDASimulation)
cvar = _pyflamegpu.cvar

class CUDASimulation_Config(object):
    r"""CUDA runner specific config"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    device_id = property(_pyflamegpu.CUDASimulation_Config_device_id_get, _pyflamegpu.CUDASimulation_Config_device_id_set, doc=r"""
    GPU to execute model on
    Defaults to device 0, this is most performant device as detected by CUDA
    """)
    inLayerConcurrency = property(_pyflamegpu.CUDASimulation_Config_inLayerConcurrency_get, _pyflamegpu.CUDASimulation_Config_inLayerConcurrency_set, doc=r"""
    Enable / disable the use of concurrency within a layer.
    Defaults to enabled.
    """)

    def __init__(self):
        _pyflamegpu.CUDASimulation_Config_swiginit(self, _pyflamegpu.new_CUDASimulation_Config())
    __swig_destroy__ = _pyflamegpu.delete_CUDASimulation_Config

# Register CUDASimulation_Config in _pyflamegpu:
_pyflamegpu.CUDASimulation_Config_swigregister(CUDASimulation_Config)

class FLAMEGPU_HOST_API(object):
    r"""
    A flame gpu api class for use by host functions only
    This class should only be used by init/step/exit/exitcondition functions.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _agentModel, rng, agentOffsets, agentData):
        r"""
        Initailises pointers to 0
        Stores reference of CUDASimulation
        """
        _pyflamegpu.FLAMEGPU_HOST_API_swiginit(self, _pyflamegpu.new_FLAMEGPU_HOST_API(_agentModel, rng, agentOffsets, agentData))
    __swig_destroy__ = _pyflamegpu.delete_FLAMEGPU_HOST_API

    def agent(self, *args):
        r"""Returns methods that work on all agents of a certain type currently in a given state"""
        return _pyflamegpu.FLAMEGPU_HOST_API_agent(self, *args)

    def newAgent(self, *args):
        r"""
        *Overload 1:*

        Creates a new agent of the named type and returns an object for configuring it's member variables
        The agent is created in their initial state as defined in model description hierarchy
        :type agent_name: string
        :param agent_name: Name of the agent type to be created
        :raises: InvalidAgentName If an agent with the provided name does not exist withint he model description hierarchy

        |

        *Overload 2:*

        Creates a new agent of the named type and returns an object for configuring it's member variables
        The agent is created in their initial state as defined in model description hierarchy
        :type agent_name: string
        :param agent_name: Name of the agent type to be created
        :type state: string
        :param state: Name of the state the agent should be created in
        :raises: InvalidAgentName If an agent with the provided name does not exist withint he model description hierarchy
        :raises: InvalidStateName If state name does not apply to named agent
        """
        return _pyflamegpu.FLAMEGPU_HOST_API_newAgent(self, *args)
    random = property(_pyflamegpu.FLAMEGPU_HOST_API_random_get, doc=r"""Host API access to seeded random number generation""")
    environment = property(_pyflamegpu.FLAMEGPU_HOST_API_environment_get, doc=r"""Host API access to environmental properties""")

    def getStepCounter(self):
        r"""
        Access the current stepCount
        :rtype: int
        :return: the current step count, 0 indexed unsigned.
        """
        return _pyflamegpu.FLAMEGPU_HOST_API_getStepCounter(self)

# Register FLAMEGPU_HOST_API in _pyflamegpu:
_pyflamegpu.FLAMEGPU_HOST_API_swigregister(FLAMEGPU_HOST_API)

class NewAgentStorage(object):
    r"""This struct provides a compact smemory store for storing generic variables in a single struct"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyflamegpu.NewAgentStorage_swiginit(self, _pyflamegpu.new_NewAgentStorage(*args))
    __swig_destroy__ = _pyflamegpu.delete_NewAgentStorage

# Register NewAgentStorage in _pyflamegpu:
_pyflamegpu.NewAgentStorage_swigregister(NewAgentStorage)

class FLAMEGPU_HOST_NEW_AGENT_API(object):
    r"""This is the main API class used by a user for creating new agents on the host"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Assigns a new agent it's storage

        |

        *Overload 2:*

        Copy Constructor
        This does not duplicate the agent, they both point to the same data, it updates the pointed to agent data
        """
        _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_swiginit(self, _pyflamegpu.new_FLAMEGPU_HOST_NEW_AGENT_API(*args))

    def getVariableFloat(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableFloat(self, *args)

    def getVariableDouble(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableDouble(self, *args)

    def getVariableInt16(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableInt16(self, *args)

    def getVariableInt32(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableInt32(self, *args)

    def getVariableInt64(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableInt64(self, *args)

    def getVariableUInt16(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableUInt16(self, *args)

    def getVariableUInt32(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableUInt32(self, *args)

    def getVariableUInt64(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableUInt64(self, *args)

    def getVariableInt(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableInt(self, *args)

    def getVariableUInt(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableUInt(self, *args)

    def getVariableInt8(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableInt8(self, *args)

    def getVariableUInt8(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableUInt8(self, *args)

    def getVariableChar(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableChar(self, *args)

    def getVariableUChar(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableUChar(self, *args)

    def getVariableArrayFloat(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayFloat(self, var_name)

    def getVariableArrayDouble(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayDouble(self, var_name)

    def getVariableArrayInt16(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayInt16(self, var_name)

    def getVariableArrayInt32(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayInt32(self, var_name)

    def getVariableArrayInt64(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayInt64(self, var_name)

    def getVariableArrayUInt16(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayUInt16(self, var_name)

    def getVariableArrayUInt32(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayUInt32(self, var_name)

    def getVariableArrayUInt64(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayUInt64(self, var_name)

    def getVariableArrayInt(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayInt(self, var_name)

    def getVariableArrayUInt(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayUInt(self, var_name)

    def getVariableArrayInt8(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayInt8(self, var_name)

    def getVariableArrayUInt8(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayUInt8(self, var_name)

    def getVariableArrayChar(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayChar(self, var_name)

    def getVariableArrayUChar(self, var_name):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_getVariableArrayUChar(self, var_name)

    def setVariableFloat(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableFloat(self, *args)

    def setVariableDouble(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableDouble(self, *args)

    def setVariableInt16(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableInt16(self, *args)

    def setVariableInt32(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableInt32(self, *args)

    def setVariableInt64(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableInt64(self, *args)

    def setVariableUInt16(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableUInt16(self, *args)

    def setVariableUInt32(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableUInt32(self, *args)

    def setVariableUInt64(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableUInt64(self, *args)

    def setVariableInt(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableInt(self, *args)

    def setVariableUInt(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableUInt(self, *args)

    def setVariableInt8(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableInt8(self, *args)

    def setVariableUInt8(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableUInt8(self, *args)

    def setVariableChar(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableChar(self, *args)

    def setVariableUChar(self, *args):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableUChar(self, *args)

    def setVariableArrayFloat(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayFloat(self, var_name, val)

    def setVariableArrayDouble(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayDouble(self, var_name, val)

    def setVariableArrayInt16(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayInt16(self, var_name, val)

    def setVariableArrayInt32(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayInt32(self, var_name, val)

    def setVariableArrayInt64(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayInt64(self, var_name, val)

    def setVariableArrayUInt16(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayUInt16(self, var_name, val)

    def setVariableArrayUInt32(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayUInt32(self, var_name, val)

    def setVariableArrayUInt64(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayUInt64(self, var_name, val)

    def setVariableArrayInt(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayInt(self, var_name, val)

    def setVariableArrayUInt(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayUInt(self, var_name, val)

    def setVariableArrayInt8(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayInt8(self, var_name, val)

    def setVariableArrayUInt8(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayUInt8(self, var_name, val)

    def setVariableArrayChar(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayChar(self, var_name, val)

    def setVariableArrayUChar(self, var_name, val):
        return _pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_setVariableArrayUChar(self, var_name, val)
    __swig_destroy__ = _pyflamegpu.delete_FLAMEGPU_HOST_NEW_AGENT_API

# Register FLAMEGPU_HOST_NEW_AGENT_API in _pyflamegpu:
_pyflamegpu.FLAMEGPU_HOST_NEW_AGENT_API_swigregister(FLAMEGPU_HOST_NEW_AGENT_API)

class HostAgentInstance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyflamegpu.HostAgentInstance_swiginit(self, _pyflamegpu.new_HostAgentInstance(*args))

    def count(self):
        return _pyflamegpu.HostAgentInstance_count(self)
    Asc = _pyflamegpu.HostAgentInstance_Asc
    Desc = _pyflamegpu.HostAgentInstance_Desc

    def sortFloat(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortFloat(self, *args)

    def sortDouble(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortDouble(self, *args)

    def sortInt16(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortInt16(self, *args)

    def sortInt32(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortInt32(self, *args)

    def sortInt64(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortInt64(self, *args)

    def sortUInt16(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortUInt16(self, *args)

    def sortUInt32(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortUInt32(self, *args)

    def sortUInt64(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortUInt64(self, *args)

    def sortInt(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortInt(self, *args)

    def sortUInt(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortUInt(self, *args)

    def sortInt8(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortInt8(self, *args)

    def sortUInt8(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortUInt8(self, *args)

    def sortChar(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortChar(self, *args)

    def sortUChar(self, *args):
        r"""
        Sorts agents according to the named variable
        :type variable: string
        :param variable: The agent variable to sort the agents according to
        :type order: int
        :param order: Whether the agents should be sorted in ascending or descending order of the variable
        :type beginBit: int, optional
        :param beginBit: Advanced Option, see note
        :type endBit: int, optional
        :param endBit: Advanced Option, see note
        :param VarT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        Notes: An optional bit subrange [begin_bit, end_bit) of differentiating variable bits can be specified. This can reduce overall sorting overhead and yield a corresponding performance improvement.
        The sort provides no guarantee of stability
        """
        return _pyflamegpu.HostAgentInstance_sortUChar(self, *args)

    def countFloat(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: float
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countFloat(self, variable, value)

    def countDouble(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: float
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countDouble(self, variable, value)

    def countInt16(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: int
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countInt16(self, variable, value)

    def countInt32(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: int
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countInt32(self, variable, value)

    def countInt64(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: int
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countInt64(self, variable, value)

    def countUInt16(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: int
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countUInt16(self, variable, value)

    def countUInt32(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: int
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countUInt32(self, variable, value)

    def countUInt64(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: int
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countUInt64(self, variable, value)

    def countInt(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: int
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countInt(self, variable, value)

    def countUInt(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: int
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countUInt(self, variable, value)

    def countInt8(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: signed char
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countInt8(self, variable, value)

    def countUInt8(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: unsigned char
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countUInt8(self, variable, value)

    def countChar(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: char
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countChar(self, variable, value)

    def countUChar(self, variable, value):
        r"""
        Wraps thrust::count(), to count the number of occurences of the provided value
        :type variable: string
        :param variable: The agent variable to perform the count reduction across
        :type value: unsigned char
        :param value: The value to count occurences of
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_countUChar(self, variable, value)

    def minFloat(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minFloat(self, variable)

    def minDouble(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minDouble(self, variable)

    def minInt16(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minInt16(self, variable)

    def minInt32(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minInt32(self, variable)

    def minInt64(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minInt64(self, variable)

    def minUInt16(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minUInt16(self, variable)

    def minUInt32(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minUInt32(self, variable)

    def minUInt64(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minUInt64(self, variable)

    def minInt(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minInt(self, variable)

    def minUInt(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minUInt(self, variable)

    def minInt8(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minInt8(self, variable)

    def minUInt8(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minUInt8(self, variable)

    def minChar(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minChar(self, variable)

    def minUChar(self, variable):
        r"""
        Wraps cub::DeviceReduce::Min()
        :type variable: string
        :param variable: The agent variable to perform the lowerBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_minUChar(self, variable)

    def maxFloat(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxFloat(self, variable)

    def maxDouble(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxDouble(self, variable)

    def maxInt16(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxInt16(self, variable)

    def maxInt32(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxInt32(self, variable)

    def maxInt64(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxInt64(self, variable)

    def maxUInt16(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxUInt16(self, variable)

    def maxUInt32(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxUInt32(self, variable)

    def maxUInt64(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxUInt64(self, variable)

    def maxInt(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxInt(self, variable)

    def maxUInt(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxUInt(self, variable)

    def maxInt8(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxInt8(self, variable)

    def maxUInt8(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxUInt8(self, variable)

    def maxChar(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxChar(self, variable)

    def maxUChar(self, variable):
        r"""
        Wraps cub::DeviceReduce::Max()
        :type variable: string
        :param variable: The agent variable to perform the upperBound reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_maxUChar(self, variable)

    def sumFloat(self, variable):
        r"""
        Wraps cub::DeviceReduce::Sum()
        :type variable: string
        :param variable: The agent variable to perform the sum reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_sumFloat(self, variable)

    def sumDouble(self, variable):
        r"""
        Wraps cub::DeviceReduce::Sum()
        :type variable: string
        :param variable: The agent variable to perform the sum reduction across
        :param InT: The type of the variable as specified in the model description hierarchy
        :raises: UnsupportedVarType Array variables are not supported
        :raises: InvalidAgentVar If the agent does not contain a variable of the same name
        :raises: InvalidVarType If the passed variable type does not match that specified in the model description hierarchy
        """
        return _pyflamegpu.HostAgentInstance_sumDouble(self, variable)

    def sumInt8(self, variable):
        return _pyflamegpu.HostAgentInstance_sumInt8(self, variable)

    def sumUInt8(self, variable):
        return _pyflamegpu.HostAgentInstance_sumUInt8(self, variable)

    def sumInt16(self, variable):
        return _pyflamegpu.HostAgentInstance_sumInt16(self, variable)

    def sumUInt16(self, variable):
        return _pyflamegpu.HostAgentInstance_sumUInt16(self, variable)

    def sumInt32(self, variable):
        return _pyflamegpu.HostAgentInstance_sumInt32(self, variable)

    def sumUInt32(self, variable):
        return _pyflamegpu.HostAgentInstance_sumUInt32(self, variable)

    def sumInt64(self, variable):
        return _pyflamegpu.HostAgentInstance_sumInt64(self, variable)

    def sumUInt64(self, variable):
        return _pyflamegpu.HostAgentInstance_sumUInt64(self, variable)

    def sumInt(self, variable):
        return _pyflamegpu.HostAgentInstance_sumInt(self, variable)

    def sumUInt(self, variable):
        return _pyflamegpu.HostAgentInstance_sumUInt(self, variable)
    __swig_destroy__ = _pyflamegpu.delete_HostAgentInstance

# Register HostAgentInstance in _pyflamegpu:
_pyflamegpu.HostAgentInstance_swigregister(HostAgentInstance)

class HostRandom(object):
    r"""
    Utility for accessing random generation within host functions
    This is prefered over using std random, as it uses a common seed with the device random
    This should only be instantiated by FLAMEGPU_HOST_API
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setSeed(self, seed):
        r"""
        Change the seed used for random generation
        :type seed: int
        :param seed: New random seed
        """
        return _pyflamegpu.HostRandom_setSeed(self, seed)

    def getSeed(self):
        r"""Returns the last value used to seed random generation"""
        return _pyflamegpu.HostRandom_getSeed(self)

    def uniformFloat(self):
        return _pyflamegpu.HostRandom_uniformFloat(self)

    def uniformDouble(self):
        return _pyflamegpu.HostRandom_uniformDouble(self)

    def uniformInt16(self, min, max):
        return _pyflamegpu.HostRandom_uniformInt16(self, min, max)

    def uniformInt32(self, min, max):
        return _pyflamegpu.HostRandom_uniformInt32(self, min, max)

    def uniformInt64(self, min, max):
        return _pyflamegpu.HostRandom_uniformInt64(self, min, max)

    def uniformUInt16(self, min, max):
        return _pyflamegpu.HostRandom_uniformUInt16(self, min, max)

    def uniformUInt32(self, min, max):
        return _pyflamegpu.HostRandom_uniformUInt32(self, min, max)

    def uniformUInt64(self, min, max):
        return _pyflamegpu.HostRandom_uniformUInt64(self, min, max)

    def uniformInt(self, min, max):
        return _pyflamegpu.HostRandom_uniformInt(self, min, max)

    def uniformUInt(self, min, max):
        return _pyflamegpu.HostRandom_uniformUInt(self, min, max)

    def normalFloat(self):
        r"""
        Returns a normally distributed float with mean 0.0 and standard deviation 1.0.
        :param T: return type (must be floating point)
        Notes: This result can be scaled and shifted to produce normally distributed values with any mean/stddev.
        Available as float or double
        """
        return _pyflamegpu.HostRandom_normalFloat(self)

    def normalDouble(self):
        r"""
        Returns a normally distributed float with mean 0.0 and standard deviation 1.0.
        :param T: return type (must be floating point)
        Notes: This result can be scaled and shifted to produce normally distributed values with any mean/stddev.
        Available as float or double
        """
        return _pyflamegpu.HostRandom_normalDouble(self)

    def logNormalFloat(self, mean, stddev):
        r"""
        Returns a log-normally distributed float based on a normal distribution with the given mean and standard deviation.
        :param T: return type (must be floating point)
        Notes: Available as float or double
        """
        return _pyflamegpu.HostRandom_logNormalFloat(self, mean, stddev)

    def logNormalDouble(self, mean, stddev):
        r"""
        Returns a log-normally distributed float based on a normal distribution with the given mean and standard deviation.
        :param T: return type (must be floating point)
        Notes: Available as float or double
        """
        return _pyflamegpu.HostRandom_logNormalDouble(self, mean, stddev)
    __swig_destroy__ = _pyflamegpu.delete_HostRandom

# Register HostRandom in _pyflamegpu:
_pyflamegpu.HostRandom_swigregister(HostRandom)

class HostEnvironment(object):
    r"""
    This class provides host function access to Environment Properties
    It acts as a wrapper to EnvironmentManager, proxying calls, converting variable name and model_name into a combined hash
    Pairs with EnvironmentManager, AgentEnvironment and EnvironmentDescription
    This class is only to be constructed by FLAMEGPU_HOST_API
    Notes: Not thread-safe
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getPropertyFloat(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyFloat(self, *args)

    def getPropertyDouble(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyDouble(self, *args)

    def getPropertyInt16(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyInt16(self, *args)

    def getPropertyInt32(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyInt32(self, *args)

    def getPropertyInt64(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyInt64(self, *args)

    def getPropertyUInt16(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyUInt16(self, *args)

    def getPropertyUInt32(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyUInt32(self, *args)

    def getPropertyUInt64(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyUInt64(self, *args)

    def getPropertyInt(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyInt(self, *args)

    def getPropertyUInt(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyUInt(self, *args)

    def getPropertyInt8(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyInt8(self, *args)

    def getPropertyUInt8(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyUInt8(self, *args)

    def getPropertyChar(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyChar(self, *args)

    def getPropertyUChar(self, *args):
        r"""
        *Overload 1:*

        Gets an environment property
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist

        |

        *Overload 2:*

        Gets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_getPropertyUChar(self, *args)

    def getPropertyArrayFloat(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayFloat(self, name)

    def getPropertyArrayDouble(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayDouble(self, name)

    def getPropertyArrayInt16(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayInt16(self, name)

    def getPropertyArrayInt32(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayInt32(self, name)

    def getPropertyArrayInt64(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayInt64(self, name)

    def getPropertyArrayUInt16(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayUInt16(self, name)

    def getPropertyArrayUInt32(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayUInt32(self, name)

    def getPropertyArrayUInt64(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayUInt64(self, name)

    def getPropertyArrayInt(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayInt(self, name)

    def getPropertyArrayUInt(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayUInt(self, name)

    def getPropertyArrayInt8(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayInt8(self, name)

    def getPropertyArrayUInt8(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayUInt8(self, name)

    def getPropertyArrayChar(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayChar(self, name)

    def getPropertyArrayUChar(self, name):
        r"""
        Gets an environment property array
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.HostEnvironment_getPropertyArrayUChar(self, name)

    def setPropertyFloat(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: float
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: float
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: float
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: float
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyFloat(self, *args)

    def setPropertyDouble(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: float
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: float
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: float
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: float
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyDouble(self, *args)

    def setPropertyInt16(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: int
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyInt16(self, *args)

    def setPropertyInt32(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: int
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyInt32(self, *args)

    def setPropertyInt64(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: int
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyInt64(self, *args)

    def setPropertyUInt16(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: int
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyUInt16(self, *args)

    def setPropertyUInt32(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: int
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyUInt32(self, *args)

    def setPropertyUInt64(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: int
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyUInt64(self, *args)

    def setPropertyInt(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: int
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyInt(self, *args)

    def setPropertyUInt(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: int
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: int
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: int
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyUInt(self, *args)

    def setPropertyInt8(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: signed char
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: signed char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: signed char
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: signed char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyInt8(self, *args)

    def setPropertyUInt8(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: unsigned char
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: unsigned char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: unsigned char
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: unsigned char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyUInt8(self, *args)

    def setPropertyChar(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: char
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: char
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyChar(self, *args)

    def setPropertyUChar(self, *args):
        r"""
        *Overload 1:*

        Sets an environment property
        :type name: string
        :param name: name used for accessing the property
        :type value: unsigned char
        :param value: to set the property
        :param T: Type of the elements of the environment property
        :rtype: unsigned char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const

        |

        *Overload 2:*

        Sets an element of an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type index: int
        :param index: element within the environemtn property array to set
        :type value: unsigned char
        :param value: to set the element of the property array
        :param T: Type of the environmental property array
        :rtype: unsigned char
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: std::out_of_range
        See also: get(const std::string &)
        """
        return _pyflamegpu.HostEnvironment_setPropertyUChar(self, *args)

    def setPropertyArrayFloat(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< float,std::allocator< float > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< float,std::allocator< float > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayFloat(self, name, value)

    def setPropertyArrayDouble(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< double,std::allocator< double > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< double,std::allocator< double > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayDouble(self, name, value)

    def setPropertyArrayInt16(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< short,std::allocator< short > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< short,std::allocator< short > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayInt16(self, name, value)

    def setPropertyArrayInt32(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< int,std::allocator< int > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< int,std::allocator< int > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayInt32(self, name, value)

    def setPropertyArrayInt64(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< long long,std::allocator< long long > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< long long,std::allocator< long long > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayInt64(self, name, value)

    def setPropertyArrayUInt16(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< unsigned short,std::allocator< unsigned short > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< unsigned short,std::allocator< unsigned short > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayUInt16(self, name, value)

    def setPropertyArrayUInt32(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< unsigned int,std::allocator< unsigned int > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< unsigned int,std::allocator< unsigned int > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayUInt32(self, name, value)

    def setPropertyArrayUInt64(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< unsigned long long,std::allocator< unsigned long long > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< unsigned long long,std::allocator< unsigned long long > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayUInt64(self, name, value)

    def setPropertyArrayInt(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< int,std::allocator< int > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< int,std::allocator< int > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayInt(self, name, value)

    def setPropertyArrayUInt(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< unsigned int,std::allocator< unsigned int > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< unsigned int,std::allocator< unsigned int > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayUInt(self, name, value)

    def setPropertyArrayInt8(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< signed char,std::allocator< signed char > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< signed char,std::allocator< signed char > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayInt8(self, name, value)

    def setPropertyArrayUInt8(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< unsigned char,std::allocator< unsigned char > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< unsigned char,std::allocator< unsigned char > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayUInt8(self, name, value)

    def setPropertyArrayChar(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< char,std::allocator< char > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< char,std::allocator< char > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayChar(self, name, value)

    def setPropertyArrayUChar(self, name, value):
        r"""
        Sets an environment property array
        :type name: string
        :param name: name used for accessing the property array
        :type value: std::vector< unsigned char,std::allocator< unsigned char > >
        :param value: to set the property array
        :param T: Type of the elements of the environment property array
        :rtype: std::vector< unsigned char,std::allocator< unsigned char > >
        :return: Returns the previous value
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: ReadOnlyEnvProperty If the named property is marked as const
        """
        return _pyflamegpu.HostEnvironment_setPropertyArrayUChar(self, name, value)
    __swig_destroy__ = _pyflamegpu.delete_HostEnvironment

# Register HostEnvironment in _pyflamegpu:
_pyflamegpu.HostEnvironment_swigregister(HostEnvironment)

class MsgNone(object):
    r"""
    This empty class is used when messaging is not enabled for an agent function
    It also provides the best overview of the required components of a new messsaging type
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.MsgNone_swiginit(self, _pyflamegpu.new_MsgNone())
    __swig_destroy__ = _pyflamegpu.delete_MsgNone

# Register MsgNone in _pyflamegpu:
_pyflamegpu.MsgNone_swigregister(MsgNone)

class MsgSpecialisationHandler(object):
    r"""
    Interface for message specialisation
    A derived implementation of this is required for each combination of message type (e.g. MsgBruteForce) and simulation type (e.g. CUDASimulation)
    Notes: It is recommended that derived classes require an object that provides access to the model specialisation's representation of messages (e.g. CUDAMessage)
    : this is slightly CUDA aware. Future abstraction DevicePtr should be in a CUDANone message or similar.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyflamegpu.delete_MsgSpecialisationHandler

    def init(self, scatter, streamId):
        r"""
        Allocate and fill metadata, as though message list was empty
        :type scatter: CUDAScatter
        :param scatter: Scatter instance and scan arrays to be used (CUDASimulation::singletons->scatter)
        :type streamId: int
        :param streamId: Index of stream specific structures used
        """
        return _pyflamegpu.MsgSpecialisationHandler_init(self, scatter, streamId)

    def buildIndex(self, arg2, streamId, stream):
        r"""
        Constructs an index for the message data structure (e.g. Partition boundary matrix for spatial message types)
        This is called the first time messages are read, after new messages have been output
        :param scatter: Scatter instance and scan arrays to be used (CUDASimulation::singletons->scatter)
        :type streamId: int
        :param streamId: Index of stream specific structures used
        """
        return _pyflamegpu.MsgSpecialisationHandler_buildIndex(self, arg2, streamId, stream)

    def allocateMetaDataDevicePtr(self):
        r"""
        Allocates memory for the constructed index.
        The memory allocation is checked by build index.
        """
        return _pyflamegpu.MsgSpecialisationHandler_allocateMetaDataDevicePtr(self)

    def freeMetaDataDevicePtr(self):
        r"""Releases memory for the constructed index."""
        return _pyflamegpu.MsgSpecialisationHandler_freeMetaDataDevicePtr(self)

    def getMetaDataDevicePtr(self):
        r"""
        Returns a pointer to metadata for message access during agent functions
        (For CUDASimulation this is a device pointer)
        Notes: : this is slightly CUDA aware. Future abstraction this should be base CUDANone or similar.
        """
        return _pyflamegpu.MsgSpecialisationHandler_getMetaDataDevicePtr(self)

# Register MsgSpecialisationHandler in _pyflamegpu:
_pyflamegpu.MsgSpecialisationHandler_swigregister(MsgSpecialisationHandler)

class MsgBruteForce(object):
    r"""
    Brute force messaging functionality

    Every agent accesses all messages
    This technique is expensive, and other techniques are preferable if operating with more than 1000 messages.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.MsgBruteForce_swiginit(self, _pyflamegpu.new_MsgBruteForce())
    __swig_destroy__ = _pyflamegpu.delete_MsgBruteForce

# Register MsgBruteForce in _pyflamegpu:
_pyflamegpu.MsgBruteForce_swigregister(MsgBruteForce)

class MsgBruteForce_Description(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __eq__(self, rhs):
        r"""
        Equality operator, checks whether MessageDescription hierarchies are functionally the same
        :rtype: boolean
        :return: True when messages are the same
        Notes: Instead compare pointers if you wish to check that they are the same instance
        """
        return _pyflamegpu.MsgBruteForce_Description___eq__(self, rhs)

    def __ne__(self, rhs):
        r"""
        Equality operator, checks whether MessageDescription hierarchies are functionally different
        :rtype: boolean
        :return: True when messages are not the same
        Notes: Instead compare pointers if you wish to check that they are not the same instance
        """
        return _pyflamegpu.MsgBruteForce_Description___ne__(self, rhs)

    def getName(self):
        r"""
        :rtype: string
        :return: The message's name
        """
        return _pyflamegpu.MsgBruteForce_Description_getName(self)

    def getVariableType(self, variable_name):
        r"""
        :type variable_name: string
        :param variable_name: Name used to refer to the desired variable
        :rtype: std::type_index
        :return: The type of the named variable
        :raises: InvalidAgentVar If a variable with the name does not exist within the message
        """
        return _pyflamegpu.MsgBruteForce_Description_getVariableType(self, variable_name)

    def getVariableSize(self, variable_name):
        r"""
        :type variable_name: string
        :param variable_name: Name used to refer to the desired variable
        :rtype: int
        :return: The size of the named variable's type
        :raises: InvalidAgentVar If a variable with the name does not exist within the message
        """
        return _pyflamegpu.MsgBruteForce_Description_getVariableSize(self, variable_name)

    def getVariablesCount(self):
        r"""
        :rtype: int
        :return: The total number of variables within the message
        """
        return _pyflamegpu.MsgBruteForce_Description_getVariablesCount(self)

    def hasVariable(self, variable_name):
        r"""
        :type variable_name: string
        :param variable_name: Name of the variable to check
        :rtype: boolean
        :return: True when a variable with the specified name exists within the message
        """
        return _pyflamegpu.MsgBruteForce_Description_hasVariable(self, variable_name)

    def newVariableFloat(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableFloat(self, variable_name)

    def newVariableDouble(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableDouble(self, variable_name)

    def newVariableInt16(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableInt16(self, variable_name)

    def newVariableInt32(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableInt32(self, variable_name)

    def newVariableInt64(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableInt64(self, variable_name)

    def newVariableUInt16(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableUInt16(self, variable_name)

    def newVariableUInt32(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableUInt32(self, variable_name)

    def newVariableUInt64(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableUInt64(self, variable_name)

    def newVariableInt(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableInt(self, variable_name)

    def newVariableUInt(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableUInt(self, variable_name)

    def newVariableInt8(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableInt8(self, variable_name)

    def newVariableUInt8(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableUInt8(self, variable_name)

    def newVariableChar(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableChar(self, variable_name)

    def newVariableUChar(self, variable_name):
        return _pyflamegpu.MsgBruteForce_Description_newVariableUChar(self, variable_name)
    __swig_destroy__ = _pyflamegpu.delete_MsgBruteForce_Description

# Register MsgBruteForce_Description in _pyflamegpu:
_pyflamegpu.MsgBruteForce_Description_swigregister(MsgBruteForce_Description)

class MsgSpatial2D(object):
    r"""
    2D Continuous spatial messaging functionality

    User specifies the environment bounds and search radius
    When accessing messages, a search origin is specified
    A subset of messages, including those within radius of the search origin are returned
    The user must distance check that they fall within the search radius manually
    Unlike FLAMEGPU1, these spatial messages do not wrap over environment bounds.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.MsgSpatial2D_swiginit(self, _pyflamegpu.new_MsgSpatial2D())
    __swig_destroy__ = _pyflamegpu.delete_MsgSpatial2D

# Register MsgSpatial2D in _pyflamegpu:
_pyflamegpu.MsgSpatial2D_swigregister(MsgSpatial2D)

class GridPos2D(object):
    r"""
    Basic class to group 3 dimensional bin coordinates
    Would use glm::ivec3, but project does not currently have glm
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pyflamegpu.GridPos2D_x_get, _pyflamegpu.GridPos2D_x_set)
    y = property(_pyflamegpu.GridPos2D_y_get, _pyflamegpu.GridPos2D_y_set)

    def __init__(self):
        _pyflamegpu.GridPos2D_swiginit(self, _pyflamegpu.new_GridPos2D())
    __swig_destroy__ = _pyflamegpu.delete_GridPos2D

# Register GridPos2D in _pyflamegpu:
_pyflamegpu.GridPos2D_swigregister(GridPos2D)

class MsgSpatial2D_Description(MsgBruteForce_Description):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setRadius(self, r):
        return _pyflamegpu.MsgSpatial2D_Description_setRadius(self, r)

    def setMinX(self, x):
        return _pyflamegpu.MsgSpatial2D_Description_setMinX(self, x)

    def setMinY(self, y):
        return _pyflamegpu.MsgSpatial2D_Description_setMinY(self, y)

    def setMin(self, x, y):
        return _pyflamegpu.MsgSpatial2D_Description_setMin(self, x, y)

    def setMaxX(self, x):
        return _pyflamegpu.MsgSpatial2D_Description_setMaxX(self, x)

    def setMaxY(self, y):
        return _pyflamegpu.MsgSpatial2D_Description_setMaxY(self, y)

    def setMax(self, x, y):
        return _pyflamegpu.MsgSpatial2D_Description_setMax(self, x, y)

    def getRadius(self):
        return _pyflamegpu.MsgSpatial2D_Description_getRadius(self)

    def getMinX(self):
        return _pyflamegpu.MsgSpatial2D_Description_getMinX(self)

    def getMinY(self):
        return _pyflamegpu.MsgSpatial2D_Description_getMinY(self)

    def getMaxX(self):
        return _pyflamegpu.MsgSpatial2D_Description_getMaxX(self)

    def getMaxY(self):
        return _pyflamegpu.MsgSpatial2D_Description_getMaxY(self)
    __swig_destroy__ = _pyflamegpu.delete_MsgSpatial2D_Description

# Register MsgSpatial2D_Description in _pyflamegpu:
_pyflamegpu.MsgSpatial2D_Description_swigregister(MsgSpatial2D_Description)

class MsgSpatial3D(object):
    r"""
    3D Continuous spatial messaging functionality

    User specifies the environment bounds and search radius
    When accessing messages, a search origin is specified
    A subset of messages, including those within radius of the search origin are returned
    The user must distance check that they fall within the search radius manually
    Unlike FLAMEGPU1, these spatial messages do not wrap over environment bounds.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.MsgSpatial3D_swiginit(self, _pyflamegpu.new_MsgSpatial3D())
    __swig_destroy__ = _pyflamegpu.delete_MsgSpatial3D

# Register MsgSpatial3D in _pyflamegpu:
_pyflamegpu.MsgSpatial3D_swigregister(MsgSpatial3D)

class GridPos3D(object):
    r"""
    Basic class to group 3 dimensional bin coordinates
    Would use glm::ivec3, but project does not currently have glm
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pyflamegpu.GridPos3D_x_get, _pyflamegpu.GridPos3D_x_set)
    y = property(_pyflamegpu.GridPos3D_y_get, _pyflamegpu.GridPos3D_y_set)
    z = property(_pyflamegpu.GridPos3D_z_get, _pyflamegpu.GridPos3D_z_set)

    def __init__(self):
        _pyflamegpu.GridPos3D_swiginit(self, _pyflamegpu.new_GridPos3D())
    __swig_destroy__ = _pyflamegpu.delete_GridPos3D

# Register GridPos3D in _pyflamegpu:
_pyflamegpu.GridPos3D_swigregister(GridPos3D)

class MsgSpatial3D_MetaData(object):
    r"""MetaData required by spatial partitioning during message reads"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    min = property(_pyflamegpu.MsgSpatial3D_MetaData_min_get, _pyflamegpu.MsgSpatial3D_MetaData_min_set, doc=r"""Minimum environment bounds""")
    max = property(_pyflamegpu.MsgSpatial3D_MetaData_max_get, _pyflamegpu.MsgSpatial3D_MetaData_max_set, doc=r"""Maximum environment bounds""")
    radius = property(_pyflamegpu.MsgSpatial3D_MetaData_radius_get, _pyflamegpu.MsgSpatial3D_MetaData_radius_set, doc=r"""Search radius (also used as subdividision bin width)""")
    PBM = property(_pyflamegpu.MsgSpatial3D_MetaData_PBM_get, _pyflamegpu.MsgSpatial3D_MetaData_PBM_set, doc=r"""
    Pointer to the partition boundary matrix in device memory
    The PBM is never stored on the host
    """)
    gridDim = property(_pyflamegpu.MsgSpatial3D_MetaData_gridDim_get, _pyflamegpu.MsgSpatial3D_MetaData_gridDim_set, doc=r"""The number of subdividision bins in each dimensions""")
    environmentWidth = property(_pyflamegpu.MsgSpatial3D_MetaData_environmentWidth_get, _pyflamegpu.MsgSpatial3D_MetaData_environmentWidth_set, doc=r"""max-lowerBound""")
    __swig_destroy__ = _pyflamegpu.delete_MsgSpatial3D_MetaData

# Register MsgSpatial3D_MetaData in _pyflamegpu:
_pyflamegpu.MsgSpatial3D_MetaData_swigregister(MsgSpatial3D_MetaData)

class MsgSpatial3D_Description(MsgBruteForce_Description):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setRadius(self, r):
        return _pyflamegpu.MsgSpatial3D_Description_setRadius(self, r)

    def setMinX(self, x):
        return _pyflamegpu.MsgSpatial3D_Description_setMinX(self, x)

    def setMinY(self, y):
        return _pyflamegpu.MsgSpatial3D_Description_setMinY(self, y)

    def setMinZ(self, z):
        return _pyflamegpu.MsgSpatial3D_Description_setMinZ(self, z)

    def setMin(self, x, y, z):
        return _pyflamegpu.MsgSpatial3D_Description_setMin(self, x, y, z)

    def setMaxX(self, x):
        return _pyflamegpu.MsgSpatial3D_Description_setMaxX(self, x)

    def setMaxY(self, y):
        return _pyflamegpu.MsgSpatial3D_Description_setMaxY(self, y)

    def setMaxZ(self, z):
        return _pyflamegpu.MsgSpatial3D_Description_setMaxZ(self, z)

    def setMax(self, x, y, z):
        return _pyflamegpu.MsgSpatial3D_Description_setMax(self, x, y, z)

    def getRadius(self):
        return _pyflamegpu.MsgSpatial3D_Description_getRadius(self)

    def getMinX(self):
        return _pyflamegpu.MsgSpatial3D_Description_getMinX(self)

    def getMinY(self):
        return _pyflamegpu.MsgSpatial3D_Description_getMinY(self)

    def getMinZ(self):
        return _pyflamegpu.MsgSpatial3D_Description_getMinZ(self)

    def getMaxX(self):
        return _pyflamegpu.MsgSpatial3D_Description_getMaxX(self)

    def getMaxY(self):
        return _pyflamegpu.MsgSpatial3D_Description_getMaxY(self)

    def getMaxZ(self):
        return _pyflamegpu.MsgSpatial3D_Description_getMaxZ(self)
    __swig_destroy__ = _pyflamegpu.delete_MsgSpatial3D_Description

# Register MsgSpatial3D_Description in _pyflamegpu:
_pyflamegpu.MsgSpatial3D_Description_swigregister(MsgSpatial3D_Description)

class MsgArray(object):
    r"""
    Array messaging functionality

    Like an array, each message is assigned an index within a known range
    Only one message may exist at each index
    Agent functions can access individual messages by requesting them with their index

    Algorithm:
    Every agent outputs a message to the array based on their thread index
    They also set the __index variable with the intended output bin
    When buildIndex() is called, messages are sorted and errors (multiple messages per bin) are detected
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.MsgArray_swiginit(self, _pyflamegpu.new_MsgArray())
    __swig_destroy__ = _pyflamegpu.delete_MsgArray

# Register MsgArray in _pyflamegpu:
_pyflamegpu.MsgArray_swigregister(MsgArray)

class MsgArray_Description(MsgBruteForce_Description):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setLength(self, len):
        return _pyflamegpu.MsgArray_Description_setLength(self, len)

    def getLength(self):
        return _pyflamegpu.MsgArray_Description_getLength(self)
    __swig_destroy__ = _pyflamegpu.delete_MsgArray_Description

# Register MsgArray_Description in _pyflamegpu:
_pyflamegpu.MsgArray_Description_swigregister(MsgArray_Description)

class MsgArray2D(object):
    r"""
    Array messaging functionality

    Like an array, each message is assigned an index within a known range
    Only one message may exist at each index
    Agent functions can access individual messages by requesting them with their index

    Algorithm:
    Every agent outputs a message to the array based on their thread index
    They also set the __index variable with the intended output bin
    When buildIndex() is called, messages are sorted and errors (multiple messages per bin) are detected
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.MsgArray2D_swiginit(self, _pyflamegpu.new_MsgArray2D())
    __swig_destroy__ = _pyflamegpu.delete_MsgArray2D

# Register MsgArray2D in _pyflamegpu:
_pyflamegpu.MsgArray2D_swigregister(MsgArray2D)

class MsgArray2D_Description(MsgBruteForce_Description):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setDimensions(self, *args):
        return _pyflamegpu.MsgArray2D_Description_setDimensions(self, *args)

    def getDimensions(self):
        return _pyflamegpu.MsgArray2D_Description_getDimensions(self)

    def getDimX(self):
        return _pyflamegpu.MsgArray2D_Description_getDimX(self)

    def getDimY(self):
        return _pyflamegpu.MsgArray2D_Description_getDimY(self)
    __swig_destroy__ = _pyflamegpu.delete_MsgArray2D_Description

# Register MsgArray2D_Description in _pyflamegpu:
_pyflamegpu.MsgArray2D_Description_swigregister(MsgArray2D_Description)

class MsgArray3D(object):
    r"""
    Array messaging functionality

    Like an array, each message is assigned an index within a known range
    Only one message may exist at each index
    Agent functions can access individual messages by requesting them with their index

    Algorithm:
    Every agent outputs a message to the array based on their thread index
    They also set the __index variable with the intended output bin
    When buildIndex() is called, messages are sorted and errors (multiple messages per bin) are detected
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.MsgArray3D_swiginit(self, _pyflamegpu.new_MsgArray3D())
    __swig_destroy__ = _pyflamegpu.delete_MsgArray3D

# Register MsgArray3D in _pyflamegpu:
_pyflamegpu.MsgArray3D_swigregister(MsgArray3D)

class MsgArray3D_Description(MsgBruteForce_Description):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setDimensions(self, *args):
        return _pyflamegpu.MsgArray3D_Description_setDimensions(self, *args)

    def getDimensions(self):
        return _pyflamegpu.MsgArray3D_Description_getDimensions(self)

    def getDimX(self):
        return _pyflamegpu.MsgArray3D_Description_getDimX(self)

    def getDimY(self):
        return _pyflamegpu.MsgArray3D_Description_getDimY(self)

    def getDimZ(self):
        return _pyflamegpu.MsgArray3D_Description_getDimZ(self)
    __swig_destroy__ = _pyflamegpu.delete_MsgArray3D_Description

# Register MsgArray3D_Description in _pyflamegpu:
_pyflamegpu.MsgArray3D_Description_swigregister(MsgArray3D_Description)

class MsgBucket(object):
    r"""
    Bucket messaging functionality

    User specifies an integer upper and lower bound, these form a set of consecutive indices which act as keys to buckets.
    Each bucket may contain 0 to many messages, however an index is generated such that empty bins still consume a small amount of space.
    As such, this is similar to a multi-map, however the key space must be a set of consecutive integers.

    By using your own hash function you can convert non-integer keys to suitable integer keys.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.MsgBucket_swiginit(self, _pyflamegpu.new_MsgBucket())
    __swig_destroy__ = _pyflamegpu.delete_MsgBucket

# Register MsgBucket in _pyflamegpu:
_pyflamegpu.MsgBucket_swigregister(MsgBucket)

class MsgBucket_Description(MsgBruteForce_Description):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setLowerBound(self, key):
        r"""Set the (inclusive) minimum bound, this is the first valid key"""
        return _pyflamegpu.MsgBucket_Description_setLowerBound(self, key)

    def setUpperBound(self, key):
        r"""Set the (inclusive) maximum bound, this is the last valid key"""
        return _pyflamegpu.MsgBucket_Description_setUpperBound(self, key)

    def setBounds(self, min, max):
        return _pyflamegpu.MsgBucket_Description_setBounds(self, min, max)

    def getLowerBound(self):
        r"""Return the currently set (inclusive) lower bound, this is the first valid key"""
        return _pyflamegpu.MsgBucket_Description_getLowerBound(self)

    def getUpperBound(self):
        r"""Return the currently set (inclusive) upper bound, this is the last valid key"""
        return _pyflamegpu.MsgBucket_Description_getUpperBound(self)
    __swig_destroy__ = _pyflamegpu.delete_MsgBucket_Description

# Register MsgBucket_Description in _pyflamegpu:
_pyflamegpu.MsgBucket_Description_swigregister(MsgBucket_Description)

class LoggingConfig(object):
    r"""Interface to the data structure for controlling how model data is logged"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Mean = _pyflamegpu.LoggingConfig_Mean
    StandardDev = _pyflamegpu.LoggingConfig_StandardDev
    Min = _pyflamegpu.LoggingConfig_Min
    Max = _pyflamegpu.LoggingConfig_Max
    Sum = _pyflamegpu.LoggingConfig_Sum

    @staticmethod
    def toString(r):
        return _pyflamegpu.LoggingConfig_toString(r)

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Constructor
        :type model: :py:class:`ModelDescription`
        :param model: The ModelDescriptionHierarchy to produce a logging config for

        |

        *Overload 2:*

        Copy Constructor
        """
        _pyflamegpu.LoggingConfig_swiginit(self, _pyflamegpu.new_LoggingConfig(*args))

    def agent(self, *args):
        r"""Returns an interface to the logging config for the named agent state"""
        return _pyflamegpu.LoggingConfig_agent(self, *args)

    def logEnvironment(self, property_name):
        r"""
        Mark a named environment property to be logged
        :type property_name: string
        :param property_name: Name of the environment property to be logged
        :raises: InvalidEnvironment
        """
        return _pyflamegpu.LoggingConfig_logEnvironment(self, property_name)
    __swig_destroy__ = _pyflamegpu.delete_LoggingConfig

# Register LoggingConfig in _pyflamegpu:
_pyflamegpu.LoggingConfig_swigregister(LoggingConfig)

def LoggingConfig_toString(r):
    return _pyflamegpu.LoggingConfig_toString(r)

class StepLoggingConfig(LoggingConfig):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyflamegpu.StepLoggingConfig_swiginit(self, _pyflamegpu.new_StepLoggingConfig(*args))

    def setFrequency(self, steps):
        r"""
        Set the frequency of step log collection
        How many steps between each log collection, defaults to 1, so a log is collected every step
        A value of 0 disables step log collection
        """
        return _pyflamegpu.StepLoggingConfig_setFrequency(self, steps)
    __swig_destroy__ = _pyflamegpu.delete_StepLoggingConfig

# Register StepLoggingConfig in _pyflamegpu:
_pyflamegpu.StepLoggingConfig_swigregister(StepLoggingConfig)

class AgentLoggingConfig(object):
    r"""Interface to the data structure for controlling how a specific agent-state's data is logged"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def logCount(self):
        r"""Log the number of agents in this specific agent state"""
        return _pyflamegpu.AgentLoggingConfig_logCount(self)

    def logMeanFloat(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanFloat(self, variable_name)

    def logMeanDouble(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanDouble(self, variable_name)

    def logMeanInt16(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanInt16(self, variable_name)

    def logMeanInt32(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanInt32(self, variable_name)

    def logMeanInt64(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanInt64(self, variable_name)

    def logMeanUInt16(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanUInt16(self, variable_name)

    def logMeanUInt32(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanUInt32(self, variable_name)

    def logMeanUInt64(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanUInt64(self, variable_name)

    def logMeanInt(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanInt(self, variable_name)

    def logMeanUInt(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanUInt(self, variable_name)

    def logMeanInt8(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanInt8(self, variable_name)

    def logMeanUInt8(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanUInt8(self, variable_name)

    def logMeanChar(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanChar(self, variable_name)

    def logMeanUChar(self, variable_name):
        r"""
        Mark the mean of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's mean logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's mean has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMeanUChar(self, variable_name)

    def logMinFloat(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinFloat(self, variable_name)

    def logMinDouble(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinDouble(self, variable_name)

    def logMinInt16(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinInt16(self, variable_name)

    def logMinInt32(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinInt32(self, variable_name)

    def logMinInt64(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinInt64(self, variable_name)

    def logMinUInt16(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinUInt16(self, variable_name)

    def logMinUInt32(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinUInt32(self, variable_name)

    def logMinUInt64(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinUInt64(self, variable_name)

    def logMinInt(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinInt(self, variable_name)

    def logMinUInt(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinUInt(self, variable_name)

    def logMinInt8(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinInt8(self, variable_name)

    def logMinUInt8(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinUInt8(self, variable_name)

    def logMinChar(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinChar(self, variable_name)

    def logMinUChar(self, variable_name):
        r"""
        Mark the min of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's min logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's min has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMinUChar(self, variable_name)

    def logMaxFloat(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxFloat(self, variable_name)

    def logMaxDouble(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxDouble(self, variable_name)

    def logMaxInt16(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxInt16(self, variable_name)

    def logMaxInt32(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxInt32(self, variable_name)

    def logMaxInt64(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxInt64(self, variable_name)

    def logMaxUInt16(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxUInt16(self, variable_name)

    def logMaxUInt32(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxUInt32(self, variable_name)

    def logMaxUInt64(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxUInt64(self, variable_name)

    def logMaxInt(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxInt(self, variable_name)

    def logMaxUInt(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxUInt(self, variable_name)

    def logMaxInt8(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxInt8(self, variable_name)

    def logMaxUInt8(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxUInt8(self, variable_name)

    def logMaxChar(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxChar(self, variable_name)

    def logMaxUChar(self, variable_name):
        r"""
        Mark the max of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's max logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's max has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logMaxUChar(self, variable_name)

    def logStandardDevFloat(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevFloat(self, variable_name)

    def logStandardDevDouble(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevDouble(self, variable_name)

    def logStandardDevInt16(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevInt16(self, variable_name)

    def logStandardDevInt32(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevInt32(self, variable_name)

    def logStandardDevInt64(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevInt64(self, variable_name)

    def logStandardDevUInt16(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevUInt16(self, variable_name)

    def logStandardDevUInt32(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevUInt32(self, variable_name)

    def logStandardDevUInt64(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevUInt64(self, variable_name)

    def logStandardDevInt(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevInt(self, variable_name)

    def logStandardDevUInt(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevUInt(self, variable_name)

    def logStandardDevInt8(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevInt8(self, variable_name)

    def logStandardDevUInt8(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevUInt8(self, variable_name)

    def logStandardDevChar(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevChar(self, variable_name)

    def logStandardDevUChar(self, variable_name):
        r"""
        Mark the standard deviation of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's standard deviation logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's standard deviation has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logStandardDevUChar(self, variable_name)

    def logSumFloat(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumFloat(self, variable_name)

    def logSumDouble(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumDouble(self, variable_name)

    def logSumInt16(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumInt16(self, variable_name)

    def logSumInt32(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumInt32(self, variable_name)

    def logSumInt64(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumInt64(self, variable_name)

    def logSumUInt16(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumUInt16(self, variable_name)

    def logSumUInt32(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumUInt32(self, variable_name)

    def logSumUInt64(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumUInt64(self, variable_name)

    def logSumInt(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumInt(self, variable_name)

    def logSumUInt(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumUInt(self, variable_name)

    def logSumInt8(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumInt8(self, variable_name)

    def logSumUInt8(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumUInt8(self, variable_name)

    def logSumChar(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumChar(self, variable_name)

    def logSumUChar(self, variable_name):
        r"""
        Mark the sum of the named agent variable to be logged
        :type variable_name: string
        :param variable_name: Name of the agent variable to have it's sum logged
        :param T: The type of the named variable
        :raises: InvalidAgentVar If the agent var was not found inside the specified agent
        :raises: InvalidArgument If the agent var's sum has already been marked for logging
        """
        return _pyflamegpu.AgentLoggingConfig_logSumUChar(self, variable_name)
    __swig_destroy__ = _pyflamegpu.delete_AgentLoggingConfig

# Register AgentLoggingConfig in _pyflamegpu:
_pyflamegpu.AgentLoggingConfig_swigregister(AgentLoggingConfig)

class LogFrame(object):
    r"""Perhaps separate the data and interface in these classes?"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Default constructor, creates an empty log

        |

        *Overload 2:*

        Creates a log with pre-populated data
        """
        _pyflamegpu.LogFrame_swiginit(self, _pyflamegpu.new_LogFrame(*args))

    def getStepCount(self):
        r"""
        Returns the step count of the log
        0 is the state prior to the first step
        """
        return _pyflamegpu.LogFrame_getStepCount(self)

    def hasEnvironmentProperty(self, property_name):
        r"""Environment log accessors"""
        return _pyflamegpu.LogFrame_hasEnvironmentProperty(self, property_name)

    def getAgent(self, *args):
        r"""Agent log accessor"""
        return _pyflamegpu.LogFrame_getAgent(self, *args)

    def getEnvironment(self):
        r"""Raw access to environment log map"""
        return _pyflamegpu.LogFrame_getEnvironment(self)

    def getAgents(self):
        r"""Raw access to agent log map"""
        return _pyflamegpu.LogFrame_getAgents(self)

    def getEnvironmentPropertyFloat(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyFloat(self, property_name)

    def getEnvironmentPropertyDouble(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyDouble(self, property_name)

    def getEnvironmentPropertyInt16(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyInt16(self, property_name)

    def getEnvironmentPropertyInt32(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyInt32(self, property_name)

    def getEnvironmentPropertyInt64(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyInt64(self, property_name)

    def getEnvironmentPropertyUInt16(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyUInt16(self, property_name)

    def getEnvironmentPropertyUInt32(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyUInt32(self, property_name)

    def getEnvironmentPropertyUInt64(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyUInt64(self, property_name)

    def getEnvironmentPropertyInt(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyInt(self, property_name)

    def getEnvironmentPropertyUInt(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyUInt(self, property_name)

    def getEnvironmentPropertyInt8(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyInt8(self, property_name)

    def getEnvironmentPropertyUInt8(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyUInt8(self, property_name)

    def getEnvironmentPropertyChar(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyChar(self, property_name)

    def getEnvironmentPropertyUChar(self, property_name):
        return _pyflamegpu.LogFrame_getEnvironmentPropertyUChar(self, property_name)

    def getEnvironmentPropertyArrayFloat(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayFloat(self, property_name)

    def getEnvironmentPropertyArrayDouble(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayDouble(self, property_name)

    def getEnvironmentPropertyArrayInt16(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayInt16(self, property_name)

    def getEnvironmentPropertyArrayInt32(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayInt32(self, property_name)

    def getEnvironmentPropertyArrayInt64(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayInt64(self, property_name)

    def getEnvironmentPropertyArrayUInt16(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayUInt16(self, property_name)

    def getEnvironmentPropertyArrayUInt32(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayUInt32(self, property_name)

    def getEnvironmentPropertyArrayUInt64(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayUInt64(self, property_name)

    def getEnvironmentPropertyArrayInt(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayInt(self, property_name)

    def getEnvironmentPropertyArrayUInt(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayUInt(self, property_name)

    def getEnvironmentPropertyArrayInt8(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayInt8(self, property_name)

    def getEnvironmentPropertyArrayUInt8(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayUInt8(self, property_name)

    def getEnvironmentPropertyArrayChar(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayChar(self, property_name)

    def getEnvironmentPropertyArrayUChar(self, property_name):
        r"""
        Gets an environment property array
        :param name: name used for accessing the property
        :param T: Type of the elements of the environment property array
        :raises: InvalidEnvProperty If a property array of the name does not exist
        """
        return _pyflamegpu.LogFrame_getEnvironmentPropertyArrayUChar(self, property_name)
    __swig_destroy__ = _pyflamegpu.delete_LogFrame

# Register LogFrame in _pyflamegpu:
_pyflamegpu.LogFrame_swigregister(LogFrame)

class RunLog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyflamegpu.RunLog_swiginit(self, _pyflamegpu.new_RunLog(*args))

    def getExitLog(self):
        return _pyflamegpu.RunLog_getExitLog(self)

    def getStepLog(self):
        return _pyflamegpu.RunLog_getStepLog(self)

    def getRandomSeed(self):
        return _pyflamegpu.RunLog_getRandomSeed(self)
    __swig_destroy__ = _pyflamegpu.delete_RunLog

# Register RunLog in _pyflamegpu:
_pyflamegpu.RunLog_swigregister(RunLog)

class AgentLogFrame(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, data, count):
        _pyflamegpu.AgentLogFrame_swiginit(self, _pyflamegpu.new_AgentLogFrame(data, count))

    def getCount(self):
        return _pyflamegpu.AgentLogFrame_getCount(self)

    def getMean(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMean(self, variable_name)

    def getStandardDev(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getStandardDev(self, variable_name)

    def getMinFloat(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinFloat(self, variable_name)

    def getMinDouble(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinDouble(self, variable_name)

    def getMinInt16(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinInt16(self, variable_name)

    def getMinInt32(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinInt32(self, variable_name)

    def getMinInt64(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinInt64(self, variable_name)

    def getMinUInt16(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinUInt16(self, variable_name)

    def getMinUInt32(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinUInt32(self, variable_name)

    def getMinUInt64(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinUInt64(self, variable_name)

    def getMinInt(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinInt(self, variable_name)

    def getMinUInt(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinUInt(self, variable_name)

    def getMinInt8(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinInt8(self, variable_name)

    def getMinUInt8(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinUInt8(self, variable_name)

    def getMinChar(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinChar(self, variable_name)

    def getMinUChar(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMinUChar(self, variable_name)

    def getMaxFloat(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxFloat(self, variable_name)

    def getMaxDouble(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxDouble(self, variable_name)

    def getMaxInt16(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxInt16(self, variable_name)

    def getMaxInt32(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxInt32(self, variable_name)

    def getMaxInt64(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxInt64(self, variable_name)

    def getMaxUInt16(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxUInt16(self, variable_name)

    def getMaxUInt32(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxUInt32(self, variable_name)

    def getMaxUInt64(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxUInt64(self, variable_name)

    def getMaxInt(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxInt(self, variable_name)

    def getMaxUInt(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxUInt(self, variable_name)

    def getMaxInt8(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxInt8(self, variable_name)

    def getMaxUInt8(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxUInt8(self, variable_name)

    def getMaxChar(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxChar(self, variable_name)

    def getMaxUChar(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getMaxUChar(self, variable_name)

    def getSumFloat(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumFloat(self, variable_name)

    def getSumDouble(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumDouble(self, variable_name)

    def getSumInt16(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumInt16(self, variable_name)

    def getSumInt32(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumInt32(self, variable_name)

    def getSumInt64(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumInt64(self, variable_name)

    def getSumUInt16(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumUInt16(self, variable_name)

    def getSumUInt32(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumUInt32(self, variable_name)

    def getSumUInt64(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumUInt64(self, variable_name)

    def getSumInt(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumInt(self, variable_name)

    def getSumUInt(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumUInt(self, variable_name)

    def getSumInt8(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumInt8(self, variable_name)

    def getSumUInt8(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumUInt8(self, variable_name)

    def getSumChar(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumChar(self, variable_name)

    def getSumUChar(self, variable_name):
        return _pyflamegpu.AgentLogFrame_getSumUChar(self, variable_name)
    __swig_destroy__ = _pyflamegpu.delete_AgentLogFrame

# Register AgentLogFrame in _pyflamegpu:
_pyflamegpu.AgentLogFrame_swigregister(AgentLogFrame)

class LogFrameList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.LogFrameList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.LogFrameList___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.LogFrameList___bool__(self)

    def __len__(self):
        return _pyflamegpu.LogFrameList___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.LogFrameList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.LogFrameList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.LogFrameList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.LogFrameList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.LogFrameList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.LogFrameList___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.LogFrameList_pop(self)

    def append(self, x):
        return _pyflamegpu.LogFrameList_append(self, x)

    def empty(self):
        return _pyflamegpu.LogFrameList_empty(self)

    def size(self):
        return _pyflamegpu.LogFrameList_size(self)

    def swap(self, v):
        return _pyflamegpu.LogFrameList_swap(self, v)

    def begin(self):
        return _pyflamegpu.LogFrameList_begin(self)

    def end(self):
        return _pyflamegpu.LogFrameList_end(self)

    def rbegin(self):
        return _pyflamegpu.LogFrameList_rbegin(self)

    def rend(self):
        return _pyflamegpu.LogFrameList_rend(self)

    def clear(self):
        return _pyflamegpu.LogFrameList_clear(self)

    def get_allocator(self):
        return _pyflamegpu.LogFrameList_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.LogFrameList_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.LogFrameList_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.LogFrameList_swiginit(self, _pyflamegpu.new_LogFrameList(*args))

    def push_back(self, x):
        return _pyflamegpu.LogFrameList_push_back(self, x)

    def front(self):
        return _pyflamegpu.LogFrameList_front(self)

    def back(self):
        return _pyflamegpu.LogFrameList_back(self)

    def assign(self, n, x):
        return _pyflamegpu.LogFrameList_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.LogFrameList_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.LogFrameList_insert(self, *args)

    def pop_front(self):
        return _pyflamegpu.LogFrameList_pop_front(self)

    def push_front(self, x):
        return _pyflamegpu.LogFrameList_push_front(self, x)

    def reverse(self):
        return _pyflamegpu.LogFrameList_reverse(self)
    __swig_destroy__ = _pyflamegpu.delete_LogFrameList

# Register LogFrameList in _pyflamegpu:
_pyflamegpu.LogFrameList_swigregister(LogFrameList)

class RunPlan(object):
    r"""Individual run config"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, environment):
        r"""
        Constructor this will need to set the random seed to a default value, +1 of previous EnsembleRun would make sense
        :type environment: :py:class:`ModelDescription`
        :param environment: EnvironmentDescription to limit properties by
        TODO: Where will default steps and random seed come from?
        """
        _pyflamegpu.RunPlan_swiginit(self, _pyflamegpu.new_RunPlan(environment))

    def setRandomSimulationSeed(self, random_seed):
        r"""
        Set the random seed passed to this run of the simulation
        :type random_seed: int
        :param random_seed: Seed for random generation during execution
        """
        return _pyflamegpu.RunPlan_setRandomSimulationSeed(self, random_seed)

    def setSteps(self, steps):
        r"""
        Set the number of steps for this instance of the simulation
        A steps value of 0 requires the ModelDescription to have atleast 1 exit condition
        :type steps: int
        :param steps: The number of steps to execute, 0 is unlimited but requires an exit condition
        """
        return _pyflamegpu.RunPlan_setSteps(self, steps)

    def setOutputSubdirectory(self, subdir):
        r"""
        Set the sub directory within the output directory for outputs of this run
        If left empty, output will not goto subdirectories
        :param steps: The number of steps to execute, 0 is unlimited but requires an exit condition
        """
        return _pyflamegpu.RunPlan_setOutputSubdirectory(self, subdir)

    def getRandomSimulationSeed(self):
        r"""Returns the random seed used for this simulation run"""
        return _pyflamegpu.RunPlan_getRandomSimulationSeed(self)

    def getSteps(self):
        r"""
        Returns the number of steps to be executed for this simulation run
        0 means unlimited, and is only available if the model description has an exit condition
        """
        return _pyflamegpu.RunPlan_getSteps(self)

    def getOutputSubdirectory(self):
        r"""
        Returns the currently configured output subdirectory directory
        Empty string means output for this run will not be placed into a subdirectory
        """
        return _pyflamegpu.RunPlan_getOutputSubdirectory(self)

    def __add__(self, *args):
        return _pyflamegpu.RunPlan___add__(self, *args)

    def __mul__(self, rhs):
        return _pyflamegpu.RunPlan___mul__(self, rhs)

    def setPropertyFloat(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: float
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: float
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyFloat(self, *args)

    def setPropertyDouble(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: float
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: float
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyDouble(self, *args)

    def setPropertyInt16(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyInt16(self, *args)

    def setPropertyInt32(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyInt32(self, *args)

    def setPropertyInt64(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyInt64(self, *args)

    def setPropertyUInt16(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyUInt16(self, *args)

    def setPropertyUInt32(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyUInt32(self, *args)

    def setPropertyUInt64(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyUInt64(self, *args)

    def setPropertyInt(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyInt(self, *args)

    def setPropertyUInt(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: int
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyUInt(self, *args)

    def setPropertyInt8(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: signed char
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: signed char
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyInt8(self, *args)

    def setPropertyUInt8(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: unsigned char
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: unsigned char
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyUInt8(self, *args)

    def setPropertyChar(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: char
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: char
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyChar(self, *args)

    def setPropertyUChar(self, *args):
        r"""
        *Overload 1:*

        Set the environment property override for this run of the model
        :type name: string
        :param name: Environment property name
        :type value: unsigned char
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Set the environment property override for this run of the model
        This version should be used for setting individual elements of array properties
        :type name: string
        :param name: Environment property name
        :type index: int
        :param index: Length of the array to be returned
        :type value: unsigned char
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_setPropertyUChar(self, *args)

    def setPropertyArrayFloat(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< float,std::allocator< float > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayFloat(self, name, length, value)

    def setPropertyArrayDouble(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< double,std::allocator< double > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayDouble(self, name, length, value)

    def setPropertyArrayInt16(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< short,std::allocator< short > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayInt16(self, name, length, value)

    def setPropertyArrayInt32(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< int,std::allocator< int > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayInt32(self, name, length, value)

    def setPropertyArrayInt64(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< long long,std::allocator< long long > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayInt64(self, name, length, value)

    def setPropertyArrayUInt16(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned short,std::allocator< unsigned short > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayUInt16(self, name, length, value)

    def setPropertyArrayUInt32(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned int,std::allocator< unsigned int > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayUInt32(self, name, length, value)

    def setPropertyArrayUInt64(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned long long,std::allocator< unsigned long long > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayUInt64(self, name, length, value)

    def setPropertyArrayInt(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< int,std::allocator< int > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayInt(self, name, length, value)

    def setPropertyArrayUInt(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned int,std::allocator< unsigned int > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayUInt(self, name, length, value)

    def setPropertyArrayInt8(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< signed char,std::allocator< signed char > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayInt8(self, name, length, value)

    def setPropertyArrayUInt8(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned char,std::allocator< unsigned char > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayUInt8(self, name, length, value)

    def setPropertyArrayChar(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< char,std::allocator< char > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayChar(self, name, length, value)

    def setPropertyArrayUChar(self, name, length, value):
        r"""
        Set the environment property override for this run of the model
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned char,std::allocator< unsigned char > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlan_setPropertyArrayUChar(self, name, length, value)

    def getPropertyFloat(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyFloat(self, *args)

    def getPropertyDouble(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyDouble(self, *args)

    def getPropertyInt16(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyInt16(self, *args)

    def getPropertyInt32(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyInt32(self, *args)

    def getPropertyInt64(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyInt64(self, *args)

    def getPropertyUInt16(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyUInt16(self, *args)

    def getPropertyUInt32(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyUInt32(self, *args)

    def getPropertyUInt64(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyUInt64(self, *args)

    def getPropertyInt(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyInt(self, *args)

    def getPropertyUInt(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyUInt(self, *args)

    def getPropertyInt8(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyInt8(self, *args)

    def getPropertyUInt8(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyUInt8(self, *args)

    def getPropertyChar(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyChar(self, *args)

    def getPropertyUChar(self, *args):
        r"""
        *Overload 1:*

        Gets the currently configured environment property value
        :type name: string
        :param name: name used for accessing the property
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T

        |

        *Overload 2:*

        Gets an element of the currently configured environment property array
        :type name: string
        :param name: name used for accessing the property
        :type index: int
        :param index: element from the environment property array to return
        :param T: Type of the value to be returned
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        """
        return _pyflamegpu.RunPlan_getPropertyUChar(self, *args)

    def getPropertyArrayFloat(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayFloat(self, name)

    def getPropertyArrayDouble(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayDouble(self, name)

    def getPropertyArrayInt16(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayInt16(self, name)

    def getPropertyArrayInt32(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayInt32(self, name)

    def getPropertyArrayInt64(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayInt64(self, name)

    def getPropertyArrayUInt16(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayUInt16(self, name)

    def getPropertyArrayUInt32(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayUInt32(self, name)

    def getPropertyArrayUInt64(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayUInt64(self, name)

    def getPropertyArrayInt(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayInt(self, name)

    def getPropertyArrayUInt(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayUInt(self, name)

    def getPropertyArrayInt8(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayInt8(self, name)

    def getPropertyArrayUInt8(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayUInt8(self, name)

    def getPropertyArrayChar(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayChar(self, name)

    def getPropertyArrayUChar(self, name):
        r"""
        Gets the currently configured environment property array value
        :type name: string
        :param name: Environment property name
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        """
        return _pyflamegpu.RunPlan_getPropertyArrayUChar(self, name)
    __swig_destroy__ = _pyflamegpu.delete_RunPlan

# Register RunPlan in _pyflamegpu:
_pyflamegpu.RunPlan_swigregister(RunPlan)

class RunPlanVec(object):
    r"""
    Vector of RunPlan
    Contains additional methods for generating collections of RunPlans and combining RunPlanVecs
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, initial_length):
        r"""
        Constructor, requires the model description to validate environment properties match up
        TODO: Unsure if this will require additional info, e.g. steps?
        """
        _pyflamegpu.RunPlanVec_swiginit(self, _pyflamegpu.new_RunPlanVec(model, initial_length))

    def setRandomSimulationSeed(self, initial_seed, step=0):
        r"""
        Set the random simulation seed of each RunPlan currently within this vector
        :type initial_seed: int
        :param initial_seed: The random seed applied to the first item
        :type step: int, optional
        :param step: The value added to the previous seed to calculate the next seed
        Notes: A step of 0, will give the exact same seed to all RunPlans
        """
        return _pyflamegpu.RunPlanVec_setRandomSimulationSeed(self, initial_seed, step)

    def setSteps(self, steps):
        r"""
        Set the steps of each RunPlan currently within this vector
        :type steps: int
        :param steps: The number of steps to be executed
        Notes: If 0 is provided, the model must have an exit condition
        """
        return _pyflamegpu.RunPlanVec_setSteps(self, steps)

    def setOutputSubdirectory(self, subdir):
        r"""
        Set the the sub directory within the output directory for outputs of runplans in this vector
        :type subdir: string
        :param subdir: The name of the subdirectory
        Notes: Defaults to empty string, where no subdirectory is used
        """
        return _pyflamegpu.RunPlanVec_setOutputSubdirectory(self, subdir)

    def setRandomPropertySeed(self, seed):
        r"""
        Seed the internal random generator used for random property distributions
        This will only affect subsequent calls to setPropertyRandom()
        :type seed: int
        :param seed: The random seed to be used
        """
        return _pyflamegpu.RunPlanVec_setRandomPropertySeed(self, seed)

    def size(self):
        r"""Expose inherited std::vector methods/classes"""
        return _pyflamegpu.RunPlanVec_size(self)

    def __add__(self, *args):
        return _pyflamegpu.RunPlanVec___add__(self, *args)

    def __iadd__(self, *args):
        return _pyflamegpu.RunPlanVec___iadd__(self, *args)

    def __imul__(self, rhs):
        return _pyflamegpu.RunPlanVec___imul__(self, rhs)

    def __mul__(self, rhs):
        return _pyflamegpu.RunPlanVec___mul__(self, rhs)

    def __iter__(self):
        return FLAMEGPUIterator(self)
    def __len__(self):
        return self.size()

    def insert(self, i, x):
        if isinstance(i, int): # "insert" is used as if the vector is a Python list
            self.insert(self, self.begin() + i, x)
        else: # "insert" is used as if the vector is a native C++ container
            return self.insert(self, i, x)


    def __getitem__(self, index):
        return _pyflamegpu.RunPlanVec___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyflamegpu.RunPlanVec___setitem__(self, index, value)

    def setPropertyFloat(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: float
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: float
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyFloat(self, *args)

    def setPropertyDouble(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: float
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: float
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyDouble(self, *args)

    def setPropertyInt16(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: int
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: int
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyInt16(self, *args)

    def setPropertyInt32(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: int
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: int
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyInt32(self, *args)

    def setPropertyInt64(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: int
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: int
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyInt64(self, *args)

    def setPropertyUInt16(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: int
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: int
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUInt16(self, *args)

    def setPropertyUInt32(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: int
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: int
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUInt32(self, *args)

    def setPropertyUInt64(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: int
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: int
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUInt64(self, *args)

    def setPropertyInt(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: int
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: int
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyInt(self, *args)

    def setPropertyUInt(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: int
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: int
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUInt(self, *args)

    def setPropertyInt8(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: signed char
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: signed char
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyInt8(self, *args)

    def setPropertyUInt8(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: unsigned char
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: unsigned char
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUInt8(self, *args)

    def setPropertyChar(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: char
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: char
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyChar(self, *args)

    def setPropertyUChar(self, *args):
        r"""
        *Overload 1:*

        Set named environment property to a specific value
        :type name: string
        :param name: The name of the environment property to set
        :type value: unsigned char
        :param value: The value of the environment property to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1

        |

        *Overload 2:*

        Array property element equivalent of setProperty()
        :type name: string
        :param name: The name of the environment property array to affect
        :type index: int
        :param index: The index of the environment property array to set
        :type value: unsigned char
        :param value: The value of the environment property array to set
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is not in range of the length of the property array
        See also: setProperty(const std::string &name, const T &value)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUChar(self, *args)

    def setPropertyArrayFloat(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< float,std::allocator< float > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayFloat(self, name, length, value)

    def setPropertyArrayDouble(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< double,std::allocator< double > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayDouble(self, name, length, value)

    def setPropertyArrayInt16(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< short,std::allocator< short > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayInt16(self, name, length, value)

    def setPropertyArrayInt32(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< int,std::allocator< int > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayInt32(self, name, length, value)

    def setPropertyArrayInt64(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< long long,std::allocator< long long > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayInt64(self, name, length, value)

    def setPropertyArrayUInt16(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned short,std::allocator< unsigned short > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayUInt16(self, name, length, value)

    def setPropertyArrayUInt32(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned int,std::allocator< unsigned int > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayUInt32(self, name, length, value)

    def setPropertyArrayUInt64(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned long long,std::allocator< unsigned long long > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayUInt64(self, name, length, value)

    def setPropertyArrayInt(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< int,std::allocator< int > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayInt(self, name, length, value)

    def setPropertyArrayUInt(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned int,std::allocator< unsigned int > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayUInt(self, name, length, value)

    def setPropertyArrayInt8(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< signed char,std::allocator< signed char > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayInt8(self, name, length, value)

    def setPropertyArrayUInt8(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned char,std::allocator< unsigned char > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayUInt8(self, name, length, value)

    def setPropertyArrayChar(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< char,std::allocator< char > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayChar(self, name, length, value)

    def setPropertyArrayUChar(self, name, length, value):
        r"""
        Set named environment property array to a specific value
        This version should be used for array properties
        :type name: string
        :param name: Environment property name
        :type length: int
        :param length: Length of the environmental property array to be created
        :type value: std::vector< unsigned char,std::allocator< unsigned char > >
        :param value: Environment property value (override)
        :param T: Type of the environment property
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvProperty If value.size() != length
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length to N
        """
        return _pyflamegpu.RunPlanVec_setPropertyArrayUChar(self, name, length, value)

    def setPropertyUniformDistributionFloat(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: float
        :param min: The value to set the first environment property
        :type max: float
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: float
        :param min: The value to set the first environment property array element
        :type max: float
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionFloat(self, *args)

    def setPropertyUniformDistributionDouble(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: float
        :param min: The value to set the first environment property
        :type max: float
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: float
        :param min: The value to set the first environment property array element
        :type max: float
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionDouble(self, *args)

    def setPropertyUniformDistributionInt16(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value to set the first environment property
        :type max: int
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: int
        :param min: The value to set the first environment property array element
        :type max: int
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionInt16(self, *args)

    def setPropertyUniformDistributionInt32(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value to set the first environment property
        :type max: int
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: int
        :param min: The value to set the first environment property array element
        :type max: int
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionInt32(self, *args)

    def setPropertyUniformDistributionInt64(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value to set the first environment property
        :type max: int
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: int
        :param min: The value to set the first environment property array element
        :type max: int
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionInt64(self, *args)

    def setPropertyUniformDistributionUInt16(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value to set the first environment property
        :type max: int
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: int
        :param min: The value to set the first environment property array element
        :type max: int
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionUInt16(self, *args)

    def setPropertyUniformDistributionUInt32(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value to set the first environment property
        :type max: int
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: int
        :param min: The value to set the first environment property array element
        :type max: int
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionUInt32(self, *args)

    def setPropertyUniformDistributionUInt64(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value to set the first environment property
        :type max: int
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: int
        :param min: The value to set the first environment property array element
        :type max: int
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionUInt64(self, *args)

    def setPropertyUniformDistributionInt(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value to set the first environment property
        :type max: int
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: int
        :param min: The value to set the first environment property array element
        :type max: int
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionInt(self, *args)

    def setPropertyUniformDistributionUInt(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value to set the first environment property
        :type max: int
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: int
        :param min: The value to set the first environment property array element
        :type max: int
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionUInt(self, *args)

    def setPropertyUniformDistributionInt8(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: signed char
        :param min: The value to set the first environment property
        :type max: signed char
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: signed char
        :param min: The value to set the first environment property array element
        :type max: signed char
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionInt8(self, *args)

    def setPropertyUniformDistributionUInt8(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: unsigned char
        :param min: The value to set the first environment property
        :type max: unsigned char
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: unsigned char
        :param min: The value to set the first environment property array element
        :type max: unsigned char
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionUInt8(self, *args)

    def setPropertyUniformDistributionChar(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: char
        :param min: The value to set the first environment property
        :type max: char
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: char
        :param min: The value to set the first environment property array element
        :type max: char
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionChar(self, *args)

    def setPropertyUniformDistributionUChar(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type min: unsigned char
        :param min: The value to set the first environment property
        :type max: unsigned char
        :param max: The value to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformDistribution()
        Sweep element of named environment property array over an inclusive uniform distribution
        value = min * (1.0 - a) + max * a, where a = index/(size()-1)
        :type name: string
        :param name: The name of the environment property to set
        :type index: int
        :param index: The index of the element within the environment property array to set
        :type min: unsigned char
        :param min: The value to set the first environment property array element
        :type max: unsigned char
        :param max: The value to set the last environment property array element
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformDistribution(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformDistributionUChar(self, *args)

    def setPropertyUniformRandomDistributionFloat(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: float
        :param min: The value of the range to set the first environment property
        :type max: float
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: float
        :param min: The value of the range to set the first environment property
        :type max: float
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionFloat(self, *args)

    def setPropertyUniformRandomDistributionDouble(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: float
        :param min: The value of the range to set the first environment property
        :type max: float
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: float
        :param min: The value of the range to set the first environment property
        :type max: float
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionDouble(self, *args)

    def setPropertyUniformRandomDistributionInt16(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionInt16(self, *args)

    def setPropertyUniformRandomDistributionInt32(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionInt32(self, *args)

    def setPropertyUniformRandomDistributionInt64(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionInt64(self, *args)

    def setPropertyUniformRandomDistributionUInt16(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionUInt16(self, *args)

    def setPropertyUniformRandomDistributionUInt32(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionUInt32(self, *args)

    def setPropertyUniformRandomDistributionUInt64(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionUInt64(self, *args)

    def setPropertyUniformRandomDistributionInt(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionInt(self, *args)

    def setPropertyUniformRandomDistributionUInt(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: int
        :param min: The value of the range to set the first environment property
        :type max: int
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionUInt(self, *args)

    def setPropertyUniformRandomDistributionInt8(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: signed char
        :param min: The value of the range to set the first environment property
        :type max: signed char
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: signed char
        :param min: The value of the range to set the first environment property
        :type max: signed char
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionInt8(self, *args)

    def setPropertyUniformRandomDistributionUInt8(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: unsigned char
        :param min: The value of the range to set the first environment property
        :type max: unsigned char
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: unsigned char
        :param min: The value of the range to set the first environment property
        :type max: unsigned char
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionUInt8(self, *args)

    def setPropertyUniformRandomDistributionChar(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: char
        :param min: The value of the range to set the first environment property
        :type max: char
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: char
        :param min: The value of the range to set the first environment property
        :type max: char
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionChar(self, *args)

    def setPropertyUniformRandomDistributionUChar(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: unsigned char
        :param min: The value of the range to set the first environment property
        :type max: unsigned char
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyUniformRandom()
        Sweep named environment property over a uniform random distribution
        Integer types have a range [min, max]
        Floating point types have a range [min, max)
        :type name: string
        :param name: The name of the environment property to set
        :type min: unsigned char
        :param min: The value of the range to set the first environment property
        :type max: unsigned char
        :param max: The value of the range to set the last environment property
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyUniformRandom(const std::string &name, const T &min, const T &max)
        """
        return _pyflamegpu.RunPlanVec_setPropertyUniformRandomDistributionUChar(self, *args)

    def setPropertyNormalRandomDistributionFloat(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a normal random distribution
        Only floating point types are supported
        :type name: string
        :param name: The name of the environment property to set
        :type mean: float
        :param mean: Mean of the distribution (its expected value). Which coincides with the location of its peak.
        :type stddev: float
        :param stddev: Standard deviation: The square root of variance, representing the dispersion of values from the distribution mean.
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyNormalRandom()
        Sweep named environment property over a normal random distribution
        Only floating point types are supported
        :type name: string
        :param name: The name of the environment property to set
        :type mean: float
        :param mean: Mean of the distribution (its expected value). Which coincides with the location of its peak.
        :type stddev: float
        :param stddev: Standard deviation: The square root of variance, representing the dispersion of values from the distribution mean.
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyNormalRandom(const std::string &name, const T &mean, const T &stddev)
        """
        return _pyflamegpu.RunPlanVec_setPropertyNormalRandomDistributionFloat(self, *args)

    def setPropertyNormalRandomDistributionDouble(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a normal random distribution
        Only floating point types are supported
        :type name: string
        :param name: The name of the environment property to set
        :type mean: float
        :param mean: Mean of the distribution (its expected value). Which coincides with the location of its peak.
        :type stddev: float
        :param stddev: Standard deviation: The square root of variance, representing the dispersion of values from the distribution mean.
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyNormalRandom()
        Sweep named environment property over a normal random distribution
        Only floating point types are supported
        :type name: string
        :param name: The name of the environment property to set
        :type mean: float
        :param mean: Mean of the distribution (its expected value). Which coincides with the location of its peak.
        :type stddev: float
        :param stddev: Standard deviation: The square root of variance, representing the dispersion of values from the distribution mean.
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyNormalRandom(const std::string &name, const T &mean, const T &stddev)
        """
        return _pyflamegpu.RunPlanVec_setPropertyNormalRandomDistributionDouble(self, *args)

    def setPropertyLogNormalRandomDistributionFloat(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a log normal random distribution
        Only floating point types are supported
        :type name: string
        :param name: The name of the environment property to set
        :type mean: float
        :param mean: Mean of the underlying normal distribution formed by the logarithm transformations of the possible values in this distribution.
        :type stddev: float
        :param stddev: Standard deviation of the underlying normal distribution formed by the logarithm transformations of the possible values in this distribution.
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyLogNormalRandom()
        Sweep named environment property over a log normal random distribution
        Only floating point types are supported
        :type name: string
        :param name: The name of the environment property to set
        :type mean: float
        :param mean: Mean of the underlying normal distribution formed by the logarithm transformations of the possible values in this distribution.
        :type stddev: float
        :param stddev: Standard deviation of the underlying normal distribution formed by the logarithm transformations of the possible values in this distribution.
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyNormalRandom(const std::string &name, const T &mean, const T &stddev)
        """
        return _pyflamegpu.RunPlanVec_setPropertyLogNormalRandomDistributionFloat(self, *args)

    def setPropertyLogNormalRandomDistributionDouble(self, *args):
        r"""
        *Overload 1:*

        Sweep named environment property over a log normal random distribution
        Only floating point types are supported
        :type name: string
        :param name: The name of the environment property to set
        :type mean: float
        :param mean: Mean of the underlying normal distribution formed by the logarithm transformations of the possible values in this distribution.
        :type stddev: float
        :param stddev: Standard deviation of the underlying normal distribution formed by the logarithm transformations of the possible values in this distribution.
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T, or length > 1
        :raises: std::out_of_range If this vector has a length less than 2

        |

        *Overload 2:*

        Array property element equivalent of setPropertyLogNormalRandom()
        Sweep named environment property over a log normal random distribution
        Only floating point types are supported
        :type name: string
        :param name: The name of the environment property to set
        :type mean: float
        :param mean: Mean of the underlying normal distribution formed by the logarithm transformations of the possible values in this distribution.
        :type stddev: float
        :param stddev: Standard deviation of the underlying normal distribution formed by the logarithm transformations of the possible values in this distribution.
        :param T: The type of the environment property, this must match the ModelDescription
        :raises: InvalidEnvProperty If a property of the name does not exist
        :raises: InvalidEnvPropertyType If a property with the name has a type different to T
        :raises: std::out_of_range If index is greater than or equal to the length of the environment property array
        :raises: std::out_of_range If this vector has a length less than 2
        See also: setPropertyNormalRandom(const std::string &name, const T &mean, const T &stddev)
        """
        return _pyflamegpu.RunPlanVec_setPropertyLogNormalRandomDistributionDouble(self, *args)
    __swig_destroy__ = _pyflamegpu.delete_RunPlanVec

# Register RunPlanVec in _pyflamegpu:
_pyflamegpu.RunPlanVec_swigregister(RunPlanVec)

class CUDAEnsemble(object):
    r"""
    Manager for automatically executing multiple copies of a model simultaneously
    This can be used to conveniently execute parameter sweeps and batch validation runs
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, argc=0):
        r"""
        Initialise CUDA Ensemble
        If provided, you can pass runtime arguments to this constructor, to automatically call initialise()
        This is not required, you can call initialise() manually later, or not at all.
        :type model: :py:class:`ModelDescription`
        :param model: The model description to initialise the runner to execute
        :type argc: int, optional
        :param argc: Runtime argument count
        :type argv: string, optional
        :param argv: Runtime argument list ptr
        """
        _pyflamegpu.CUDAEnsemble_swiginit(self, _pyflamegpu.new_CUDAEnsemble(model, argc))
    __swig_destroy__ = _pyflamegpu.delete_CUDAEnsemble

    def simulate(self, plan):
        r"""
        Execute the ensemble of simulations.
        This call will block until all simulations have completed or MAX_ERRORS simulations exit with an error
        :type plan: :py:class:`RunPlanVec`
        :param plan: The plan of individual runs to execute during the ensemble
        """
        return _pyflamegpu.CUDAEnsemble_simulate(self, plan)

    def Config(self):
        r"""
        :rtype: :py:class:`EnsembleConfig`
        :return: A mutable reference to the ensemble configuration struct
        See also: CUDAEnsemble::applyConfig() Should be called afterwards to apply changes
        """
        return _pyflamegpu.CUDAEnsemble_Config(self)

    def getConfig(self):
        r"""
        :rtype: :py:class:`EnsembleConfig`
        :return: An immutable reference to the ensemble configuration struct
        """
        return _pyflamegpu.CUDAEnsemble_getConfig(self)

    def initialise(self, argc):
        return _pyflamegpu.CUDAEnsemble_initialise(self, argc)

    def setStepLog(self, stepConfig):
        r"""
        Configure which step data should be logged
        :type stepConfig: :py:class:`StepLoggingConfig`
        :param stepConfig: The step logging config for the CUDAEnsemble
        Notes: This must be for the same model description hierarchy as the CUDAEnsemble
        """
        return _pyflamegpu.CUDAEnsemble_setStepLog(self, stepConfig)

    def setExitLog(self, exitConfig):
        r"""
        Configure which exit data should be logged
        :type exitConfig: :py:class:`LoggingConfig`
        :param exitConfig: The logging config for the CUDAEnsemble
        Notes: This must be for the same model description hierarchy as the CUDAEnsemble
        """
        return _pyflamegpu.CUDAEnsemble_setExitLog(self, exitConfig)

    def getEnsembleElapsedTime(self):
        r"""Get the duration of the last call to simulate() in milliseconds."""
        return _pyflamegpu.CUDAEnsemble_getEnsembleElapsedTime(self)

    def getLogs(self):
        r"""Return the list of logs collected from the last call to simulate()"""
        return _pyflamegpu.CUDAEnsemble_getLogs(self)

# Register CUDAEnsemble in _pyflamegpu:
_pyflamegpu.CUDAEnsemble_swigregister(CUDAEnsemble)

class CUDAEnsembleConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    out_directory = property(_pyflamegpu.CUDAEnsembleConfig_out_directory_get, _pyflamegpu.CUDAEnsembleConfig_out_directory_set)
    out_format = property(_pyflamegpu.CUDAEnsembleConfig_out_format_get, _pyflamegpu.CUDAEnsembleConfig_out_format_set)
    concurrent_runs = property(_pyflamegpu.CUDAEnsembleConfig_concurrent_runs_get, _pyflamegpu.CUDAEnsembleConfig_concurrent_runs_set)
    devices = property(_pyflamegpu.CUDAEnsembleConfig_devices_get, _pyflamegpu.CUDAEnsembleConfig_devices_set)
    silent = property(_pyflamegpu.CUDAEnsembleConfig_silent_get, _pyflamegpu.CUDAEnsembleConfig_silent_set)
    timing = property(_pyflamegpu.CUDAEnsembleConfig_timing_get, _pyflamegpu.CUDAEnsembleConfig_timing_set)

    def __init__(self):
        _pyflamegpu.CUDAEnsembleConfig_swiginit(self, _pyflamegpu.new_CUDAEnsembleConfig())
    __swig_destroy__ = _pyflamegpu.delete_CUDAEnsembleConfig

# Register CUDAEnsembleConfig in _pyflamegpu:
_pyflamegpu.CUDAEnsembleConfig_swigregister(CUDAEnsembleConfig)

class RunLogVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyflamegpu.RunLogVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyflamegpu.RunLogVec___nonzero__(self)

    def __bool__(self):
        return _pyflamegpu.RunLogVec___bool__(self)

    def __len__(self):
        return _pyflamegpu.RunLogVec___len__(self)

    def __getslice__(self, i, j):
        return _pyflamegpu.RunLogVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyflamegpu.RunLogVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyflamegpu.RunLogVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyflamegpu.RunLogVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyflamegpu.RunLogVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyflamegpu.RunLogVec___setitem__(self, *args)

    def pop(self):
        return _pyflamegpu.RunLogVec_pop(self)

    def append(self, x):
        return _pyflamegpu.RunLogVec_append(self, x)

    def empty(self):
        return _pyflamegpu.RunLogVec_empty(self)

    def size(self):
        return _pyflamegpu.RunLogVec_size(self)

    def swap(self, v):
        return _pyflamegpu.RunLogVec_swap(self, v)

    def begin(self):
        return _pyflamegpu.RunLogVec_begin(self)

    def end(self):
        return _pyflamegpu.RunLogVec_end(self)

    def rbegin(self):
        return _pyflamegpu.RunLogVec_rbegin(self)

    def rend(self):
        return _pyflamegpu.RunLogVec_rend(self)

    def clear(self):
        return _pyflamegpu.RunLogVec_clear(self)

    def get_allocator(self):
        return _pyflamegpu.RunLogVec_get_allocator(self)

    def pop_back(self):
        return _pyflamegpu.RunLogVec_pop_back(self)

    def erase(self, *args):
        return _pyflamegpu.RunLogVec_erase(self, *args)

    def __init__(self, *args):
        _pyflamegpu.RunLogVec_swiginit(self, _pyflamegpu.new_RunLogVec(*args))

    def push_back(self, x):
        return _pyflamegpu.RunLogVec_push_back(self, x)

    def front(self):
        return _pyflamegpu.RunLogVec_front(self)

    def back(self):
        return _pyflamegpu.RunLogVec_back(self)

    def assign(self, n, x):
        return _pyflamegpu.RunLogVec_assign(self, n, x)

    def resize(self, *args):
        return _pyflamegpu.RunLogVec_resize(self, *args)

    def insert(self, *args):
        return _pyflamegpu.RunLogVec_insert(self, *args)

    def reserve(self, n):
        return _pyflamegpu.RunLogVec_reserve(self, n)

    def capacity(self):
        return _pyflamegpu.RunLogVec_capacity(self)
    __swig_destroy__ = _pyflamegpu.delete_RunLogVec

# Register RunLogVec in _pyflamegpu:
_pyflamegpu.RunLogVec_swigregister(RunLogVec)

class AgentStateVis(object):
    r"""
    This provides an interface for managing the render options for all agents within a specific state
    Options default to values set within their parent
    Even if the default is changed after the agent state is constructed
    TODO: Block everything non-const from being called whilst VIS is active
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parent, state_name):
        r"""
        Creates a new AgentStateVis to configure visualisation options for a particular agent-state
        :type parent: :py:class:`AgentVis`
        :param parent: Visualisation options for the agent
        :type state_name: string
        :param state_name: State of the agent for which this options should represent
        """
        _pyflamegpu.AgentStateVis_swiginit(self, _pyflamegpu.new_AgentStateVis(parent, state_name))

    def setModel(self, *args):
        r"""
        *Overload 1:*

        Use a model from file
        :type modelPath: string
        :param modelPath: File path of model
        :type texturePath: string, optional
        :param texturePath: Optional path to a texture for the model
        Notes: Model must be .obj format

        |

        *Overload 2:*

        Use a stock model
        :type model: :py:class:`Model`
        :param model: Model from internal resources
        See also: Stock::Models::Model
        """
        return _pyflamegpu.AgentStateVis_setModel(self, *args)

    def setModelScale(self, *args):
        r"""
        *Overload 1:*

        Scale each dimension of the model to the corresponding world scales
        :type xLen: float
        :param xLen: World scale of the model's on the x axis
        :type yLen: float
        :param yLen: World scale of the model's on the y axis
        :type zLen: float
        :param zLen: World scale of the model's on the z axis
        Notes: Y is considered the vertical axis

        |

        *Overload 2:*

        Uniformly scale model so that max dimension equals this
        :type maxLen: float
        :param maxLen: World scale of the model's relative to the axis which it is
            largest
        """
        return _pyflamegpu.AgentStateVis_setModelScale(self, *args)

    def clearColor(self):
        r"""Disable custom color, e.g. if you're using a textured model"""
        return _pyflamegpu.AgentStateVis_clearColor(self)

    def setColor(self, *args):
        return _pyflamegpu.AgentStateVis_setColor(self, *args)
    __swig_destroy__ = _pyflamegpu.delete_AgentStateVis

# Register AgentStateVis in _pyflamegpu:
_pyflamegpu.AgentStateVis_swigregister(AgentStateVis)

class AgentVis(object):
    r"""
    This provides an interface for managing the render options for all agents of a specific type
    State() can be called to specialise options for agents within a specific state
    TODO: Block everything non-const from being called whilst VIS is active
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, agent, autopalette=0):
        r"""
        :type agent: CUDAAgent
        :param agent: The CUDAAgent this class is configuring the visualisation for
        :type autopalette: std::shared_ptr< AutoPalette >, optional
        :param autopalette: Automatic source of colors for individual agent states
        Notes: Agent states only receive colors from the autopalette when AgentVis::State() is called for each state
        By default, all states share the same color from the autopalette
        """
        _pyflamegpu.AgentVis_swiginit(self, _pyflamegpu.new_AgentVis(agent, autopalette))

    def State(self, state_name):
        r"""
        Returns the configuration handler for the named state
        On first use for each state this will assign the state a color from the AutoPalette if available
        Clear the autopalette first if you wish for it to use the default color
        """
        return _pyflamegpu.AgentVis_State(self, state_name)

    def setXVariable(self, var_name):
        r"""
        Set the name of the variable representing the agents x/y/z location coordinates
        :type var_name: string
        :param var_name: Name of the agent variable
        Notes: unnecessary if the variables are named "x", "y", "z" respectively
        """
        return _pyflamegpu.AgentVis_setXVariable(self, var_name)

    def setYVariable(self, var_name):
        return _pyflamegpu.AgentVis_setYVariable(self, var_name)

    def setZVariable(self, var_name):
        return _pyflamegpu.AgentVis_setZVariable(self, var_name)

    def setForwardXVariable(self, var_name):
        r"""
        Set the name of the variable representing the agents x/y/z direction vector components
        Single axis rotation only requires x/z components
        Double axis rotation requires all 3 components
        Triple axis rotation requires all 3 components and additionally all 3 Up components
        :type var_name: string
        :param var_name: Name of the agent variable
        Notes: setForwardXVariable() and setForwardZVariable() are an alternate to providing a yaw angle, setting either of these will erase yaw if bound
        See also: setYawVariable(const std::string&)
        setForwardYVariable() is an alternate to providing a pitch angle, setting this will erase pitch if bound
        See also: setPitchVariable(const std::string&)
        Forward is a synonym for Direction
        """
        return _pyflamegpu.AgentVis_setForwardXVariable(self, var_name)

    def setForwardYVariable(self, var_name):
        return _pyflamegpu.AgentVis_setForwardYVariable(self, var_name)

    def setForwardZVariable(self, var_name):
        return _pyflamegpu.AgentVis_setForwardZVariable(self, var_name)

    def setUpXVariable(self, var_name):
        r"""
        Set the name of the variable representing the agents x/y/z UP vector
        This should be 90 degrees perpendicular to the direction vector
        :type var_name: string
        :param var_name: Name of the agent variable
        Notes: setUpXVariable(), setUpYVariable() and setUpZVariable() are an alternate to providing a roll angle, setting any of these will erase roll if bound
        See also: setRollVariable(const std::string&)
        """
        return _pyflamegpu.AgentVis_setUpXVariable(self, var_name)

    def setUpYVariable(self, var_name):
        return _pyflamegpu.AgentVis_setUpYVariable(self, var_name)

    def setUpZVariable(self, var_name):
        return _pyflamegpu.AgentVis_setUpZVariable(self, var_name)

    def setYawVariable(self, var_name):
        r"""
        Set the name of the variable representing the agents yaw rotation angle (radians)

        :type var_name: string
        :param var_name: Name of the agent variable
        Notes: This is an alternate to providing a direction vector, setting this will erase forward x/z if bound
        See also: setForwardXVariable(const std::string&)
        See also: setForwardZVariable(const std::string&)
        Heading is a synonym for Yaw
        """
        return _pyflamegpu.AgentVis_setYawVariable(self, var_name)

    def setPitchVariable(self, var_name):
        r"""
        Set the name of the variable representing the agents pitch rotation angle (radians)

        :type var_name: string
        :param var_name: Name of the agent variable
        Notes: This is an alternate to providing a direction vector, setting this will erase forward y if bound
        See also: setForwardYVariable(const std::string&)
        """
        return _pyflamegpu.AgentVis_setPitchVariable(self, var_name)

    def setRollVariable(self, var_name):
        r"""
        Set the name of the variable representing the agents yaw rotation angle (radians)

        :type var_name: string
        :param var_name: Name of the agent variable
        Notes: This is an alternate to providing an UP vector, setting this will erase up x/y/z if bound
        See also: setUpXVariable(const std::string&)
        See also: setUpYVariable(const std::string&)
        See also: setUpZVariable(const std::string&)
        Bank is a synonym for Roll
        """
        return _pyflamegpu.AgentVis_setRollVariable(self, var_name)

    def setUniformScaleVariable(self, var_name):
        r"""
        Set the name of the variable representing the agents uniform scale multiplier

        The scale multiplier is multiplied by the model scale

        :type var_name: string
        :param var_name: Name of the agent variable
        Notes: This is an alternate to providing individual scale components, setting this will erase scale x/y/z if bound
        See also: setScaleXVariable(const std::string&)
        See also: setScaleYVariable(const std::string&)
        See also: setScaleZVariable(const std::string&)
        See also: setModelScale(float)
        See also: setModelScale(float, float, float)
        """
        return _pyflamegpu.AgentVis_setUniformScaleVariable(self, var_name)

    def setScaleXVariable(self, var_name):
        r"""
        Set the name of the variable representing the agents x/y/z scale multiplier components
        It is not necessary to set all 3 components if only 1 or 2 are required. Unset values will be treated as a 1.0 multiplier

        The scale multiplier is multiplied by the model scale

        :type var_name: string
        :param var_name: Name of the agent variable
        Notes: This is an alternate to providing a single uniform scale multiplier, setting this will erase uniform scale if bound
        See also: setUniformScaleVariable(const std::string&)
        See also: setModelScale(float)
        See also: setModelScale(float, float, float)
        """
        return _pyflamegpu.AgentVis_setScaleXVariable(self, var_name)

    def setScaleYVariable(self, var_name):
        return _pyflamegpu.AgentVis_setScaleYVariable(self, var_name)

    def setScaleZVariable(self, var_name):
        return _pyflamegpu.AgentVis_setScaleZVariable(self, var_name)

    def clearXVariable(self):
        r"""
        Clears the agent's x/y/z location variable bindings
        See also: setXVariable(conCst std::string &)
        See also: setYVariable(conCst std::string &)
        See also: setZVariable(conCst std::string &)
        """
        return _pyflamegpu.AgentVis_clearXVariable(self)

    def clearYVariable(self):
        return _pyflamegpu.AgentVis_clearYVariable(self)

    def clearZVariable(self):
        return _pyflamegpu.AgentVis_clearZVariable(self)

    def clearForwardXVariable(self):
        r"""
        Clears the agent's x/y/z forward variable bindings
        See also: setForwardXVariable(const std::string &)
        See also: setForwardYVariable(const std::string &)
        See also: setForwardZVariable(const std::string &)
        """
        return _pyflamegpu.AgentVis_clearForwardXVariable(self)

    def clearForwardYVariable(self):
        return _pyflamegpu.AgentVis_clearForwardYVariable(self)

    def clearForwardZVariable(self):
        return _pyflamegpu.AgentVis_clearForwardZVariable(self)

    def clearUpXVariable(self):
        r"""
        Clears the agent's x/y/z UP variable bindings
        See also: setUpXVariable(const std::string &)
        See also: setUpYVariable(const std::string &)
        See also: setUpZVariable(const std::string &)
        """
        return _pyflamegpu.AgentVis_clearUpXVariable(self)

    def clearUpYVariable(self):
        return _pyflamegpu.AgentVis_clearUpYVariable(self)

    def clearUpZVariable(self):
        return _pyflamegpu.AgentVis_clearUpZVariable(self)

    def clearYawVariable(self):
        r"""
        Clears the agent's yaw angle variable bindings
        See also: setYawVariable(const std::string &)
        """
        return _pyflamegpu.AgentVis_clearYawVariable(self)

    def clearPitchVariable(self):
        r"""
        Clears the agent's pitch angle variable bindings
        See also: setPitchVariable(const std::string &)
        """
        return _pyflamegpu.AgentVis_clearPitchVariable(self)

    def clearRollVariable(self):
        r"""
        Clears the agent's roll angle variable bindings
        See also: setRollVariable(const std::string &)
        """
        return _pyflamegpu.AgentVis_clearRollVariable(self)

    def clearUniformScaleVariable(self):
        r"""
        Clears the agent's uniform scale multiplier variable bindings
        See also: setUniformScaleVariable(const std::string &)
        """
        return _pyflamegpu.AgentVis_clearUniformScaleVariable(self)

    def clearScaleXVariable(self):
        r"""
        Clears the agent's x/y/z scale multiplier variable bindings
        See also: setScaleXVariable(const std::string &)
        See also: setScaleYVariable(const std::string &)
        See also: setScaleZVariable(const std::string &)
        """
        return _pyflamegpu.AgentVis_clearScaleXVariable(self)

    def clearScaleYVariable(self):
        return _pyflamegpu.AgentVis_clearScaleYVariable(self)

    def clearScaleZVariable(self):
        return _pyflamegpu.AgentVis_clearScaleZVariable(self)

    def getXVariable(self):
        r"""Returns the variable used for the agent's x/y/z location coordinates"""
        return _pyflamegpu.AgentVis_getXVariable(self)

    def getYVariable(self):
        return _pyflamegpu.AgentVis_getYVariable(self)

    def getZVariable(self):
        return _pyflamegpu.AgentVis_getZVariable(self)

    def getForwardXVariable(self):
        r"""Returns the variable used for the agent's x/y/z forward vector components"""
        return _pyflamegpu.AgentVis_getForwardXVariable(self)

    def getForwardYVariable(self):
        return _pyflamegpu.AgentVis_getForwardYVariable(self)

    def getForwardZVariable(self):
        return _pyflamegpu.AgentVis_getForwardZVariable(self)

    def getUpXVariable(self):
        r"""Returns the variable used for the agent's x/y/z up vector components"""
        return _pyflamegpu.AgentVis_getUpXVariable(self)

    def getUpYVariable(self):
        return _pyflamegpu.AgentVis_getUpYVariable(self)

    def getUpZVariable(self):
        return _pyflamegpu.AgentVis_getUpZVariable(self)

    def getYawVariable(self):
        r"""Returns the variable used for the agent's yaw angle"""
        return _pyflamegpu.AgentVis_getYawVariable(self)

    def getPitchVariable(self):
        r"""Returns the variable used for the agent's pitch angle"""
        return _pyflamegpu.AgentVis_getPitchVariable(self)

    def getRollVariable(self):
        r"""Returns the variable used for the agent's roll angle"""
        return _pyflamegpu.AgentVis_getRollVariable(self)

    def getUniformScaleVariable(self):
        r"""Returns the variable used for the agent's uniform scaling multiplier"""
        return _pyflamegpu.AgentVis_getUniformScaleVariable(self)

    def getScaleXVariable(self):
        r"""Returns the variable used for the agent's x/y/z scale multiplier components"""
        return _pyflamegpu.AgentVis_getScaleXVariable(self)

    def getScaleYVariable(self):
        return _pyflamegpu.AgentVis_getScaleYVariable(self)

    def getScaleZVariable(self):
        return _pyflamegpu.AgentVis_getScaleZVariable(self)

    def setModel(self, *args):
        r"""
        *Overload 1:*

        Use a model from file
        :type modelPath: string
        :param modelPath: The path to the model's file (must be .obj)
        :type texturePath: string, optional
        :param texturePath: Optional path to the texture used by the model

        |

        *Overload 2:*

        Use a stock model
        :type model: :py:class:`Model`
        :param model: Model from the libraries internal resources
        """
        return _pyflamegpu.AgentVis_setModel(self, *args)

    def setModelScale(self, *args):
        r"""
        *Overload 1:*

        Scale each dimension of the model to the corresponding world scales
        :type xLen: float
        :param xLen: World scale of the model's on the x axis
        :type yLen: float
        :param yLen: World scale of the model's on the y axis
        :type zLen: float
        :param zLen: World scale of the model's on the z axis
        Notes: Y is considered the vertical axis

        |

        *Overload 2:*

        Uniformly scale model so that max dimension equals this
        :type maxLen: float
        :param maxLen: World scale of the model's relative to the axis which it is largest
        """
        return _pyflamegpu.AgentVis_setModelScale(self, *args)

    def setAutoPalette(self, ap):
        r"""
        Set the auto-palette used to assign agent-state's colors
        Notes: The color is assigned the first time State() is called, otherwise agents use the default color
        """
        return _pyflamegpu.AgentVis_setAutoPalette(self, ap)

    def clearColor(self):
        r"""Disable custom color and/or auto-palette, e.g. if you're using a textured model"""
        return _pyflamegpu.AgentVis_clearColor(self)

    def setColor(self, *args):
        return _pyflamegpu.AgentVis_setColor(self, *args)
    __swig_destroy__ = _pyflamegpu.delete_AgentVis

# Register AgentVis in _pyflamegpu:
_pyflamegpu.AgentVis_swigregister(AgentVis)

class LineVis(object):
    r"""Interface for managing a LineConfig"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, l, r, g, b, a):
        r"""
        Create a new interface for managing a LineConfig
        :type l: std::shared_ptr< LineConfig >
        :param l: The line config  being constructed
        :type r: float
        :param r: Initial color's red component
        :type g: float
        :param g: Initial color's green component
        :type b: float
        :param b: Initial color's blue component
        :type a: float
        :param a: Initial color's alpha component
        """
        _pyflamegpu.LineVis_swiginit(self, _pyflamegpu.new_LineVis(l, r, g, b, a))

    def setColor(self, r, g, b, a=1.0):
        r"""
        Update the color for following vertices
        :type r: float
        :param r: Color's red component
        :type g: float
        :param g: Color's green component
        :type b: float
        :param b: Color's blue component
        :type a: float, optional
        :param a: Color's alpha component
        """
        return _pyflamegpu.LineVis_setColor(self, r, g, b, a)

    def addVertex(self, x, y, z=0.0):
        r"""
        Adds a new vertex to the drawing
        :type x: float
        :param x: Vertex's x coord
        :type y: float
        :param y: Vertex's y coord
        :type z: float, optional
        :param z: Vertex's z coord
        Notes: Y is considered the vertical axis
        """
        return _pyflamegpu.LineVis_addVertex(self, x, y, z)
    __swig_destroy__ = _pyflamegpu.delete_LineVis

# Register LineVis in _pyflamegpu:
_pyflamegpu.LineVis_swigregister(LineVis)

class ModelVis(object):
    r"""This provides an interface for managing the render options for a specific CUDASimulation"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model):
        r"""
        This class is constructed by/with a CUDASimulation
        Constructor will be clarified later, once requirements are clearer
        Requires:
        > texturise agent variable pointers
        > On resize, also update textures
        """
        _pyflamegpu.ModelVis_swiginit(self, _pyflamegpu.new_ModelVis(model))
    __swig_destroy__ = _pyflamegpu.delete_ModelVis

    def setAutoPalette(self, palette):
        r"""
        Sets the palette to automatically give color to agent added to the model
        This can be overriden at an agent level or disabled
        Similarly, individual agent-states can have their colour overriden
        """
        return _pyflamegpu.ModelVis_setAutoPalette(self, palette)

    def clearAutoPalette(self):
        r"""
        Disables the auto-palette, subsequently created AgentVis/AgentStateVis will not take colors from it
        Notes: AgentVis/AgentStateVis which have already sampled a color will not lose their existing color
        """
        return _pyflamegpu.ModelVis_clearAutoPalette(self)

    def addAgent(self, agent_name):
        r"""
        Enables visualisation of the named agent and returns the configuration handler
        See also: Agent(const std::string&)
        TODO: Block this from being called whilst visualiser is allocated
        """
        return _pyflamegpu.ModelVis_addAgent(self, agent_name)

    def Agent(self, agent_name):
        r"""
        Returns the configuration handler if the agent has been marked for visualisation
        See also: addAgent(const std::string&)
        """
        return _pyflamegpu.ModelVis_Agent(self, agent_name)

    def setWindowTitle(self, title):
        r"""
        Set the title for the visualisation window
        This value defaults to the model's name
        :type title: string
        :param title: The title for the viusalisation window
        """
        return _pyflamegpu.ModelVis_setWindowTitle(self, title)

    def setWindowDimensions(self, width, height):
        r"""
        Set the dimensions of the visualisation window
        This value defaults to 1280x720 (720p)
        :type width: int
        :param width: Window width
        :type height: int
        :param height: Window height
        """
        return _pyflamegpu.ModelVis_setWindowDimensions(self, width, height)

    def setClearColor(self, red, green, blue):
        r"""
        Set the clear color (the background color) of the visualisation
        This value defaults to black (0,0,0)
        :type red: float
        :param red: Red color value 0.0f-1.0f
        :type green: float
        :param green: Green color value 0.0f-1.0f
        :type blue: float
        :param blue: Blue color value 0.0f-1.0f
        """
        return _pyflamegpu.ModelVis_setClearColor(self, red, green, blue)

    def setFPSVisible(self, showFPS):
        r"""
        Sets the FPS overlay as visible or not
        This value defaults to true
        :type showFPS: boolean
        :param showFPS: True if the FPS should be shown
        Notes: The visualisation executes in an independent thread to the simulation,
        so the FPS does not correspond to the speed of the simulation's execution
        See also: setFPSColor(const float &, const float &, const float &)
        """
        return _pyflamegpu.ModelVis_setFPSVisible(self, showFPS)

    def setFPSColor(self, red, green, blue):
        r"""
        Sets the color of the FPS overlay's text
        This value defaults to white (1,1,1)
        This  may be useful if you have changed the clear color
        :type red: float
        :param red: Red color value 0.0f-1.0f
        :type green: float
        :param green: Green color value 0.0f-1.0f
        :type blue: float
        :param blue: Blue color value 0.0f-1.0f
        """
        return _pyflamegpu.ModelVis_setFPSColor(self, red, green, blue)

    def setInitialCameraLocation(self, x, y, z):
        r"""
        The location at which the camera of the visualisation 'camera' begins
        This value defaults to (1.5, 1.5, 1.5)
        :type x: float
        :param x: The x coordinate
        :type y: float
        :param y: The y coordinate
        :type z: float
        :param z: The z coordinate
        """
        return _pyflamegpu.ModelVis_setInitialCameraLocation(self, x, y, z)

    def setInitialCameraTarget(self, x, y, z):
        r"""
        The location at which the camera of the visualisation initially looks towards
        This is used with the camera location to derive the direction
        This value defaults to (0,0,0)
        :type x: float
        :param x: The x coordinate
        :type y: float
        :param y: The y coordinate
        :type z: float
        :param z: The z coordinate
        """
        return _pyflamegpu.ModelVis_setInitialCameraTarget(self, x, y, z)

    def setCameraSpeed(self, speed, shiftMultiplier=5.0):
        r"""
        The speed of camera movement, in units travelled per millisecond
        This value defaults to (0.05, 5.0)
        :type speed: float
        :param speed: The camera speed
        :type shiftMultiplier: float, optional
        :param shiftMultiplier: The multiplier applied to the speed when shift is pressed
        """
        return _pyflamegpu.ModelVis_setCameraSpeed(self, speed, shiftMultiplier)

    def setViewClips(self, nearClip, farClip):
        r"""
        Sets the near and far clipping planes of the view frustum
        This value defaults to (0.05 5000.0)
        Notes: This is for advanced configuration of the visualisation and the default values likely suffice
        """
        return _pyflamegpu.ModelVis_setViewClips(self, nearClip, farClip)

    def setStepVisible(self, showStep):
        r"""
        Sets the Step count overlay as visible or not
        This value defaults to true
        :type showStep: boolean
        :param showStep: True if the count should be shown
        Notes: This uses the FPSColor
        See also: setFPSColor(const float &, const float &, const float &)
        """
        return _pyflamegpu.ModelVis_setStepVisible(self, showStep)

    def setSimulationSpeed(self, stepsPerSecond):
        r"""
        Sets a limit on the rate of simulation
        A value of 0 leaves the rate unlimited
        This value defaults to 0
        :type stepsPerSecond: int
        :param stepsPerSecond: The number of simulation steps to execute per second
        """
        return _pyflamegpu.ModelVis_setSimulationSpeed(self, stepsPerSecond)

    def setBeginPaused(self, beginPaused):
        r"""
        Sets whether the simulation should begin in a paused state or not
        This value defaults to false
        The simulation can be resumed (or re-paused) by pressing 'p'
        :type beginPaused: boolean
        :param beginPaused: True if the simulation should begin paused
        """
        return _pyflamegpu.ModelVis_setBeginPaused(self, beginPaused)

    def addStaticModel(self, *args):
        r"""
        Adds a static model to the visualisation
        :type modelPath: string
        :param modelPath: Path of the model on disk
        :type texturePath: string, optional
        :param texturePath: Optional path to a texture fore the model on disk
        """
        return _pyflamegpu.ModelVis_addStaticModel(self, *args)

    def newLineSketch(self, r, g, b, a=1.0):
        r"""
        Create a new sketch constructed from individual line segments to the visualisation
        :type r: float
        :param r: Initial color's red component
        :type g: float
        :param g: Initial color's green component
        :type b: float
        :param b: Initial color's blue component
        :type a: float, optional
        :param a: Initial color's alpha component
        """
        return _pyflamegpu.ModelVis_newLineSketch(self, r, g, b, a)

    def newPolylineSketch(self, r, g, b, a=1.0):
        r"""
        Create a new sketch constructed from a single line of connected vertices to the visualisation
        :type r: float
        :param r: Initial color's red component
        :type g: float
        :param g: Initial color's green component
        :type b: float
        :param b: Initial color's blue component
        :type a: float, optional
        :param a: Initial color's alpha component
        """
        return _pyflamegpu.ModelVis_newPolylineSketch(self, r, g, b, a)

    def activate(self):
        r"""Sets the visualisation running in a background thread"""
        return _pyflamegpu.ModelVis_activate(self)

    def deactivate(self):
        r"""
        Kills the background thread
        Does nothing visualisation is not running
        """
        return _pyflamegpu.ModelVis_deactivate(self)

    def join(self):
        r"""
        Blocks the main thread until the background visualisation thread has returned
        Does nothing visualisation is not running
        Notes: It is expected that you will close the visualiser window with the cross in the corner if join is called
        """
        return _pyflamegpu.ModelVis_join(self)

    def isRunning(self):
        r"""Returns whether the background thread is active or not"""
        return _pyflamegpu.ModelVis_isRunning(self)

    def updateBuffers(self, *args):
        r"""
        Updates all agent renders from corresponding
        :type sc: int, optional
        :param sc: Step count, the step count value shown in visualisation HUD
        """
        return _pyflamegpu.ModelVis_updateBuffers(self, *args)

# Register ModelVis in _pyflamegpu:
_pyflamegpu.ModelVis_swigregister(ModelVis)

class StaticModelVis(object):
    r"""This class serves as an interface for managing an instance of ModelConfig::StaticModel"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _m):
        r"""
        :type _m: std::shared_ptr< ModelConfig::StaticModel >
        :param _m: Reference which this interface manages
        Notes: This should only be constructed by ModelVis
        See also: ModelVis::addStaticModel(const std::string &, const std::string &)
        """
        _pyflamegpu.StaticModelVis_swiginit(self, _pyflamegpu.new_StaticModelVis(_m))

    def setModelScale(self, *args):
        r"""
        *Overload 1:*

        Scale each dimension of the model to the corresponding world scales
        :type xLen: float
        :param xLen: World scale of the model's on the x axis
        :type yLen: float
        :param yLen: World scale of the model's on the y axis
        :type zLen: float
        :param zLen: World scale of the model's on the z axis
        Notes: Y is considered the vertical axis

        |

        *Overload 2:*

        Uniformly scale model so that max dimension equals this
        :type maxLen: float
        :param maxLen: World scale of the model's relative to the axis which it is
            largest
        """
        return _pyflamegpu.StaticModelVis_setModelScale(self, *args)

    def setModelLocation(self, x, y, z):
        r"""
        Translation applied to the model
        :type x: float
        :param x: X coordinate
        :type y: float
        :param y: Y coordinate
        :type z: float
        :param z: Z coordinate
        Notes: Y is considered the vertical axis
        """
        return _pyflamegpu.StaticModelVis_setModelLocation(self, x, y, z)

    def setModelRotation(self, x, y, z, radians):
        r"""
        Rotation applied to the model (before translation)
        :type x: float
        :param x: X component of axis vector
        :type y: float
        :param y: Y component of axis vector
        :type z: float
        :param z: Z component of axis vector
        :type radians: float
        :param radians: How far the model is rotated about the axis
        Notes: Y is considered the vertical axis
        """
        return _pyflamegpu.StaticModelVis_setModelRotation(self, x, y, z, radians)
    __swig_destroy__ = _pyflamegpu.delete_StaticModelVis

# Register StaticModelVis in _pyflamegpu:
_pyflamegpu.StaticModelVis_swigregister(StaticModelVis)

class Color(object):
    r"""
    Store for a floating point rgba color
    Each component should be in the inclusive range [0, 1] in-order for the color to be considered valid
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r = property(_pyflamegpu.Color_r_get, _pyflamegpu.Color_r_set, doc=r"""Color components: red, green, blue, alpha""")
    g = property(_pyflamegpu.Color_g_get, _pyflamegpu.Color_g_set)
    b = property(_pyflamegpu.Color_b_get, _pyflamegpu.Color_b_set)
    a = property(_pyflamegpu.Color_a_get, _pyflamegpu.Color_a_set)

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Default constructor, initialises to white

        |

        *Overload 2:*

        Construct a color with red, green, blue (and alpha) components
        Each component should be in the range [0, 1]

        |

        *Overload 3:*

        Construct a color with red, green, blue (and alpha) components
        Each component should be in the range [0, 1]

        |

        *Overload 4:*

        Construct a color with red, green, blue (and alpha) components
        Each component should be in the range [0, 255]

        |

        *Overload 5:*

        Construct a color with red, green, blue (and alpha) components
        Each component should be in the range [0, 255]

        |

        *Overload 6:*

        Construct a color with red, green and blue components
        Each component should be in the range [0, 1]

        |

        *Overload 7:*

        Construct a color with red, green, blue and alpha components
        Each component should be in the range [0, 1]

        |

        *Overload 8:*

        Construct a color with red, green and blue components
        Each component should be in the range [0, 255]

        |

        *Overload 9:*

        Construct a color with red, green, blue and alpha components
        Each component should be in the range [0, 255]

        |

        *Overload 10:*

        Construct a color from a hexcode
        Supported formats:
        #abcdef
        #abc
        abcdef
        abc
        :raises: InvalidArgument If parsing fails
        """
        _pyflamegpu.Color_swiginit(self, _pyflamegpu.new_Color(*args))

    def validate(self):
        r"""Return true if all color components are in the inclusive range [0.0, 1.0]"""
        return _pyflamegpu.Color_validate(self)

    def __eq__(self, other):
        r"""
        Equality operator
        Notes: It performs equality comparison on floats, this isn't too useful as very similar floats can be deemed different
        """
        return _pyflamegpu.Color___eq__(self, other)

    def __ne__(self, other):
        r"""
        Inequality operator
        Notes: It performs equality comparison on floats, this isn't too useful as very similar floats can be deemed different
        """
        return _pyflamegpu.Color___ne__(self, other)

    def __add__(self, other):
        r"""Add the components of 2 colors"""
        return _pyflamegpu.Color___add__(self, other)

    def __mul__(self, i):
        r"""
        Multiple the components of a color by i
        TODO: Rework this to the other format, so color doesnt need to be the first item
        """
        return _pyflamegpu.Color___mul__(self, i)
    __swig_destroy__ = _pyflamegpu.delete_Color

# Register Color in _pyflamegpu:
_pyflamegpu.Color_swigregister(Color)

class Palette(object):
    r"""
    Abstract class for representing collections of const colors
    Optionally, an enum can be added to sub-classes to allow them to be accessed via a name
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Qualitative = _pyflamegpu.Palette_Qualitative
    Sequential = _pyflamegpu.Palette_Sequential
    Diverging = _pyflamegpu.Palette_Diverging
    __swig_destroy__ = _pyflamegpu.delete_Palette

    def size(self):
        r"""Returns the number of colors in the palette"""
        return _pyflamegpu.Palette_size(self)

    def __eq__(self, other):
        r"""Compares two palettes for equality (whether they contain the same colors)"""
        return _pyflamegpu.Palette___eq__(self, other)

    def getColorBlindFriendly(self):
        r"""Returns whether the palette is confirmed as suitable for colorblind viewers"""
        return _pyflamegpu.Palette_getColorBlindFriendly(self)

    def getCategory(self):
        r"""
        Returns the category of the palette
        See also: Category
        """
        return _pyflamegpu.Palette_getCategory(self)

    def __iter__(self):
        return FLAMEGPUIterator(self)
    def __len__(self):
        return self.size()


    def __getitem__(self, index):
        return _pyflamegpu.Palette___getitem__(self, index)

# Register Palette in _pyflamegpu:
_pyflamegpu.Palette_swigregister(Palette)
BLACK = cvar.BLACK
WHITE = cvar.WHITE
RED = cvar.RED
GREEN = cvar.GREEN
BLUE = cvar.BLUE

class Set1(Palette):
    r"""
    Qualitative palette
    Set1 from Colorbrewer
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.Set1_swiginit(self, _pyflamegpu.new_Set1())

    def getCategory(self):
        return _pyflamegpu.Set1_getCategory(self)

    def getColorBlindFriendly(self):
        return _pyflamegpu.Set1_getColorBlindFriendly(self)
    RED = _pyflamegpu.Set1_RED
    BLUE = _pyflamegpu.Set1_BLUE
    GREEN = _pyflamegpu.Set1_GREEN
    PURPLE = _pyflamegpu.Set1_PURPLE
    ORANGE = _pyflamegpu.Set1_ORANGE
    YELLOW = _pyflamegpu.Set1_YELLOW
    BROWN = _pyflamegpu.Set1_BROWN
    PINK = _pyflamegpu.Set1_PINK
    GREY = _pyflamegpu.Set1_GREY
    __swig_destroy__ = _pyflamegpu.delete_Set1

# Register Set1 in _pyflamegpu:
_pyflamegpu.Set1_swigregister(Set1)

class Set2(Palette):
    r"""
    Color blind friendly qualitative palette
    Set2 from Colorbrewer
    Notes: Color names are approximations using https://www.color-blindness.com/color-name-hue/
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.Set2_swiginit(self, _pyflamegpu.new_Set2())

    def getCategory(self):
        return _pyflamegpu.Set2_getCategory(self)

    def getColorBlindFriendly(self):
        return _pyflamegpu.Set2_getColorBlindFriendly(self)
    PUERTO_RICO = _pyflamegpu.Set2_PUERTO_RICO
    ATOMIC_TANGERINE = _pyflamegpu.Set2_ATOMIC_TANGERINE
    POLO_BLUE = _pyflamegpu.Set2_POLO_BLUE
    SHOCKING = _pyflamegpu.Set2_SHOCKING
    CONIFER = _pyflamegpu.Set2_CONIFER
    SUNGLOW = _pyflamegpu.Set2_SUNGLOW
    CHAMOIS = _pyflamegpu.Set2_CHAMOIS
    DARK_GREY = _pyflamegpu.Set2_DARK_GREY
    __swig_destroy__ = _pyflamegpu.delete_Set2

# Register Set2 in _pyflamegpu:
_pyflamegpu.Set2_swigregister(Set2)

class Dark2(Palette):
    r"""
    Color blind friendly qualitative palette
    Dark2 from Colorbrewer
    Notes: Color names are approximations using https://www.color-blindness.com/color-name-hue/
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.Dark2_swiginit(self, _pyflamegpu.new_Dark2())

    def getCategory(self):
        return _pyflamegpu.Dark2_getCategory(self)

    def getColorBlindFriendly(self):
        return _pyflamegpu.Dark2_getColorBlindFriendly(self)
    ELF_GREEN = _pyflamegpu.Dark2_ELF_GREEN
    TAWNY = _pyflamegpu.Dark2_TAWNY
    RICH_BLUE = _pyflamegpu.Dark2_RICH_BLUE
    RAZZMATAZZ = _pyflamegpu.Dark2_RAZZMATAZZ
    CHRISTI = _pyflamegpu.Dark2_CHRISTI
    GAMBOGE = _pyflamegpu.Dark2_GAMBOGE
    GOLDEN_BROWN = _pyflamegpu.Dark2_GOLDEN_BROWN
    MORTAR = _pyflamegpu.Dark2_MORTAR
    __swig_destroy__ = _pyflamegpu.delete_Dark2

# Register Dark2 in _pyflamegpu:
_pyflamegpu.Dark2_swigregister(Dark2)

class Pastel(Palette):
    r"""
    Qualitative palette
    pastel palette from seaborn
    Blue light filters may cause MACARONI_AND_CHEESE(1) and ROSEBUD(3) to appear similar
    Notes: Color names are approximations using https://www.color-blindness.com/color-name-hue/
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.Pastel_swiginit(self, _pyflamegpu.new_Pastel())

    def getCategory(self):
        return _pyflamegpu.Pastel_getCategory(self)

    def getColorBlindFriendly(self):
        return _pyflamegpu.Pastel_getColorBlindFriendly(self)
    PALE_CORNFLOWER_BLUE = _pyflamegpu.Pastel_PALE_CORNFLOWER_BLUE
    MACARONI_AND_CHEESE = _pyflamegpu.Pastel_MACARONI_AND_CHEESE
    GRANNY_SMITH_APPLE = _pyflamegpu.Pastel_GRANNY_SMITH_APPLE
    ROSEBUD = _pyflamegpu.Pastel_ROSEBUD
    MAUVE = _pyflamegpu.Pastel_MAUVE
    PANCHO = _pyflamegpu.Pastel_PANCHO
    LAVENDER_ROSE = _pyflamegpu.Pastel_LAVENDER_ROSE
    VERY_LIGHT_GREY = _pyflamegpu.Pastel_VERY_LIGHT_GREY
    CANARY = _pyflamegpu.Pastel_CANARY
    PALE_TURQUOISE = _pyflamegpu.Pastel_PALE_TURQUOISE
    __swig_destroy__ = _pyflamegpu.delete_Pastel

# Register Pastel in _pyflamegpu:
_pyflamegpu.Pastel_swigregister(Pastel)

class YlOrRd(Palette):
    r"""
    Color blind friendly Sequential palette
    YlOrRd palette from Colorbrewer
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.YlOrRd_swiginit(self, _pyflamegpu.new_YlOrRd())

    def getCategory(self):
        return _pyflamegpu.YlOrRd_getCategory(self)

    def getColorBlindFriendly(self):
        return _pyflamegpu.YlOrRd_getColorBlindFriendly(self)
    __swig_destroy__ = _pyflamegpu.delete_YlOrRd

# Register YlOrRd in _pyflamegpu:
_pyflamegpu.YlOrRd_swigregister(YlOrRd)

class YlGn(Palette):
    r"""
    Color blind friendly Sequential palette
    YlGn palette from Colorbrewer
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.YlGn_swiginit(self, _pyflamegpu.new_YlGn())

    def getCategory(self):
        return _pyflamegpu.YlGn_getCategory(self)

    def getColorBlindFriendly(self):
        return _pyflamegpu.YlGn_getColorBlindFriendly(self)
    __swig_destroy__ = _pyflamegpu.delete_YlGn

# Register YlGn in _pyflamegpu:
_pyflamegpu.YlGn_swigregister(YlGn)

class Greys(Palette):
    r"""
    Color blind friendly Sequential palette
    Greys palette from Colorbrewer
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.Greys_swiginit(self, _pyflamegpu.new_Greys())

    def getCategory(self):
        return _pyflamegpu.Greys_getCategory(self)

    def getColorBlindFriendly(self):
        return _pyflamegpu.Greys_getColorBlindFriendly(self)
    __swig_destroy__ = _pyflamegpu.delete_Greys

# Register Greys in _pyflamegpu:
_pyflamegpu.Greys_swigregister(Greys)

class RdYlBu(Palette):
    r"""
    Color blind friendly Diverging palette
    RdYlBu palette from Colorbrewer
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.RdYlBu_swiginit(self, _pyflamegpu.new_RdYlBu())

    def getCategory(self):
        return _pyflamegpu.RdYlBu_getCategory(self)

    def getColorBlindFriendly(self):
        return _pyflamegpu.RdYlBu_getColorBlindFriendly(self)
    __swig_destroy__ = _pyflamegpu.delete_RdYlBu

# Register RdYlBu in _pyflamegpu:
_pyflamegpu.RdYlBu_swigregister(RdYlBu)

class PiYG(Palette):
    r"""
    Color blind friendly Diverging palette
    PiYG palette from Colorbrewer
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyflamegpu.PiYG_swiginit(self, _pyflamegpu.new_PiYG())

    def getCategory(self):
        return _pyflamegpu.PiYG_getCategory(self)

    def getColorBlindFriendly(self):
        return _pyflamegpu.PiYG_getColorBlindFriendly(self)
    __swig_destroy__ = _pyflamegpu.delete_PiYG

# Register PiYG in _pyflamegpu:
_pyflamegpu.PiYG_swigregister(PiYG)

class Viridis(Palette):
    r"""
    Color blind friendly dynamic sequential palette
    Viridis from BIDS/MatPlotLib: https://github.com/BIDS/colormap
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getCategory(self):
        return _pyflamegpu.Viridis_getCategory(self)

    def getColorBlindFriendly(self):
        return _pyflamegpu.Viridis_getColorBlindFriendly(self)

    def __init__(self, *args):
        r"""Construct the Palette by specifying how many color values are required"""
        _pyflamegpu.Viridis_swiginit(self, _pyflamegpu.new_Viridis(*args))
    __swig_destroy__ = _pyflamegpu.delete_Viridis

# Register Viridis in _pyflamegpu:
_pyflamegpu.Viridis_swigregister(Viridis)

class StaticColor(object):
    r"""
    Creates a color function returning a static color
    You probably don't need to use this class directly, instances of Color are implicitly converted to a StaticColor
    Notes: Currently ignores alpha channel of colors as Alpha support isn't properly tested
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rgba):
        r"""
        Constructs a static color function generator
        All components must be provided in the inclusive range [0.0, 1.0]
        :type rgba: :py:class:`Color`
        :param rgba: Color to represent
        """
        _pyflamegpu.StaticColor_swiginit(self, _pyflamegpu.new_StaticColor(rgba))

    def getSrc(self):
        r"""
        Returns a function returning a constant color in the form:
        vec4 calculateColor() {
          return vec4(1.0, 0.0, 0.0, 1.0);
        }
        """
        return _pyflamegpu.StaticColor_getSrc(self)
    __swig_destroy__ = _pyflamegpu.delete_StaticColor

# Register StaticColor in _pyflamegpu:
_pyflamegpu.StaticColor_swigregister(StaticColor)
SET1 = cvar.SET1
SET2 = cvar.SET2
DARK2 = cvar.DARK2
PASTEL = cvar.PASTEL
YLORRD = cvar.YLORRD
YLGN = cvar.YLGN
GREYS = cvar.GREYS
RDYLBU = cvar.RDYLBU
PIYG = cvar.PIYG

class HSVInterpolation(object):
    r"""Agent color function for mapping a floating point value to a HSV hue"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def REDGREEN(variable_name, min_bound=0.0, max_bound=1.0):
        r"""
        0 = Red, 1 = Green
        :type variable_name: string
        :param variable_name: agent variable of type float to map to the color
        :type min_bound: float, optional
        :param min_bound: The value of the agent variable which should map to the Red
        :type max_bound: float, optional
        :param max_bound: The value of the agent variable which should map to the Green
        """
        return _pyflamegpu.HSVInterpolation_REDGREEN(variable_name, min_bound, max_bound)

    @staticmethod
    def GREENRED(variable_name, min_bound=0.0, max_bound=1.0):
        r"""
        0 = Green, 1 = Red
        :type variable_name: string
        :param variable_name: agent variable of type float to map to the color
        :type min_bound: float, optional
        :param min_bound: The value of the agent variable which should map to Green
        :type max_bound: float, optional
        :param max_bound: The value of the agent variable which should map to Red
        """
        return _pyflamegpu.HSVInterpolation_GREENRED(variable_name, min_bound, max_bound)

    def __init__(self, variable_name, hMin, hMax, s=1.0, v=0.88):
        r"""
        Constructs a HSV interpolation function generator
        All components must be provided in the inclusive range [0.0, 1.0]
        :type variable_name: string
        :param variable_name: Name of the agent variable which maps to hue, the variable type must be float
        :type hMin: float
        :param hMin: Hue value when the agent variable is 0.0
        :type hMax: float
        :param hMax: Hue value when the agent variable is 1.0
        :type s: float, optional
        :param s: Saturation (the inverse amount of grey)
        :type v: float, optional
        :param v: Value (brightness)
        """
        _pyflamegpu.HSVInterpolation_swiginit(self, _pyflamegpu.new_HSVInterpolation(variable_name, hMin, hMax, s, v))

    def setBounds(self, min_bound, max_bound):
        r"""
        Set the bounds to clamp an agent variable to before using for HSV interpolation
        :type min_bound: float
        :param min_bound: The agent variable value that should map to the minimum hue, must be smaller than max_bound
        :type max_bound: float
        :param max_bound: The agent variable value that should map to the maximum hue, must be larger than min_bound
        :rtype: :py:class:`HSVInterpolation`
        :return: Returns itself, so that you can chain the method (otherwise constructor would have too many optional args)
        :raises: InvalidArgument if min_bound > max_bound
        Notes: Defaults to (0.0, 1.0)
        """
        return _pyflamegpu.HSVInterpolation_setBounds(self, min_bound, max_bound)

    def setWrapHue(self, _wrapHue):
        r"""
        If set to true, hue will interpolate over the 0/360 boundary
        If set false, hue will interpolate without wrapping (e.g. if hMax is < hMin), hMin will be assigned to the lower_bound
        By default this is set to false
        """
        return _pyflamegpu.HSVInterpolation_setWrapHue(self, _wrapHue)

    def getSrc(self):
        r"""Returns GLSL for a function that returns a color based on the configured HSV interpolation"""
        return _pyflamegpu.HSVInterpolation_getSrc(self)

    def getSamplerName(self):
        r'''Always returns "color_arg"'''
        return _pyflamegpu.HSVInterpolation_getSamplerName(self)

    def getAgentVariableName(self):
        r"""Returns variable_name"""
        return _pyflamegpu.HSVInterpolation_getAgentVariableName(self)
    __swig_destroy__ = _pyflamegpu.delete_HSVInterpolation

# Register HSVInterpolation in _pyflamegpu:
_pyflamegpu.HSVInterpolation_swigregister(HSVInterpolation)

def HSVInterpolation_REDGREEN(variable_name, min_bound=0.0, max_bound=1.0):
    r"""
    0 = Red, 1 = Green
    :type variable_name: string
    :param variable_name: agent variable of type float to map to the color
    :type min_bound: float, optional
    :param min_bound: The value of the agent variable which should map to the Red
    :type max_bound: float, optional
    :param max_bound: The value of the agent variable which should map to the Green
    """
    return _pyflamegpu.HSVInterpolation_REDGREEN(variable_name, min_bound, max_bound)

def HSVInterpolation_GREENRED(variable_name, min_bound=0.0, max_bound=1.0):
    r"""
    0 = Green, 1 = Red
    :type variable_name: string
    :param variable_name: agent variable of type float to map to the color
    :type min_bound: float, optional
    :param min_bound: The value of the agent variable which should map to Green
    :type max_bound: float, optional
    :param max_bound: The value of the agent variable which should map to Red
    """
    return _pyflamegpu.HSVInterpolation_GREENRED(variable_name, min_bound, max_bound)

class Model(object):
    r"""Path to model file and optional texture within integrated resources"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    modelPath = property(_pyflamegpu.Model_modelPath_get, _pyflamegpu.Model_modelPath_set)
    texturePath = property(_pyflamegpu.Model_texturePath_get, _pyflamegpu.Model_texturePath_set)

    def __init__(self):
        _pyflamegpu.Model_swiginit(self, _pyflamegpu.new_Model())
    __swig_destroy__ = _pyflamegpu.delete_Model

# Register Model in _pyflamegpu:
_pyflamegpu.Model_swigregister(Model)

class iDiscreteColor(object):
    r"""
    Used to define a discrete color selection function
    Integer keys are mapped to static colors
    Add key:color pairs to this class as you would a std::map *
    This class only supports being instantiated with types int32_t, and uint32_t
    These have been typedef as iDiscreteColor and uDiscreteColor respectively
    The agent variable which provides the key should be of the corresponding type
    Notes: Currently ignores alpha channel of colors as Alpha support isn't properly tested
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Constructs a discrete color function generator
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key, this key must have type T within the model
        :type fallback: :py:class:`Color`
        :param fallback: Color that is returned when the provided integer is not found within the map

        |

        *Overload 2:*

        Constructs a discrete color function generator from a palette, with a separate fallback color
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :type fallback: :py:class:`Color`
        :param fallback: The color to return when they lookup doesn't have a matching int
        :type offset: int, optional
        :param offset: The key to map to the first palette color
        :type stride: int, optional
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, T, T);

        |

        *Overload 3:*

        Constructs a discrete color function generator from a palette, with a separate fallback color
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :type fallback: :py:class:`Color`
        :param fallback: The color to return when they lookup doesn't have a matching int
        :type offset: int, optional
        :param offset: The key to map to the first palette color
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, T, T);

        |

        *Overload 4:*

        Constructs a discrete color function generator from a palette, with a separate fallback color
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :type fallback: :py:class:`Color`
        :param fallback: The color to return when they lookup doesn't have a matching int
        :param offset: The key to map to the first palette color
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, T, T);

        |

        *Overload 5:*

        Constructs a discrete color function generator from a palette, with the palette's final color used as the fallback color
        This version maps the final color of the palette to the fallback, rather than an integer key
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :type offset: int, optional
        :param offset: The key to map to the first palette color
        :type stride: int, optional
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, const Color&, T, T);

        |

        *Overload 6:*

        Constructs a discrete color function generator from a palette, with the palette's final color used as the fallback color
        This version maps the final color of the palette to the fallback, rather than an integer key
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :type offset: int, optional
        :param offset: The key to map to the first palette color
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, const Color&, T, T);

        |

        *Overload 7:*

        Constructs a discrete color function generator from a palette, with the palette's final color used as the fallback color
        This version maps the final color of the palette to the fallback, rather than an integer key
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :param offset: The key to map to the first palette color
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, const Color&, T, T);
        """
        _pyflamegpu.iDiscreteColor_swiginit(self, _pyflamegpu.new_iDiscreteColor(*args))

    def getSrc(self):
        r"""
        Returns a function containing a switch statement through the entries of the map, e.g.
        uniform samplerBuffer color_arg;
        vec4 calculateColor() {
            const int category = floatBitsToInt(texelFetch(color_arg, gl_InstanceID).x);
            switch (category) {
              case 12: return vec4(1, 0, 0, 1);
              default: return vec4(0, 1, 0, 1);
            }
        }
        """
        return _pyflamegpu.iDiscreteColor_getSrc(self)

    def getSamplerName(self):
        r'''Always returns "color_arg"'''
        return _pyflamegpu.iDiscreteColor_getSamplerName(self)

    def getAgentVariableName(self):
        r"""Returns variable_name"""
        return _pyflamegpu.iDiscreteColor_getAgentVariableName(self)

    def validate(self):
        r"""
        Checks whether the current components can be used as a valid RGBA colour
        Returns false if any contained color components are outside of the range [0.0, 1.0]
        """
        return _pyflamegpu.iDiscreteColor_validate(self)
    __swig_destroy__ = _pyflamegpu.delete_iDiscreteColor

# Register iDiscreteColor in _pyflamegpu:
_pyflamegpu.iDiscreteColor_swigregister(iDiscreteColor)
SPHERE = cvar.SPHERE
ICOSPHERE = cvar.ICOSPHERE
CUBE = cvar.CUBE
TEAPOT = cvar.TEAPOT
STUNTPLANE = cvar.STUNTPLANE

class uDiscreteColor(object):
    r"""
    Used to define a discrete color selection function
    Integer keys are mapped to static colors
    Add key:color pairs to this class as you would a std::map *
    This class only supports being instantiated with types int32_t, and uint32_t
    These have been typedef as iDiscreteColor and uDiscreteColor respectively
    The agent variable which provides the key should be of the corresponding type
    Notes: Currently ignores alpha channel of colors as Alpha support isn't properly tested
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Constructs a discrete color function generator
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key, this key must have type T within the model
        :type fallback: :py:class:`Color`
        :param fallback: Color that is returned when the provided integer is not found within the map

        |

        *Overload 2:*

        Constructs a discrete color function generator from a palette, with a separate fallback color
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :type fallback: :py:class:`Color`
        :param fallback: The color to return when they lookup doesn't have a matching int
        :type offset: int, optional
        :param offset: The key to map to the first palette color
        :type stride: int, optional
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, T, T);

        |

        *Overload 3:*

        Constructs a discrete color function generator from a palette, with a separate fallback color
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :type fallback: :py:class:`Color`
        :param fallback: The color to return when they lookup doesn't have a matching int
        :type offset: int, optional
        :param offset: The key to map to the first palette color
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, T, T);

        |

        *Overload 4:*

        Constructs a discrete color function generator from a palette, with a separate fallback color
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :type fallback: :py:class:`Color`
        :param fallback: The color to return when they lookup doesn't have a matching int
        :param offset: The key to map to the first palette color
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, T, T);

        |

        *Overload 5:*

        Constructs a discrete color function generator from a palette, with the palette's final color used as the fallback color
        This version maps the final color of the palette to the fallback, rather than an integer key
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :type offset: int, optional
        :param offset: The key to map to the first palette color
        :type stride: int, optional
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, const Color&, T, T);

        |

        *Overload 6:*

        Constructs a discrete color function generator from a palette, with the palette's final color used as the fallback color
        This version maps the final color of the palette to the fallback, rather than an integer key
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :type offset: int, optional
        :param offset: The key to map to the first palette color
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, const Color&, T, T);

        |

        *Overload 7:*

        Constructs a discrete color function generator from a palette, with the palette's final color used as the fallback color
        This version maps the final color of the palette to the fallback, rather than an integer key
        :type variable_name: string
        :param variable_name: Name of the agent variable which provides the integer key
        :type palette: :py:class:`Palette`
        :param palette: The colors to use
        :param offset: The key to map to the first palette color
        :param stride: The value to added to every subsequent key
        See also: DiscreteColor(const std::string&, const Palette&, const Color&, T, T);
        """
        _pyflamegpu.uDiscreteColor_swiginit(self, _pyflamegpu.new_uDiscreteColor(*args))

    def getSrc(self):
        r"""
        Returns a function containing a switch statement through the entries of the map, e.g.
        uniform samplerBuffer color_arg;
        vec4 calculateColor() {
            const int category = floatBitsToInt(texelFetch(color_arg, gl_InstanceID).x);
            switch (category) {
              case 12: return vec4(1, 0, 0, 1);
              default: return vec4(0, 1, 0, 1);
            }
        }
        """
        return _pyflamegpu.uDiscreteColor_getSrc(self)

    def getSamplerName(self):
        r'''Always returns "color_arg"'''
        return _pyflamegpu.uDiscreteColor_getSamplerName(self)

    def getAgentVariableName(self):
        r"""Returns variable_name"""
        return _pyflamegpu.uDiscreteColor_getAgentVariableName(self)

    def validate(self):
        r"""
        Checks whether the current components can be used as a valid RGBA colour
        Returns false if any contained color components are outside of the range [0.0, 1.0]
        """
        return _pyflamegpu.uDiscreteColor_validate(self)
    __swig_destroy__ = _pyflamegpu.delete_uDiscreteColor

# Register uDiscreteColor in _pyflamegpu:
_pyflamegpu.uDiscreteColor_swigregister(uDiscreteColor)

VISUALISATION = _pyflamegpu.VISUALISATION
SEATBELTS = _pyflamegpu.SEATBELTS


